/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			div.childNodes[ 0 ].style.borderCollapse = "separate";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {

	// Disconnected elements are considered hidden
	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
		return true;
	}
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));

/**
 * jQuery EasyUI 1.4.5
 * 
 * Copyright (c) 2009-2016 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the freeware license: http://www.jeasyui.com/license_freeware.php
 * To use it on other terms please contact us: info@jeasyui.com
 *
 */
/**
 * parser - jQuery EasyUI
 * 
 */
(function($){
	$.easyui = {
		/**
		 * Get the index of array item, return -1 when the item is not found.
		 */
		indexOfArray: function(a, o, id){
			for(var i=0,len=a.length; i<len; i++){
				if (id == undefined){
					if (a[i] == o){return i;}
				} else {
					if (a[i][o] == id){return i;}
				}
			}
			return -1;
		},
		/**
		 * Remove array item, 'o' parameter can be item object or id field name.
		 * When 'o' parameter is the id field name, the 'id' parameter is valid.
		 */
		removeArrayItem: function(a, o, id){
			if (typeof o == 'string'){
				for(var i=0,len=a.length; i<len; i++){
					if (a[i][o] == id){
						a.splice(i, 1);
						return;
					}
				}
			} else {
				var index = this.indexOfArray(a,o);
				if (index != -1){
					a.splice(index, 1);
				}
			}
		},
		/**
		 * Add un-duplicate array item, 'o' parameter is the id field name, if the 'r' object is exists, deny the action.
		 */
		addArrayItem: function(a, o, r){
			var index = this.indexOfArray(a, o, r ? r[o] : undefined);
			if (index == -1){
				a.push(r ? r : o);
			} else {
				a[index] = r ? r : o;
			}
		},
		getArrayItem: function(a, o, id){
			var index = this.indexOfArray(a, o, id);
			return index==-1 ? null : a[index];
		},
		forEach: function(data, deep, callback){
			var nodes = [];
			for(var i=0; i<data.length; i++){
				nodes.push(data[i]);
			}
			while(nodes.length){
				var node = nodes.shift();
				if (callback(node) == false){return;}
				if (deep && node.children){
					for(var i=node.children.length-1; i>=0; i--){
						nodes.unshift(node.children[i]);
					}
				}
			}
		}
	};

	$.parser = {
		auto: true,
		onComplete: function(context){},
		//plugins:['draggable','droppable','resizable','pagination','tooltip',
		//         'linkbutton','menu','menubutton','splitbutton','switchbutton','progressbar',
		//		 'tree','textbox','filebox','combo','combobox','combotree','combogrid','numberbox','validatebox','searchbox',
		//		 'spinner','numberspinner','timespinner','datetimespinner','calendar','datebox','datetimebox','slider',
		//		 'layout','panel','datagrid','propertygrid','treegrid','datalist','tabs','accordion','window','dialog','form'
		//],
        plugins:['draggable','droppable','resizable','tree','layout','panel'],
		parse: function(context){
			var aa = [];
			for(var i=0; i<$.parser.plugins.length; i++){
				var name = $.parser.plugins[i];
				var r = $('.easyui-' + name, context);
				if (r.length){
					if (r[name]){
						r.each(function(){
							$(this)[name]($.data(this, 'options')||{});
						});
					} else {
						aa.push({name:name,jq:r});
					}
				}
			}
			if (aa.length && window.easyloader){
				var names = [];
				for(var i=0; i<aa.length; i++){
					names.push(aa[i].name);
				}
				easyloader.load(names, function(){
					for(var i=0; i<aa.length; i++){
						var name = aa[i].name;
						var jq = aa[i].jq;
						jq.each(function(){
							$(this)[name]($.data(this, 'options')||{});
						});
					}
					$.parser.onComplete.call($.parser, context);
				});
			} else {
				$.parser.onComplete.call($.parser, context);
			}
		},
		
		parseValue: function(property, value, parent, delta){
			delta = delta || 0;
			var v = $.trim(String(value||''));
			var endchar = v.substr(v.length-1, 1);
			if (endchar == '%'){
				v = parseInt(v.substr(0, v.length-1));
				if (property.toLowerCase().indexOf('width') >= 0){
					v = Math.floor((parent.width()-delta) * v / 100.0);
				} else {
					v = Math.floor((parent.height()-delta) * v / 100.0);
				}
			} else {
				v = parseInt(v) || undefined;
			}
			return v;
		},
		
		/**
		 * parse options, including standard 'data-options' attribute.
		 * 
		 * calling examples:
		 * $.parser.parseOptions(target);
		 * $.parser.parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
		 */
		parseOptions: function(target, properties){
			var t = $(target);
			var options = {};
			
			var s = $.trim(t.attr('data-options'));
			if (s){
				if (s.substring(0, 1) != '{'){
					s = '{' + s + '}';
				}
				options = (new Function('return ' + s))();
			}
			$.map(['width','height','left','top','minWidth','maxWidth','minHeight','maxHeight'], function(p){
				var pv = $.trim(target.style[p] || '');
				if (pv){
					if (pv.indexOf('%') == -1){
						pv = parseInt(pv);
						if (isNaN(pv)){
							pv = undefined;
						}
					}
					options[p] = pv;
				}
			});
				
			if (properties){
				var opts = {};
				for(var i=0; i<properties.length; i++){
					var pp = properties[i];
					if (typeof pp == 'string'){
						opts[pp] = t.attr(pp);
					} else {
						for(var name in pp){
							var type = pp[name];
							if (type == 'boolean'){
								opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
							} else if (type == 'number'){
								opts[name] = t.attr(name)=='0' ? 0 : parseFloat(t.attr(name)) || undefined;
							}
						}
					}
				}
				$.extend(options, opts);
			}
			return options;
		}
	};
	$(function(){
		var d = $('<div style="position:absolute;top:-1000px;width:100px;height:100px;padding:5px"></div>').appendTo('body');
		$._boxModel = d.outerWidth()!=100;
		d.remove();
		d = $('<div style="position:fixed"></div>').appendTo('body');
		$._positionFixed = (d.css('position') == 'fixed');
		d.remove();
		
		if (!window.easyloader && $.parser.auto){
			$.parser.parse();
		}
	});
	
	/**
	 * extend plugin to set box model width
	 */
	$.fn._outerWidth = function(width){
		if (width == undefined){
			if (this[0] == window){
				return this.width() || document.body.clientWidth;
			}
			return this.outerWidth()||0;
		}
		return this._size('width', width);
	};
	
	/**
	 * extend plugin to set box model height
	 */
	$.fn._outerHeight = function(height){
		if (height == undefined){
			if (this[0] == window){
				return this.height() || document.body.clientHeight;
			}
			return this.outerHeight()||0;
		}
		return this._size('height', height);
	};
	
	$.fn._scrollLeft = function(left){
		if (left == undefined){
			return this.scrollLeft();
		} else {
			return this.each(function(){$(this).scrollLeft(left)});
		}
	};
	
	$.fn._propAttr = $.fn.prop || $.fn.attr;
	
	$.fn._size = function(options, parent){
		if (typeof options == 'string'){
			if (options == 'clear'){
				return this.each(function(){
					$(this).css({width:'',minWidth:'',maxWidth:'',height:'',minHeight:'',maxHeight:''});
				});
			} else if (options == 'fit'){
				return this.each(function(){
					_fit(this, this.tagName=='BODY' ? $('body') : $(this).parent(), true);
				});
			} else if (options == 'unfit'){
				return this.each(function(){
					_fit(this, $(this).parent(), false);
				});
			} else {
				if (parent == undefined){
					return _css(this[0], options);
				} else {
					return this.each(function(){
						_css(this, options, parent);
					});
				}
			}
		} else {
			return this.each(function(){
				parent = parent || $(this).parent();
				$.extend(options, _fit(this, parent, options.fit)||{});
				var r1 = _setSize(this, 'width', parent, options);
				var r2 = _setSize(this, 'height', parent, options);
				if (r1 || r2){
					$(this).addClass('easyui-fluid');
				} else {
					$(this).removeClass('easyui-fluid');
				}
			});
		}
		
		function _fit(target, parent, fit){
			if (!parent.length){return false;}
			var t = $(target)[0];
			var p = parent[0];
			var fcount = p.fcount || 0;
			if (fit){
				if (!t.fitted){
					t.fitted = true;
					p.fcount = fcount + 1;
					$(p).addClass('panel-noscroll');
					if (p.tagName == 'BODY'){
						$('html').addClass('panel-fit');
					}
				}
				return {
					width: ($(p).width()||1),
					height: ($(p).height()||1)
				};
			} else {
				if (t.fitted){
					t.fitted = false;
					p.fcount = fcount - 1;
					if (p.fcount == 0){
						$(p).removeClass('panel-noscroll');
						if (p.tagName == 'BODY'){
							$('html').removeClass('panel-fit');
						}
					}
				}
				return false;
			}
		}
		function _setSize(target, property, parent, options){
			var t = $(target);
			var p = property;
			var p1 = p.substr(0,1).toUpperCase() + p.substr(1);
			var min = $.parser.parseValue('min'+p1, options['min'+p1], parent);// || 0;
			var max = $.parser.parseValue('max'+p1, options['max'+p1], parent);// || 99999;
			var val = $.parser.parseValue(p, options[p], parent);
			var fluid = (String(options[p]||'').indexOf('%') >= 0 ? true : false);
			
			if (!isNaN(val)){
				var v = Math.min(Math.max(val, min||0), max||99999);
				if (!fluid){
					options[p] = v;
				}
				t._size('min'+p1, '');
				t._size('max'+p1, '');
				t._size(p, v);
			} else {
				t._size(p, '');
				t._size('min'+p1, min);
				t._size('max'+p1, max);
			}
			return fluid || options.fit;
		}
		function _css(target, property, value){
			var t = $(target);
			if (value == undefined){
				value = parseInt(target.style[property]);
				if (isNaN(value)){return undefined;}
				if ($._boxModel){
					value += getDeltaSize();
				}
				return value;
			} else if (value === ''){
				t.css(property, '');
			} else {
				if ($._boxModel){
					value -= getDeltaSize();
					if (value < 0){value = 0;}
				}
				t.css(property, value+'px');
			}
			function getDeltaSize(){
				if (property.toLowerCase().indexOf('width') >= 0){
					return t.outerWidth() - t.width();
				} else {
					return t.outerHeight() - t.height();
				}
			}
		}
	};
	
})(jQuery);
/**
 * jQuery EasyUI 1.4.5
 * 
 * Copyright (c) 2009-2016 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the freeware license: http://www.jeasyui.com/license_freeware.php
 * To use it on other terms please contact us: info@jeasyui.com
 *
 */
/****************************jquery.resizable****************************/
(function($) {
    //	var isResizing = false;
    $.fn.resizable = function(options,param) {
        if(typeof options == 'string') {
            return $.fn.resizable.methods[options](this,param);
        }

        function resize(e) {
            var resizeData = e.data;
            var options = $.data(resizeData.target,'resizable').options;
            if(resizeData.dir.indexOf('e') != -1) {
                var width = resizeData.startWidth + e.pageX - resizeData.startX;
                width = Math.min(
							Math.max(width,options.minWidth),
							options.maxWidth
						);
                resizeData.width = width;
            }
            if(resizeData.dir.indexOf('s') != -1) {
                var height = resizeData.startHeight + e.pageY - resizeData.startY;
                height = Math.min(
						Math.max(height,options.minHeight),
						options.maxHeight
				);
                resizeData.height = height;
            }
            if(resizeData.dir.indexOf('w') != -1) {
                var width = resizeData.startWidth - e.pageX + resizeData.startX;
                width = Math.min(
							Math.max(width,options.minWidth),
							options.maxWidth
						);
                resizeData.width = width;
                resizeData.left = resizeData.startLeft + resizeData.startWidth - resizeData.width;

                //				resizeData.width = resizeData.startWidth - e.pageX + resizeData.startX;
                //				if (resizeData.width >= options.minWidth && resizeData.width <= options.maxWidth) {
                //					resizeData.left = resizeData.startLeft + e.pageX - resizeData.startX;
                //				}
            }
            if(resizeData.dir.indexOf('n') != -1) {
                var height = resizeData.startHeight - e.pageY + resizeData.startY;
                height = Math.min(
							Math.max(height,options.minHeight),
							options.maxHeight
						);
                resizeData.height = height;
                resizeData.top = resizeData.startTop + resizeData.startHeight - resizeData.height;

                //				resizeData.height = resizeData.startHeight - e.pageY + resizeData.startY;
                //				if (resizeData.height >= options.minHeight && resizeData.height <= options.maxHeight) {
                //					resizeData.top = resizeData.startTop + e.pageY - resizeData.startY;
                //				}
            }
        }

        function applySize(e) {
            var resizeData = e.data;
            var t = $(resizeData.target);
            t.css({
                left: resizeData.left,
                top: resizeData.top
            });
            if(t.outerWidth() != resizeData.width) { t._outerWidth(resizeData.width) }
            if(t.outerHeight() != resizeData.height) { t._outerHeight(resizeData.height) }
            //			t._outerWidth(resizeData.width)._outerHeight(resizeData.height);
        }

        function doDown(e) {
            //			isResizing = true;
            $.fn.resizable.isResizing = true;
            $.data(e.data.target,'resizable').options.onStartResize.call(e.data.target,e);
            return false;
        }

        function doMove(e) {
            resize(e);
            if($.data(e.data.target,'resizable').options.onResize.call(e.data.target,e) != false) {
                applySize(e)
            }
            return false;
        }

        function doUp(e) {
            //			isResizing = false;
            $.fn.resizable.isResizing = false;
            resize(e,true);
            applySize(e);
            $.data(e.data.target,'resizable').options.onStopResize.call(e.data.target,e);
            $(document).unbind('.resizable');
            $('body').css('cursor','');
            //			$('body').css('cursor','auto');
            return false;
        }

        return this.each(function() {
            var opts = null;
            var state = $.data(this,'resizable');
            if(state) {
                $(this).unbind('.resizable');
                opts = $.extend(state.options,options || {});
            } else {
                opts = $.extend({},$.fn.resizable.defaults,$.fn.resizable.parseOptions(this),options || {});
                $.data(this,'resizable',{
                    options: opts
                });
            }

            if(opts.disabled == true) {
                return;
            }

            // bind mouse event using namespace resizable
            $(this).bind('mousemove.resizable',{ target: this },function(e) {
                //				if (isResizing) return;
                if($.fn.resizable.isResizing) { return }
                var dir = getDirection(e);
                if(dir == '') {
                    $(e.data.target).css('cursor','');
                } else {
                    $(e.data.target).css('cursor',dir + '-resize');
                }
            }).bind('mouseleave.resizable',{ target: this },function(e) {
                $(e.data.target).css('cursor','');
            }).bind('mousedown.resizable',{ target: this },function(e) {
                var dir = getDirection(e);
                if(dir == '') return;

                function getCssValue(css) {
                    var val = parseInt($(e.data.target).css(css));
                    if(isNaN(val)) {
                        return 0;
                    } else {
                        return val;
                    }
                }

                var data = {
                    target: e.data.target,
                    dir: dir,
                    startLeft: getCssValue('left'),
                    startTop: getCssValue('top'),
                    left: getCssValue('left'),
                    top: getCssValue('top'),
                    startX: e.pageX,
                    startY: e.pageY,
                    startWidth: $(e.data.target).outerWidth(),
                    startHeight: $(e.data.target).outerHeight(),
                    width: $(e.data.target).outerWidth(),
                    height: $(e.data.target).outerHeight(),
                    deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
                    deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
                };
                $(document).bind('mousedown.resizable',data,doDown);
                $(document).bind('mousemove.resizable',data,doMove);
                $(document).bind('mouseup.resizable',data,doUp);
                $('body').css('cursor',dir + '-resize');
            });

            // get the resize direction
            function getDirection(e) {
                var tt = $(e.data.target);
                var dir = '';
                var offset = tt.offset();
                var width = tt.outerWidth();
                var height = tt.outerHeight();
                var edge = opts.edge;
                if(e.pageY > offset.top && e.pageY < offset.top + edge) {
                    dir += 'n';
                } else if(e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
                    dir += 's';
                }
                if(e.pageX > offset.left && e.pageX < offset.left + edge) {
                    dir += 'w';
                } else if(e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
                    dir += 'e';
                }

                var handles = opts.handles.split(',');
                for(var i = 0;i < handles.length;i++) {
                    var handle = handles[i].replace(/(^\s*)|(\s*$)/g,'');
                    if(handle == 'all' || handle == dir) {
                        return dir;
                    }
                }
                return '';
            }


        });
    };

    $.fn.resizable.methods = {
        options: function(jq) {
            return $.data(jq[0],'resizable').options;
        },
        enable: function(jq) {
            return jq.each(function() {
                $(this).resizable({ disabled: false });
            });
        },
        disable: function(jq) {
            return jq.each(function() {
                $(this).resizable({ disabled: true });
            });
        }
    };

    $.fn.resizable.parseOptions = function(target) {
        var t = $(target);
        return $.extend({},
				$.parser.parseOptions(target,[
					'handles',{ minWidth: 'number',minHeight: 'number',maxWidth: 'number',maxHeight: 'number',edge: 'number' }
				]),{
				    disabled: (t.attr('disabled') ? true : undefined)
				})
    };

    $.fn.resizable.defaults = {
        disabled: false,
        handles: 'n, e, s, w, ne, se, sw, nw, all',
        minWidth: 10,
        minHeight: 10,
        maxWidth: 10000,//$(document).width(),
        maxHeight: 10000,//$(document).height(),
        edge: 5,
        onStartResize: function(e) { },
        onResize: function(e) { },
        onStopResize: function(e) { }
    };

    $.fn.resizable.isResizing = false;

})(jQuery);

/****************************jquery.panel****************************/
(function($) {
    $.fn._remove = function() {
        return this.each(function() {
            $(this).remove();
            try {
                this.outerHTML = "";
            }
            catch(err) {
            }
        });
    };
    function _1(_2) {
        _2._remove();
    };
    function _3(_4,_5) {
        var _6 = $.data(_4,"panel");
        var _7 = _6.options;
        var _8 = _6.panel;
        var _9 = _8.children(".panel-header");
        var _a = _8.children(".panelx-body");
        var _b = _8.children(".panel-footer");
        if(_5) {
            $.extend(_7,{ width: _5.width,height: _5.height,minWidth: _5.minWidth,maxWidth: _5.maxWidth,minHeight: _5.minHeight,maxHeight: _5.maxHeight,left: _5.left,top: _5.top });
        }
        _8._size(_7);
        _9.add(_a)._outerWidth(_8.width());
        if(!isNaN(parseInt(_7.height))) {
            _a._outerHeight(_8.height() - _9._outerHeight() - _b._outerHeight());
        } else {
            _a.css("height","");
            var _c = $.parser.parseValue("minHeight",_7.minHeight,_8.parent());
            var _d = $.parser.parseValue("maxHeight",_7.maxHeight,_8.parent());
            var _e = _9._outerHeight() + _b._outerHeight() + _8._outerHeight() - _8.height();
            _a._size("minHeight",_c ? (_c - _e) : "");
            _a._size("maxHeight",_d ? (_d - _e) : "");
        }
        _8.css({ height: "",minHeight: "",maxHeight: "",left: _7.left,top: _7.top });
        _7.onResize.apply(_4,[_7.width,_7.height]);
        $(_4).panel("doLayout");
    };
    function _f(_10,_11) {
        var _12 = $.data(_10,"panel").options;
        var _13 = $.data(_10,"panel").panel;
        if(_11) {
            if(_11.left != null) {
                _12.left = _11.left;
            }
            if(_11.top != null) {
                _12.top = _11.top;
            }
        }
        _13.css({ left: _12.left,top: _12.top });
        _12.onMove.apply(_10,[_12.left,_12.top]);
    };
    function _14(_15) {
        $(_15).addClass("panelx-body")._size("clear");
        var _16 = $("<div class=\"panelx\"></div>").insertBefore(_15);
        _16[0].appendChild(_15);
        _16.bind("_resize",function(e,_17) {
            if($(this).hasClass("easyui-fluid") || _17) {
                _3(_15);
            }
            return false;
        });
        return _16;
    };
    function _18(_19) {
        var _1a = $.data(_19,"panel");
        var _1b = _1a.options;
        var _1c = _1a.panel;
        _1c.css(_1b.style);
        _1c.addClass(_1b.cls);
        _1d();
        _1e();
        var _1f = $(_19).panel("header");
        var _20 = $(_19).panel("body");
        var _21 = $(_19).siblings(".panel-footer");
        if(_1b.border) {
            _1f.removeClass("panel-header-noborder");
            _20.removeClass("panel-body-noborder");
            _21.removeClass("panel-footer-noborder");
        } else {
            _1f.addClass("panel-header-noborder");
            _20.addClass("panel-body-noborder");
            _21.addClass("panel-footer-noborder");
        }
        _1f.addClass(_1b.headerCls);
        _20.addClass(_1b.bodyCls);
        $(_19).attr("id",_1b.id || "");
        if(_1b.content) {
            $(_19).panel("clear");
            $(_19).html(_1b.content);
            $.parser.parse($(_19));
        }
        function _1d() {
            if(_1b.noheader || (!_1b.title && !_1b.header)) {
                _1(_1c.children(".panel-header"));
                _1c.children(".panelx-body").addClass("panel-body-noheader");
            } else {
                if(_1b.header) {
                    $(_1b.header).addClass("panel-header").prependTo(_1c);
                } else {
                    var _22 = _1c.children(".panel-header");
                    if(!_22.length) {
                        _22 = $("<div class=\"panel-header\"></div>").prependTo(_1c);
                    }
                    if(!$.isArray(_1b.tools)) {
                        _22.find("div.panel-tool .panel-tool-a").appendTo(_1b.tools);
                    }
                    _22.empty();
                    var _23 = $("<div class=\"panel-title\"></div>").html(_1b.title).appendTo(_22);
                    if(_1b.iconCls) {
                        _23.addClass("panel-with-icon");
                        $("<div class=\"panel-icon\"></div>").addClass(_1b.iconCls).appendTo(_22);
                    }
                    var _24 = $("<div class=\"panel-tool\"></div>").appendTo(_22);
                    _24.bind("click",function(e) {
                        e.stopPropagation();
                    });
                    if(_1b.tools) {
                        if($.isArray(_1b.tools)) {
                            $.map(_1b.tools,function(t) {
                                _25(_24,t.iconCls,eval(t.handler));
                            });
                        } else {
                            $(_1b.tools).children().each(function() {
                                $(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a").appendTo(_24);
                            });
                        }
                    }
                    if(_1b.collapsible) {
                        _25(_24,"panel-tool-collapse",function() {
                            if(_1b.collapsed == true) {
                                _4d(_19,true);
                            } else {
                                _3b(_19,true);
                            }
                        });
                    }
                    if(_1b.minimizable) {
                        _25(_24,"panel-tool-min",function() {
                            _58(_19);
                        });
                    }
                    if(_1b.maximizable) {
                        _25(_24,"panel-tool-max",function() {
                            if(_1b.maximized == true) {
                                _5c(_19);
                            } else {
                                _3a(_19);
                            }
                        });
                    }
                    if(_1b.closable) {
                        _25(_24,"panel-tool-close",function() {
                            _3c(_19);
                        });
                    }
                }
                _1c.children("div.panelx-body").removeClass("panel-body-noheader");
            }
        };
        function _25(c,_26,_27) {
            var a = $("<a href=\"javascript:void(0)\"></a>").addClass(_26).appendTo(c);
            a.bind("click",_27);
        };
        function _1e() {
            if(_1b.footer) {
                $(_1b.footer).addClass("panel-footer").appendTo(_1c);
                $(_19).addClass("panel-body-nobottom");
            } else {
                _1c.children(".panel-footer").remove();
                $(_19).removeClass("panel-body-nobottom");
            }
        };
    };
    function _28(_29,_2a) {
        var _2b = $.data(_29,"panel");
        var _2c = _2b.options;
        if(_2d) {
            _2c.queryParams = _2a;
        }
        if(!_2c.href) {
            return;
        }
        if(!_2b.isLoaded || !_2c.cache) {
            var _2d = $.extend({},_2c.queryParams);
            if(_2c.onBeforeLoad.call(_29,_2d) == false) {
                return;
            }
            _2b.isLoaded = false;
            $(_29).panel("clear");
            if(_2c.loadingMessage) {
                $(_29).mask('正在加载...',200);
                //$(_29).html($("<div class=\"panel-loading\"></div>").html(_2c.loadingMessage));
            }
            _2c.loader.call(_29,_2d,function(_2e) {
                var _2f = _2c.extractor.call(_29,_2e);
                $(_29).html(_2f);
                $.parser.parse($(_29));
                _2c.onLoad.apply(_29,arguments);
                _2b.isLoaded = true;
                $(_29).unmask();
            }, function () {
                $(_29).unmask();
                _2c.onLoadError.apply(_29,arguments);
            });
        }
    };
    function _30(_31) {
        var t = $(_31);
        t.find(".combo-f").each(function() {
            $(this).combo("destroy");
        });
        t.find(".m-btn").each(function() {
            $(this).menubutton("destroy");
        });
        t.find(".s-btn").each(function() {
            $(this).splitbutton("destroy");
        });
        t.find(".tooltip-f").each(function() {
            $(this).tooltip("destroy");
        });
        t.children("div").each(function() {
            $(this)._size("unfit");
        });
        t.empty();
    };
    function _32(_33) {
        $(_33).panel("doLayout",true);
    };
    function _34(_35,_36) {
        var _37 = $.data(_35,"panel").options;
        var _38 = $.data(_35,"panel").panel;
        if(_36 != true) {
            if(_37.onBeforeOpen.call(_35) == false) {
                return;
            }
        }
        _38.stop(true,true);
        if($.isFunction(_37.openAnimation)) {
            _37.openAnimation.call(_35,cb);
        } else {
            switch(_37.openAnimation) {
                case "slide":
                    _38.slideDown(_37.openDuration,cb);
                    break;
                case "fade":
                    _38.fadeIn(_37.openDuration,cb);
                    break;
                case "show":
                    _38.show(_37.openDuration,cb);
                    break;
                default:
                    _38.show();
                    cb();
            }
        }
        function cb() {
            _37.closed = false;
            _37.minimized = false;
            var _39 = _38.children(".panel-header").find("a.panel-tool-restore");
            if(_39.length) {
                _37.maximized = true;
            }
            _37.onOpen.call(_35);
            if(_37.maximized == true) {
                _37.maximized = false;
                _3a(_35);
            }
            if(_37.collapsed == true) {
                _37.collapsed = false;
                _3b(_35);
            }
            if(!_37.collapsed) {
                _28(_35);
                _32(_35);
            }
        };
    };
    function _3c(_3d,_3e) {
        var _3f = $.data(_3d,"panel").options;
        var _40 = $.data(_3d,"panel").panel;
        if(_3e != true) {
            if(_3f.onBeforeClose.call(_3d) == false) {
                return;
            }
        }
        _40.stop(true,true);
        _40._size("unfit");
        if($.isFunction(_3f.closeAnimation)) {
            _3f.closeAnimation.call(_3d,cb);
        } else {
            switch(_3f.closeAnimation) {
                case "slide":
                    _40.slideUp(_3f.closeDuration,cb);
                    break;
                case "fade":
                    _40.fadeOut(_3f.closeDuration,cb);
                    break;
                case "hide":
                    _40.hide(_3f.closeDuration,cb);
                    break;
                default:
                    _40.hide();
                    cb();
            }
        }
        function cb() {
            _3f.closed = true;
            _3f.onClose.call(_3d);
        };
    };
    function _41(_42,_43) {
        var _44 = $.data(_42,"panel");
        var _45 = _44.options;
        var _46 = _44.panel;
        if(_43 != true) {
            if(_45.onBeforeDestroy.call(_42) == false) {
                return;
            }
        }
        $(_42).panel("clear").panel("clear","footer");
        _1(_46);
        _45.onDestroy.call(_42);
    };
    function _3b(_47,_48) {
        var _49 = $.data(_47,"panel").options;
        var _4a = $.data(_47,"panel").panel;
        var _4b = _4a.children(".panelx-body");
        var _4c = _4a.children(".panel-header").find("a.panel-tool-collapse");
        if(_49.collapsed == true) {
            return;
        }
        _4b.stop(true,true);
        if(_49.onBeforeCollapse.call(_47) == false) {
            return;
        }
        _4c.addClass("panel-tool-expand");
        if(_48 == true) {
            _4b.slideUp("normal",function() {
                _49.collapsed = true;
                _49.onCollapse.call(_47);
            });
        } else {
            _4b.hide();
            _49.collapsed = true;
            _49.onCollapse.call(_47);
        }
    };
    function _4d(_4e,_4f) {
        var _50 = $.data(_4e,"panel").options;
        var _51 = $.data(_4e,"panel").panel;
        var _52 = _51.children(".panelx-body");
        var _53 = _51.children(".panel-header").find("a.panel-tool-collapse");
        if(_50.collapsed == false) {
            return;
        }
        _52.stop(true,true);
        if(_50.onBeforeExpand.call(_4e) == false) {
            return;
        }
        _53.removeClass("panel-tool-expand");
        if(_4f == true) {
            _52.slideDown("normal",function() {
                _50.collapsed = false;
                _50.onExpand.call(_4e);
                _28(_4e);
                _32(_4e);
            });
        } else {
            _52.show();
            _50.collapsed = false;
            _50.onExpand.call(_4e);
            _28(_4e);
            _32(_4e);
        }
    };
    function _3a(_54) {
        var _55 = $.data(_54,"panel").options;
        var _56 = $.data(_54,"panel").panel;
        var _57 = _56.children(".panel-header").find("a.panel-tool-max");
        if(_55.maximized == true) {
            return;
        }
        _57.addClass("panel-tool-restore");
        if(!$.data(_54,"panel").original) {
            $.data(_54,"panel").original = { width: _55.width,height: _55.height,left: _55.left,top: _55.top,fit: _55.fit };
        }
        _55.left = 0;
        _55.top = 0;
        _55.fit = true;
        _3(_54);
        _55.minimized = false;
        _55.maximized = true;
        _55.onMaximize.call(_54);
    };
    function _58(_59) {
        var _5a = $.data(_59,"panel").options;
        var _5b = $.data(_59,"panel").panel;
        _5b._size("unfit");
        _5b.hide();
        _5a.minimized = true;
        _5a.maximized = false;
        _5a.onMinimize.call(_59);
    };
    function _5c(_5d) {
        var _5e = $.data(_5d,"panel").options;
        var _5f = $.data(_5d,"panel").panel;
        var _60 = _5f.children(".panel-header").find("a.panel-tool-max");
        if(_5e.maximized == false) {
            return;
        }
        _5f.show();
        _60.removeClass("panel-tool-restore");
        $.extend(_5e,$.data(_5d,"panel").original);
        _3(_5d);
        _5e.minimized = false;
        _5e.maximized = false;
        $.data(_5d,"panel").original = null;
        _5e.onRestore.call(_5d);
    };
    function _61(_62,_63) {
        $.data(_62,"panel").options.title = _63;
        $(_62).panel("header").find("div.panel-title").html(_63);
    };
    var _64 = null;
    $(window).unbind(".panelx").bind("resize.panel",function() {
        if(_64) {
            clearTimeout(_64);
        }
        _64 = setTimeout(function() {
            var _65 = $("body.layout");
            if(_65.length) {
                _65.layout("resize");
                $("body").children(".easyui-fluid:visible").each(function() {
                    $(this).triggerHandler("_resize");
                });
            } else {
                $("body").panel("doLayout");
            }
            _64 = null;
        },100);
    });
    $.fn.panel = function(_66,_67) {
        if(typeof _66 == "string") {
            return $.fn.panel.methods[_66](this,_67);
        }
        _66 = _66 || {};
        return this.each(function() {
            var _68 = $.data(this,"panel");
            var _69;
            if(_68) {
                _69 = $.extend(_68.options,_66);
                _68.isLoaded = false;
            } else {
                _69 = $.extend({},$.fn.panel.defaults,$.fn.panel.parseOptions(this),_66);
                $(this).attr("title","");
                _68 = $.data(this,"panel",{ options: _69,panel: _14(this),isLoaded: false });
            }
            _18(this);
            if(_69.doSize == true) {
                _68.panel.css("display","block");
                _3(this);
            }
            if(_69.closed == true || _69.minimized == true) {
                _68.panel.hide();
            } else {
                _34(this);
            }
        });
    };
    $.fn.panel.methods = {
        options: function(jq) {
            return $.data(jq[0],"panel").options;
        },panel: function(jq) {
            return $.data(jq[0],"panel").panel;
        },header: function(jq) {
            return $.data(jq[0],"panel").panel.children(".panel-header");
        },footer: function(jq) {
            return jq.panel("panel").children(".panel-footer");
        },body: function(jq) {
            return $.data(jq[0],"panel").panel.children(".panelx-body");
        },setTitle: function(jq,_6a) {
            return jq.each(function() {
                _61(this,_6a);
            });
        },open: function(jq,_6b) {
            return jq.each(function() {
                _34(this,_6b);
            });
        },close: function(jq,_6c) {
            return jq.each(function() {
                _3c(this,_6c);
            });
        },destroy: function(jq,_6d) {
            return jq.each(function() {
                _41(this,_6d);
            });
        },clear: function(jq,_6e) {
            return jq.each(function() {
                _30(_6e == "footer" ? $(this).panel("footer") : this);
            });
        },refresh: function(jq,_6f) {
            return jq.each(function() {
                var _70 = $.data(this,"panel");
                _70.isLoaded = false;
                if(_6f) {
                    if(typeof _6f == "string") {
                        _70.options.href = _6f;
                    } else {
                        _70.options.queryParams = _6f;
                    }
                }
                _28(this);
            });
        },resize: function(jq,_71) {
            return jq.each(function() {
                _3(this,_71);
            });
        },doLayout: function(jq,all) {
            return jq.each(function() {
                _72(this,"body");
                _72($(this).siblings(".panel-footer")[0],"footer");
                function _72(_73,_74) {
                    if(!_73) {
                        return;
                    }
                    var _75 = _73 == $("body")[0];
                    var s = $(_73).find("div.panelx:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible,.easyui-fluid:visible").filter(function(_76,el) {
                        var p = $(el).parents(".panelx-" + _74 + ":first");
                        return _75 ? p.length == 0 : p[0] == _73;
                    });
                    s.each(function() {
                        $(this).triggerHandler("_resize",[all || false]);
                    });
                };
            });
        },move: function(jq,_77) {
            return jq.each(function() {
                _f(this,_77);
            });
        },maximize: function(jq) {
            return jq.each(function() {
                _3a(this);
            });
        },minimize: function(jq) {
            return jq.each(function() {
                _58(this);
            });
        },restore: function(jq) {
            return jq.each(function() {
                _5c(this);
            });
        },collapse: function(jq,_78) {
            return jq.each(function() {
                _3b(this,_78);
            });
        },expand: function(jq,_79) {
            return jq.each(function() {
                _4d(this,_79);
            });
        }
    };
    $.fn.panel.parseOptions = function(_7a) {
        var t = $(_7a);
        var hh = t.children(".panel-header,header");
        var ff = t.children(".panel-footer,footer");
        return $.extend({},$.parser.parseOptions(_7a,["id","width","height","left","top","title","iconCls","cls","headerCls","bodyCls","tools","href","method","header","footer",{ cache: "boolean",fit: "boolean",border: "boolean",noheader: "boolean" },{ collapsible: "boolean",minimizable: "boolean",maximizable: "boolean" },{ closable: "boolean",collapsed: "boolean",minimized: "boolean",maximized: "boolean",closed: "boolean" },"openAnimation","closeAnimation",{ openDuration: "number",closeDuration: "number" },]),{ loadingMessage: (t.attr("loadingMessage") != undefined ? t.attr("loadingMessage") : undefined),header: (hh.length ? hh.removeClass("panel-header") : undefined),footer: (ff.length ? ff.removeClass("panel-footer") : undefined) });
    };
    $.fn.panel.defaults = {
        id: null,title: null,iconCls: null,width: "auto",height: "auto",left: null,top: null,cls: null,headerCls: null,bodyCls: null,style: {},href: null,cache: true,fit: false,border: true,doSize: true,noheader: false,content: null,collapsible: false,minimizable: false,maximizable: false,closable: false,collapsed: false,minimized: false,maximized: false,closed: false,openAnimation: false,openDuration: 400,closeAnimation: false,closeDuration: 400,tools: null,footer: null,header: null,queryParams: {},method: "get",href: null,loadingMessage: "Loading...",loader: function(_7b,_7c,_7d) {
            var _7e = $(this).panel("options");
            if(!_7e.href) {
                return false;
            }
            $.ajax({
                type: _7e.method,url: _7e.href,cache: false,data: _7b,dataType: "html",success: function(_7f) {
                    _7c(_7f);
                },error: function() {
                    _7d.apply(this,arguments);
                }
            });
        },extractor: function(_80) {
            var _81 = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
            var _82 = _81.exec(_80);
            if(_82) {
                return _82[1];
            } else {
                return _80;
            }
        },onBeforeLoad: function(_83) {
        },onLoad: function() {
        },onLoadError: function() {
        },onBeforeOpen: function() {
        },onOpen: function() {
        },onBeforeClose: function() {
        },onClose: function() {
        },onBeforeDestroy: function() {
        },onDestroy: function() {
        },onResize: function(_84,_85) {
        },onMove: function(_86,top) {
        },onMaximize: function() {
        },onRestore: function() {
        },onMinimize: function() {
        },onBeforeCollapse: function() {
        },onBeforeExpand: function() {
        },onCollapse: function() {
        },onExpand: function() {
        }
    };
})(jQuery);

/****************************jquery.accordion****************************/
(function($) {

    function setSize(container,param) {
        var state = $.data(container,'accordion');
        var opts = state.options;
        var panels = state.panels;
        var cc = $(container);

        if(param) {
            $.extend(opts,{
                width: param.width,
                height: param.height
            });
        }
        cc._size(opts);
        var headerHeight = 0;
        var bodyHeight = 'auto';
        var headers = cc.find('>.panel>.accordion-header');
        if(headers.length) {
            headerHeight = $(headers[0]).css('height','')._outerHeight();
        }
        if(!isNaN(parseInt(opts.height))) {
            bodyHeight = cc.height() - headerHeight * headers.length;
        }

        _resize(true,bodyHeight - _resize(false) + 1);

        function _resize(collapsible,height) {
            var totalHeight = 0;
            for(var i = 0;i < panels.length;i++) {
                var p = panels[i];
                var h = p.panel('header')._outerHeight(headerHeight);
                if(p.panel('options').collapsible == collapsible) {
                    var pheight = isNaN(height) ? undefined : (height + headerHeight * h.length);
                    p.panel('resize',{
                        width: cc.width(),
                        height: (collapsible ? pheight : undefined)
                    });
                    totalHeight += p.panel('panel').outerHeight() - headerHeight * h.length;
                }
            }
            return totalHeight;
        }
    }

    /**
	 * find a panel by specified property, return the panel object or panel index.
	 */
    function findBy(container,property,value,all) {
        var panels = $.data(container,'accordion').panels;
        var pp = [];
        for(var i = 0;i < panels.length;i++) {
            var p = panels[i];
            if(property) {
                if(p.panel('options')[property] == value) {
                    pp.push(p);
                }
            } else {
                if(p[0] == $(value)[0]) {
                    return i;
                }
            }
        }
        if(property) {
            return all ? pp : (pp.length ? pp[0] : null);
        } else {
            return -1;
        }
    }

    function getSelections(container) {
        return findBy(container,'collapsed',false,true);
    }

    function getSelected(container) {
        var pp = getSelections(container);
        return pp.length ? pp[0] : null;
    }

    /**
	 * get panel index, start with 0
	 */
    function getPanelIndex(container,panel) {
        return findBy(container,null,panel);
    }

    /**
	 * get the specified panel.
	 */
    function getPanel(container,which) {
        var panels = $.data(container,'accordion').panels;
        if(typeof which == 'number') {
            if(which < 0 || which >= panels.length) {
                return null;
            } else {
                return panels[which];
            }
        }
        return findBy(container,'title',which);
    }

    function setProperties(container) {
        var opts = $.data(container,'accordion').options;
        var cc = $(container);
        if(opts.border) {
            cc.removeClass('accordion-noborder');
        } else {
            cc.addClass('accordion-noborder');
        }
    }

    function init(container) {
        var state = $.data(container,'accordion');
        var cc = $(container);
        cc.addClass('accordion');

        state.panels = [];
        cc.children('div').each(function() {
            var opts = $.extend({},$.parser.parseOptions(this),{
                selected: ($(this).attr('selected') ? true : undefined)
            });
            var pp = $(this);
            state.panels.push(pp);
            createPanel(container,pp,opts);
        });

        cc.bind('_resize',function(e,force) {
            if($(this).hasClass('easyui-fluid') || force) {
                setSize(container);
            }
            return false;
        });
    }

    function createPanel(container,pp,options) {
        var opts = $.data(container,'accordion').options;
        pp.panel($.extend({},{
            collapsible: true,
            minimizable: false,
            maximizable: false,
            closable: false,
            doSize: false,
            collapsed: true,
            headerCls: 'accordion-header',
            bodyCls: 'accordion-body'
        },options,{
            onBeforeExpand: function() {
                if(options.onBeforeExpand) {
                    if(options.onBeforeExpand.call(this) == false) { return false }
                }
                if(!opts.multiple) {
                    // get all selected panel
                    var all = $.grep(getSelections(container),function(p) {
                        return p.panel('options').collapsible;
                    });
                    for(var i = 0;i < all.length;i++) {
                        unselect(container,getPanelIndex(container,all[i]));
                    }
                }
                var header = $(this).panel('header');
                header.addClass('accordion-header-selected');
                header.find('.accordion-collapse').removeClass('accordion-expand');
            },
            onExpand: function() {
                if(options.onExpand) { options.onExpand.call(this) }
                opts.onSelect.call(container,$(this).panel('options').title,getPanelIndex(container,this));
            },
            onBeforeCollapse: function() {
                if(options.onBeforeCollapse) {
                    if(options.onBeforeCollapse.call(this) == false) { return false }
                }
                var header = $(this).panel('header');
                header.removeClass('accordion-header-selected');
                header.find('.accordion-collapse').addClass('accordion-expand');
            },
            onCollapse: function() {
                if(options.onCollapse) { options.onCollapse.call(this) }
                opts.onUnselect.call(container,$(this).panel('options').title,getPanelIndex(container,this));
            }
        }));

        var header = pp.panel('header');
        var tool = header.children('div.panel-tool');
        tool.children('a.panel-tool-collapse').hide();	// hide the old collapse button
        var t = $('<a href="javascript:void(0)"></a>').addClass('accordion-collapse accordion-expand').appendTo(tool);
        t.bind('click',function() {
            togglePanel(pp);
            return false;
        });
        pp.panel('options').collapsible ? t.show() : t.hide();

        header.click(function() {
            togglePanel(pp);
            return false;
        });

        function togglePanel(p) {
            var popts = p.panel('options');
            if(popts.collapsible) {
                var index = getPanelIndex(container,p);
                if(popts.collapsed) {
                    select(container,index);
                } else {
                    unselect(container,index);
                }
            }
        }
    }

    /**
	 * select and set the specified panel active
	 */
    function select(container,which) {
        var p = getPanel(container,which);
        if(!p) { return }
        stopAnimate(container);
        var opts = $.data(container,'accordion').options;
        p.panel('expand',opts.animate);
    }

    function unselect(container,which) {
        var p = getPanel(container,which);
        if(!p) { return }
        stopAnimate(container);
        var opts = $.data(container,'accordion').options;
        p.panel('collapse',opts.animate);
    }

    function doFirstSelect(container) {
        var opts = $.data(container,'accordion').options;
        var p = findBy(container,'selected',true);
        if(p) {
            _select(getPanelIndex(container,p));
        } else {
            _select(opts.selected);
        }

        function _select(index) {
            var animate = opts.animate;
            opts.animate = false;
            select(container,index);
            opts.animate = animate;
        }
    }

    /**
	 * stop the animation of all panels
	 */
    function stopAnimate(container) {
        var panels = $.data(container,'accordion').panels;
        for(var i = 0;i < panels.length;i++) {
            panels[i].stop(true,true);
        }
    }

    function add(container,options) {
        var state = $.data(container,'accordion');
        var opts = state.options;
        var panels = state.panels;
        if(options.selected == undefined) options.selected = true;

        stopAnimate(container);

        var pp = $('<div></div>').appendTo(container);
        panels.push(pp);
        createPanel(container,pp,options);
        setSize(container);

        opts.onAdd.call(container,options.title,panels.length - 1);

        if(options.selected) {
            select(container,panels.length - 1);
        }
    }

    function remove(container,which) {
        var state = $.data(container,'accordion');
        var opts = state.options;
        var panels = state.panels;

        stopAnimate(container);

        var panel = getPanel(container,which);
        var title = panel.panel('options').title;
        var index = getPanelIndex(container,panel);

        if(!panel) { return }
        if(opts.onBeforeRemove.call(container,title,index) == false) { return }

        panels.splice(index,1);
        panel.panel('destroy');
        if(panels.length) {
            setSize(container);
            var curr = getSelected(container);
            if(!curr) {
                select(container,0);
            }
        }

        opts.onRemove.call(container,title,index);
    }

    $.fn.accordion = function(options,param) {
        if(typeof options == 'string') {
            return $.fn.accordion.methods[options](this,param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this,'accordion');
            if(state) {
                $.extend(state.options,options);
            } else {
                $.data(this,'accordion',{
                    options: $.extend({},$.fn.accordion.defaults,$.fn.accordion.parseOptions(this),options),
                    accordion: $(this).addClass('accordion'),
                    panels: []
                });
                init(this);
            }

            setProperties(this);
            setSize(this);
            doFirstSelect(this);
        });
    };

    $.fn.accordion.methods = {
        options: function(jq) {
            return $.data(jq[0],'accordion').options;
        },
        panels: function(jq) {
            return $.data(jq[0],'accordion').panels;
        },
        resize: function(jq,param) {
            return jq.each(function() {
                setSize(this,param);
            });
        },
        getSelections: function(jq) {
            return getSelections(jq[0]);
        },
        getSelected: function(jq) {
            return getSelected(jq[0]);
        },
        getPanel: function(jq,which) {
            return getPanel(jq[0],which);
        },
        getPanelIndex: function(jq,panel) {
            return getPanelIndex(jq[0],panel);
        },
        select: function(jq,which) {
            return jq.each(function() {
                select(this,which);
            });
        },
        unselect: function(jq,which) {
            return jq.each(function() {
                unselect(this,which);
            });
        },
        add: function(jq,options) {
            return jq.each(function() {
                add(this,options);
            });
        },
        remove: function(jq,which) {
            return jq.each(function() {
                remove(this,which);
            });
        }
    };

    $.fn.accordion.parseOptions = function(target) {
        var t = $(target);
        return $.extend({},$.parser.parseOptions(target,[
			'width','height',
			{ fit: 'boolean',border: 'boolean',animate: 'boolean',multiple: 'boolean',selected: 'number' }
        ]));
    };

    $.fn.accordion.defaults = {
        width: 'auto',
        height: 'auto',
        fit: false,
        border: true,
        animate: true,
        multiple: false,
        selected: 0,

        onSelect: function(title,index) { },
        onUnselect: function(title,index) { },
        onAdd: function(title,index) { },
        onBeforeRemove: function(title,index) { },
        onRemove: function(title,index) { }
    };
})(jQuery);

/****************************jquery.tabs****************************/
(function($) {
    function getContentWidth(c) {
        var w = 0;
        $(c).children().each(function() {
            w += $(this).outerWidth(true);
        });
        return w;
    }
    /**
	 * set the tabs scrollers to show or not,
	 * dependent on the tabs count and width
	 */
    function setScrollers(container) {
        var opts = $.data(container,'tabs').options;
        if(opts.tabPosition == 'left' || opts.tabPosition == 'right' || !opts.showHeader) { return }

        var header = $(container).children('div.tabs-header');
        var tool = header.children('div.tabs-tool:not(.tabs-tool-hidden)');
        var sLeft = header.children('div.tabs-scroller-left');
        var sRight = header.children('div.tabs-scroller-right');
        var wrap = header.children('div.tabs-wrap');

        // set the tool height
        var tHeight = header.outerHeight();
        if(opts.plain) {
            tHeight -= tHeight - header.height();
        }
        tool._outerHeight(tHeight);

        var tabsWidth = getContentWidth(header.find('ul.tabs'));
        var cWidth = header.width() - tool._outerWidth();

        if(tabsWidth > cWidth) {
            sLeft.add(sRight).show()._outerHeight(tHeight);
            if(opts.toolPosition == 'left') {
                tool.css({
                    left: sLeft.outerWidth(),
                    right: ''
                });
                wrap.css({
                    marginLeft: sLeft.outerWidth() + tool._outerWidth(),
                    marginRight: sRight._outerWidth(),
                    width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
                });
            } else {
                tool.css({
                    left: '',
                    right: sRight.outerWidth()
                });
                wrap.css({
                    marginLeft: sLeft.outerWidth(),
                    marginRight: sRight.outerWidth() + tool._outerWidth(),
                    width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
                });
            }
        } else {
            sLeft.add(sRight).hide();
            if(opts.toolPosition == 'left') {
                tool.css({
                    left: 0,
                    right: ''
                });
                wrap.css({
                    marginLeft: tool._outerWidth(),
                    marginRight: 0,
                    width: cWidth
                });
            } else {
                tool.css({
                    left: '',
                    right: 0
                });
                wrap.css({
                    marginLeft: 0,
                    marginRight: tool._outerWidth(),
                    width: cWidth
                });
            }
        }
    }

    function addTools(container) {
        var opts = $.data(container,'tabs').options;
        var header = $(container).children('div.tabs-header');
        if(opts.tools) {
            if(typeof opts.tools == 'string') {
                $(opts.tools).addClass('tabs-tool').appendTo(header);
                $(opts.tools).show();
            } else {
                header.children('div.tabs-tool').remove();
                var tools = $('<div class="tabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(header);
                var tr = tools.find('tr');
                for(var i = 0;i < opts.tools.length;i++) {
                    var td = $('<td></td>').appendTo(tr);
                    var tool = $('<a href="javascript:void(0);"></a>').appendTo(td);
                    tool[0].onclick = eval(opts.tools[i].handler || function() { });
                    tool.linkbutton($.extend({},opts.tools[i],{
                        plain: true
                    }));
                }
            }
        } else {
            header.children('div.tabs-tool').remove();
        }
    }

    function setSize(container,param) {
        var state = $.data(container,'tabs');
        var opts = state.options;
        var cc = $(container);

        if(!opts.doSize) { return }
        if(param) {
            $.extend(opts,{
                width: param.width,
                height: param.height
            });
        }
        cc._size(opts);

        var header = cc.children('div.tabs-header');
        var panels = cc.children('div.tabs-panels');
        var wrap = header.find('div.tabs-wrap');
        var ul = wrap.find('.tabs');
        ul.children('li').removeClass('tabs-first tabs-last');
        ul.children('li:first').addClass('tabs-first');
        ul.children('li:last').addClass('tabs-last');

        if(opts.tabPosition == 'left' || opts.tabPosition == 'right') {
            header._outerWidth(opts.showHeader ? opts.headerWidth : 0);
            panels._outerWidth(cc.width() - header.outerWidth());
            header.add(panels)._size('height',isNaN(parseInt(opts.height)) ? '' : cc.height());
            wrap._outerWidth(header.width());
            ul._outerWidth(wrap.width()).css('height','');
        } else {
            header.children('div.tabs-scroller-left,div.tabs-scroller-right,div.tabs-tool:not(.tabs-tool-hidden)').css('display',opts.showHeader ? 'block' : 'none');
            header._outerWidth(cc.width()).css('height','');
            if(opts.showHeader) {
                header.css('background-color','');
                wrap.css('height','');
            } else {
                header.css('background-color','transparent');
                header._outerHeight(0);
                wrap._outerHeight(0);
            }
            ul._outerHeight(opts.tabHeight).css('width','');
            ul._outerHeight(ul.outerHeight() - ul.height() - 1 + opts.tabHeight).css('width','');

            panels._size('height',isNaN(parseInt(opts.height)) ? '' : (cc.height() - header.outerHeight()));
            panels._size('width',cc.width());
        }

        if(state.tabs.length) {
            var d1 = ul.outerWidth(true) - ul.width();
            var li = ul.children('li:first');
            var d2 = li.outerWidth(true) - li.width();
            var hwidth = header.width() - header.children('.tabs-tool:not(.tabs-tool-hidden)')._outerWidth();
            var justifiedWidth = Math.floor((hwidth - d1 - d2 * state.tabs.length) / state.tabs.length);

            $.map(state.tabs,function(p) {
                setTabSize(p,(opts.justified && $.inArray(opts.tabPosition,['top','bottom']) >= 0) ? justifiedWidth : undefined);
            });
            if(opts.justified && $.inArray(opts.tabPosition,['top','bottom']) >= 0) {
                var deltaWidth = hwidth - d1 - getContentWidth(ul);
                setTabSize(state.tabs[state.tabs.length - 1],justifiedWidth + deltaWidth);
            }
        }
        setScrollers(container);

        function setTabSize(p,width) {
            var p_opts = p.panel('options');
            var p_t = p_opts.tab.find('a.tabs-inner');
            var width = width ? width : (parseInt(p_opts.tabWidth || opts.tabWidth || undefined));
            if(width) {
                p_t._outerWidth(width);
            } else {
                p_t.css('width','');
            }
            p_t._outerHeight(opts.tabHeight);
            p_t.css('lineHeight',p_t.height() + 'px');
            p_t.find('.easyui-fluid:visible').triggerHandler('_resize');
        }
    }

    /**
	 * set selected tab panel size
	 */
    function setSelectedSize(container) {
        var opts = $.data(container,'tabs').options;
        var tab = getSelectedTab(container);
        if(tab) {
            var panels = $(container).children('div.tabs-panels');
            var width = opts.width == 'auto' ? 'auto' : panels.width();
            var height = opts.height == 'auto' ? 'auto' : panels.height();
            tab.panel('resize',{
                width: width,
                height: height
            });
        }
    }

    /**
	 * wrap the tabs header and body
	 */
    function wrapTabs(container) {
        var tabs = $.data(container,'tabs').tabs;
        var cc = $(container).addClass('tabs-container');
        var panels = $('<div class="tabs-panels"></div>').insertBefore(cc);
        cc.children('div').each(function() {
            panels[0].appendChild(this);
        });
        cc[0].appendChild(panels[0]);
        $('<div class="tabs-header">'
				+ '<div class="tabs-scroller-left"></div>'
				+ '<div class="tabs-scroller-right"></div>'
				+ '<div class="tabs-wrap">'
				+ '<ul class="tabs"></ul>'
				+ '</div>'
				+ '</div>').prependTo(container);

        cc.children('div.tabs-panels').children('div').each(function(i) {
            var opts = $.extend({},$.parser.parseOptions(this),{
                disabled: ($(this).attr('disabled') ? true : undefined),
                selected: ($(this).attr('selected') ? true : undefined)
            });
            createTab(container,opts,$(this));
        });

        cc.children('div.tabs-header').find('.tabs-scroller-left, .tabs-scroller-right').hover(
				function() { $(this).addClass('tabs-scroller-over'); },
				function() { $(this).removeClass('tabs-scroller-over'); }
		);
        cc.bind('_resize',function(e,force) {
            if($(this).hasClass('easyui-fluid') || force) {
                setSize(container);
                setSelectedSize(container);
            }
            return false;
        });
    }

    function bindEvents(container) {
        var state = $.data(container,'tabs')
        var opts = state.options;
        $(container).children('div.tabs-header').unbind().bind('click',function(e) {
            if($(e.target).hasClass('tabs-scroller-left')) {
                $(container).tabs('scrollBy',-opts.scrollIncrement);
            } else if($(e.target).hasClass('tabs-scroller-right')) {
                $(container).tabs('scrollBy',opts.scrollIncrement);
            } else {
                var li = $(e.target).closest('li');
                if(li.hasClass('tabs-disabled')) { return false; }
                var a = $(e.target).closest('a.tabs-close');
                if(a.length) {
                    closeTab(container,getLiIndex(li));
                } else if(li.length) {
                    //					selectTab(container, getLiIndex(li));
                    var index = getLiIndex(li);
                    var popts = state.tabs[index].panel('options');
                    if(popts.collapsible) {
                        popts.closed ? selectTab(container,index) : unselectTab(container,index);
                    } else {
                        selectTab(container,index);
                    }
                }
                return false;
            }
        }).bind('contextmenu',function(e) {
            var li = $(e.target).closest('li');
            if(li.hasClass('tabs-disabled')) { return; }
            if(li.length) {
                opts.onContextMenu.call(container,e,li.find('span.tabs-title').html(),getLiIndex(li));
            }
        });

        function getLiIndex(li) {
            var index = 0;
            li.parent().children('li').each(function(i) {
                if(li[0] == this) {
                    index = i;
                    return false;
                }
            });
            return index;
        }
    }

    function setProperties(container) {
        var opts = $.data(container,'tabs').options;
        var header = $(container).children('div.tabs-header');
        var panels = $(container).children('div.tabs-panels');

        header.removeClass('tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right');
        panels.removeClass('tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right');
        if(opts.tabPosition == 'top') {
            header.insertBefore(panels);
        } else if(opts.tabPosition == 'bottom') {
            header.insertAfter(panels);
            header.addClass('tabs-header-bottom');
            panels.addClass('tabs-panels-top');
        } else if(opts.tabPosition == 'left') {
            header.addClass('tabs-header-left');
            panels.addClass('tabs-panels-right');
        } else if(opts.tabPosition == 'right') {
            header.addClass('tabs-header-right');
            panels.addClass('tabs-panels-left');
        }

        if(opts.plain == true) {
            header.addClass('tabs-header-plain');
        } else {
            header.removeClass('tabs-header-plain');
        }
        header.removeClass('tabs-header-narrow').addClass(opts.narrow ? 'tabs-header-narrow' : '');
        var tabs = header.find('.tabs');
        tabs.removeClass('tabs-pill').addClass(opts.pill ? 'tabs-pill' : '');
        tabs.removeClass('tabs-narrow').addClass(opts.narrow ? 'tabs-narrow' : '');
        tabs.removeClass('tabs-justified').addClass(opts.justified ? 'tabs-justified' : '');
        if(opts.border == true) {
            header.removeClass('tabs-header-noborder');
            panels.removeClass('tabs-panels-noborder');
        } else {
            header.addClass('tabs-header-noborder');
            panels.addClass('tabs-panels-noborder');
        }
        opts.doSize = true;
    }

    function createTab(container,options,pp) {
        options = options || {};
        var state = $.data(container,'tabs');
        var tabs = state.tabs;
        if(options.index == undefined || options.index > tabs.length) { options.index = tabs.length }
        if(options.index < 0) { options.index = 0 }

        var ul = $(container).children('div.tabs-header').find('ul.tabs');
        var panels = $(container).children('div.tabs-panels');
        var tab = $(
				'<li>' +
				'<a href="javascript:void(0)" class="tabs-inner">' +
				'<span class="tabs-title"></span>' +
				'<span class="tabs-icon"></span>' +
				'</a>' +
				'</li>');
        if(!pp) { pp = $('<div></div>'); }
        if(options.index >= tabs.length) {
            tab.appendTo(ul);
            pp.appendTo(panels);
            tabs.push(pp);
        } else {
            tab.insertBefore(ul.children('li:eq(' + options.index + ')'));
            pp.insertBefore(panels.children('div.panel:eq(' + options.index + ')'));
            tabs.splice(options.index,0,pp);
        }

        // create panel
        pp.panel($.extend({},options,{
            tab: tab,
            border: false,
            noheader: true,
            closed: true,
            doSize: false,
            iconCls: (options.icon ? options.icon : undefined),
            onLoad: function() {
                if(options.onLoad) {
                    options.onLoad.call(this,arguments);
                }
                state.options.onLoad.call(container,$(this));
            },
            onBeforeOpen: function() {
                if(options.onBeforeOpen) {
                    if(options.onBeforeOpen.call(this) == false) { return false; }
                }
                var p = $(container).tabs('getSelected');
                if(p) {
                    if(p[0] != this) {
                        $(container).tabs('unselect',getTabIndex(container,p));
                        p = $(container).tabs('getSelected');
                        if(p) {
                            return false;
                        }
                    } else {
                        setSelectedSize(container);
                        return false;
                    }
                }

                var popts = $(this).panel('options');
                popts.tab.addClass('tabs-selected');
                // scroll the tab to center position if required.
                var wrap = $(container).find('>div.tabs-header>div.tabs-wrap');
                var left = popts.tab.position().left;
                var right = left + popts.tab.outerWidth();
                if(left < 0 || right > wrap.width()) {
                    var deltaX = left - (wrap.width() - popts.tab.width()) / 2;
                    $(container).tabs('scrollBy',deltaX);
                } else {
                    $(container).tabs('scrollBy',0);
                }

                var panel = $(this).panel('panel');
                panel.css('display','block');
                setSelectedSize(container);
                panel.css('display','none');
            },
            onOpen: function() {
                if(options.onOpen) {
                    options.onOpen.call(this);
                }
                var popts = $(this).panel('options');
                state.selectHis.push(popts.title);
                state.options.onSelect.call(container,popts.title,getTabIndex(container,this));
            },
            onBeforeClose: function() {
                if(options.onBeforeClose) {
                    if(options.onBeforeClose.call(this) == false) { return false; }
                }
                $(this).panel('options').tab.removeClass('tabs-selected');
            },
            onClose: function() {
                if(options.onClose) {
                    options.onClose.call(this);
                }
                var popts = $(this).panel('options');
                state.options.onUnselect.call(container,popts.title,getTabIndex(container,this));
            }
        }));

        // only update the tab header
        $(container).tabs('update',{
            tab: pp,
            options: pp.panel('options'),
            type: 'header'
        });
    }

    function addTab(container,options) {
        var state = $.data(container,'tabs');
        var opts = state.options;
        if(options.selected == undefined) options.selected = true;

        createTab(container,options);
        opts.onAdd.call(container,options.title,options.index);
        if(options.selected) {
            selectTab(container,options.index);	// select the added tab panel
        }
    }

    /**
	 * update tab panel, param has following properties:
	 * tab: the tab panel to be updated
	 * options: the tab panel options
	 * type: the update type, possible values are: 'header','body','all'
	 */
    function updateTab(container,param) {
        param.type = param.type || 'all';
        var selectHis = $.data(container,'tabs').selectHis;
        var pp = param.tab;	// the tab panel
        var opts = pp.panel('options');	// get the tab panel options
        var oldTitle = opts.title;
        $.extend(opts,param.options,{
            iconCls: (param.options.icon ? param.options.icon : undefined)
        });

        if(param.type == 'all' || param.type == 'body') {
            pp.panel();
        }
        if(param.type == 'all' || param.type == 'header') {
            var tab = opts.tab;

            if(opts.header) {
                tab.find('.tabs-inner').html($(opts.header));
            } else {
                var s_title = tab.find('span.tabs-title');
                var s_icon = tab.find('span.tabs-icon');
                s_title.html(opts.title);
                s_icon.attr('class','tabs-icon');

                tab.find('a.tabs-close').remove();
                if(opts.closable) {
                    s_title.addClass('tabs-closable');
                    $('<a href="javascript:void(0)" class="tabs-close"></a>').appendTo(tab);
                } else {
                    s_title.removeClass('tabs-closable');
                }
                if(opts.iconCls) {
                    s_title.addClass('tabs-with-icon');
                    s_icon.addClass(opts.iconCls);
                } else {
                    s_title.removeClass('tabs-with-icon');
                }
                if(opts.tools) {
                    var p_tool = tab.find('span.tabs-p-tool');
                    if(!p_tool.length) {
                        var p_tool = $('<span class="tabs-p-tool"></span>').insertAfter(tab.find('a.tabs-inner'));
                    }
                    if($.isArray(opts.tools)) {
                        p_tool.empty();
                        for(var i = 0;i < opts.tools.length;i++) {
                            var t = $('<a href="javascript:void(0)"></a>').appendTo(p_tool);
                            t.addClass(opts.tools[i].iconCls);
                            if(opts.tools[i].handler) {
                                t.bind('click',{ handler: opts.tools[i].handler },function(e) {
                                    if($(this).parents('li').hasClass('tabs-disabled')) { return; }
                                    e.data.handler.call(this);
                                });
                            }
                        }
                    } else {
                        $(opts.tools).children().appendTo(p_tool);
                    }
                    var pr = p_tool.children().length * 12;
                    if(opts.closable) {
                        pr += 8;
                    } else {
                        pr -= 3;
                        p_tool.css('right','5px');
                    }
                    s_title.css('padding-right',pr + 'px');
                } else {
                    tab.find('span.tabs-p-tool').remove();
                    s_title.css('padding-right','');
                }
            }
            if(oldTitle != opts.title) {
                for(var i = 0;i < selectHis.length;i++) {
                    if(selectHis[i] == oldTitle) {
                        selectHis[i] = opts.title;
                    }
                }
            }
        }
        if(opts.disabled) {
            opts.tab.addClass('tabs-disabled');
        } else {
            opts.tab.removeClass('tabs-disabled');
        }

        setSize(container);

        $.data(container,'tabs').options.onUpdate.call(container,opts.title,getTabIndex(container,pp));
    }

    /**
	 * close a tab with specified index or title
	 */
    function closeTab(container,which) {
        var opts = $.data(container,'tabs').options;
        var tabs = $.data(container,'tabs').tabs;
        var selectHis = $.data(container,'tabs').selectHis;

        if(!exists(container,which)) return;

        var tab = getTab(container,which);
        var title = tab.panel('options').title;
        var index = getTabIndex(container,tab);

        if(opts.onBeforeClose.call(container,title,index) == false) return;

        var tab = getTab(container,which,true);
        tab.panel('options').tab.remove();
        tab.panel('destroy');

        opts.onClose.call(container,title,index);

        //		setScrollers(container);
        setSize(container);

        // remove the select history item
        for(var i = 0;i < selectHis.length;i++) {
            if(selectHis[i] == title) {
                selectHis.splice(i,1);
                i--;
            }
        }

        // select the nearest tab panel
        var hisTitle = selectHis.pop();
        if(hisTitle) {
            selectTab(container,hisTitle);
        } else if(tabs.length) {
            selectTab(container,0);
        }
    }

    /**
	 * get the specified tab panel
	 */
    function getTab(container,which,removeit) {
        var tabs = $.data(container,'tabs').tabs;
        if(typeof which == 'number') {
            if(which < 0 || which >= tabs.length) {
                return null;
            } else {
                var tab = tabs[which];
                if(removeit) {
                    tabs.splice(which,1);
                }
                return tab;
            }
        }
        for(var i = 0;i < tabs.length;i++) {
            var tab = tabs[i];
            if(tab.panel('options').title == which) {
                if(removeit) {
                    tabs.splice(i,1);
                }
                return tab;
            }
        }
        return null;
    }

    function getTabIndex(container,tab) {
        var tabs = $.data(container,'tabs').tabs;
        for(var i = 0;i < tabs.length;i++) {
            if(tabs[i][0] == $(tab)[0]) {
                return i;
            }
        }
        return -1;
    }

    function getSelectedTab(container) {
        var tabs = $.data(container,'tabs').tabs;
        for(var i = 0;i < tabs.length;i++) {
            var tab = tabs[i];
            if(tab.panel('options').tab.hasClass('tabs-selected')) {
                return tab;
            }
        }
        return null;
    }

    /**
	 * do first select action, if no tab is setted the first tab will be selected.
	 */
    function doFirstSelect(container) {
        var state = $.data(container,'tabs')
        var tabs = state.tabs;
        for(var i = 0;i < tabs.length;i++) {
            var opts = tabs[i].panel('options');
            if(opts.selected && !opts.disabled) {
                selectTab(container,i);
                return;
            }
        }
        selectTab(container,state.options.selected);
    }

    function selectTab(container,which) {
        var p = getTab(container,which);
        if(p && !p.is(':visible')) {
            stopAnimate(container);
            if(!p.panel('options').disabled)
                p.panel('open');
        }
    }

    function unselectTab(container,which) {
        var p = getTab(container,which);
        if(p && p.is(':visible')) {
            stopAnimate(container);
            p.panel('close');
        }
    }

    function stopAnimate(container) {
        $(container).children('div.tabs-panels').each(function() {
            $(this).stop(true,true);
        });
    }

    function exists(container,which) {
        return getTab(container,which) != null;
    }

    function showHeader(container,visible) {
        var opts = $.data(container,'tabs').options;
        opts.showHeader = visible;
        $(container).tabs('resize');
    }

    function showTool(container,visible) {
        var tool = $(container).find('>.tabs-header>.tabs-tool');
        if(visible) {
            tool.removeClass('tabs-tool-hidden').show();
        } else {
            tool.addClass('tabs-tool-hidden').hide();
        }
        $(container).tabs('resize').tabs('scrollBy',0);
    }


    $.fn.tabs = function(options,param) {
        if(typeof options == 'string') {
            return $.fn.tabs.methods[options](this,param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this,'tabs');
            if(state) {
                $.extend(state.options,options);
            } else {
                $.data(this,'tabs',{
                    options: $.extend({},$.fn.tabs.defaults,$.fn.tabs.parseOptions(this),options),
                    tabs: [],
                    selectHis: []
                });
                wrapTabs(this);
            }

            addTools(this);
            setProperties(this);
            setSize(this);
            bindEvents(this);

            doFirstSelect(this);
        });
    };

    $.fn.tabs.methods = {
        options: function(jq) {
            var cc = jq[0];
            var opts = $.data(cc,'tabs').options;
            var s = getSelectedTab(cc);
            opts.selected = s ? getTabIndex(cc,s) : -1;
            return opts;
        },
        tabs: function(jq) {
            return $.data(jq[0],'tabs').tabs;
        },
        resize: function(jq,param) {
            return jq.each(function() {
                setSize(this,param);
                setSelectedSize(this);
            });
        },
        add: function(jq,options) {
            return jq.each(function() {
                addTab(this,options);
            });
        },
        close: function(jq,which) {
            return jq.each(function() {
                closeTab(this,which);
            });
        },
        getTab: function(jq,which) {
            return getTab(jq[0],which);
        },
        getTabIndex: function(jq,tab) {
            return getTabIndex(jq[0],tab);
        },
        getSelected: function(jq) {
            return getSelectedTab(jq[0]);
        },
        select: function(jq,which) {
            return jq.each(function() {
                selectTab(this,which);
            });
        },
        unselect: function(jq,which) {
            return jq.each(function() {
                unselectTab(this,which);
            });
        },
        exists: function(jq,which) {
            return exists(jq[0],which);
        },
        update: function(jq,options) {
            return jq.each(function() {
                updateTab(this,options);
            });
        },
        enableTab: function(jq,which) {
            return jq.each(function() {
                var opts = $(this).tabs('getTab',which).panel('options');
                opts.tab.removeClass('tabs-disabled');
                opts.disabled = false;
            });
        },
        disableTab: function(jq,which) {
            return jq.each(function() {
                var opts = $(this).tabs('getTab',which).panel('options');
                opts.tab.addClass('tabs-disabled');
                opts.disabled = true;
            });
        },
        showHeader: function(jq) {
            return jq.each(function() {
                showHeader(this,true);
            });
        },
        hideHeader: function(jq) {
            return jq.each(function() {
                showHeader(this,false);
            });
        },
        showTool: function(jq) {
            return jq.each(function() {
                showTool(this,true);
            });
        },
        hideTool: function(jq) {
            return jq.each(function() {
                showTool(this,false);
            });
        },
        scrollBy: function(jq,deltaX) {	// scroll the tab header by the specified amount of pixels
            return jq.each(function() {
                var opts = $(this).tabs('options');
                var wrap = $(this).find('>div.tabs-header>div.tabs-wrap');
                var pos = Math.min(wrap._scrollLeft() + deltaX,getMaxScrollWidth());
                wrap.animate({ scrollLeft: pos },opts.scrollDuration);

                function getMaxScrollWidth() {
                    var w = 0;
                    var ul = wrap.children('ul');
                    ul.children('li').each(function() {
                        w += $(this).outerWidth(true);
                    });
                    return w - wrap.width() + (ul.outerWidth() - ul.width());
                }
            });
        }
    };

    $.fn.tabs.parseOptions = function(target) {
        return $.extend({},$.parser.parseOptions(target,[
			'tools','toolPosition','tabPosition',
			{ fit: 'boolean',border: 'boolean',plain: 'boolean' },
			{ headerWidth: 'number',tabWidth: 'number',tabHeight: 'number',selected: 'number' },
			{ showHeader: 'boolean',justified: 'boolean',narrow: 'boolean',pill: 'boolean' }
        ]));
    };

    $.fn.tabs.defaults = {
        width: 'auto',
        height: 'auto',
        headerWidth: 150,	// the tab header width, it is valid only when tabPosition set to 'left' or 'right' 
        tabWidth: 'auto',	// the tab width
        tabHeight: 27,		// the tab height
        selected: 0,		// the initialized selected tab index
        showHeader: true,
        plain: false,
        fit: false,
        border: true,
        justified: false,
        narrow: false,
        pill: false,
        tools: null,
        toolPosition: 'right',	// left,right
        tabPosition: 'top',		// possible values: top,bottom
        scrollIncrement: 100,
        scrollDuration: 400,
        onLoad: function(panel) { },
        onSelect: function(title,index) { },
        onUnselect: function(title,index) { },
        onBeforeClose: function(title,index) { },
        onClose: function(title,index) { },
        onAdd: function(title,index) { },
        onUpdate: function(title,index) { },
        onContextMenu: function(e,title,index) { }
    };
})(jQuery);

/****************************jquery.layout****************************/
(function($) {
    var _1 = false;
    function _2(_3,_4) {
        var _5 = $.data(_3,"layout");
        var _6 = _5.options;
        var _7 = _5.panels;
        var cc = $(_3);
        if(_4) {
            $.extend(_6,{ width: _4.width,height: _4.height });
        }
        if(_3.tagName.toLowerCase() == "body") {
            cc._size("fit");
        } else {
            cc._size(_6);
        }
        var _8 = { top: 0,left: 0,width: cc.width(),height: cc.height() };
        _9(_a(_7.expandNorth) ? _7.expandNorth : _7.north,"n");
        _9(_a(_7.expandSouth) ? _7.expandSouth : _7.south,"s");
        _b(_a(_7.expandEast) ? _7.expandEast : _7.east,"e");
        _b(_a(_7.expandWest) ? _7.expandWest : _7.west,"w");
        _7.center.panel("resize",_8);
        function _9(pp,_c) {
            if(!pp.length || !_a(pp)) {
                return;
            }
            var _d = pp.panel("options");
            pp.panel("resize",{ width: cc.width(),height: _d.height });
            var _e = pp.panel("panel").outerHeight();
            pp.panel("move",{ left: 0,top: (_c == "n" ? 0 : cc.height() - _e) });
            _8.height -= _e;
            if(_c == "n") {
                _8.top += _e;
                if(!_d.split && _d.border) {
                    _8.top--;
                }
            }
            if(!_d.split && _d.border) {
                _8.height++;
            }
        };
        function _b(pp,_f) {
            if(!pp.length || !_a(pp)) {
                return;
            }
            var _10 = pp.panel("options");
            pp.panel("resize",{ width: _10.width,height: _8.height });
            var _11 = pp.panel("panel").outerWidth();
            pp.panel("move",{ left: (_f == "e" ? cc.width() - _11 : 0),top: _8.top });
            _8.width -= _11;
            if(_f == "w") {
                _8.left += _11;
                if(!_10.split && _10.border) {
                    _8.left--;
                }
            }
            if(!_10.split && _10.border) {
                _8.width++;
            }
        };
    };
    function _12(_13) {
        var cc = $(_13);
        cc.addClass("layout");
        function _14(cc) {
            var _15 = cc.layout("options");
            var _16 = _15.onAdd;
            _15.onAdd = function() {
            };
            cc.children("div").each(function() {
                var _17 = $.fn.layout.parsePanelOptions(this);
                if("north,south,east,west,center".indexOf(_17.region) >= 0) {
                    _19(_13,_17,this);
                }
            });
            _15.onAdd = _16;
        };
        cc.children("form").length ? _14(cc.children("form")) : _14(cc);
        cc.append("<div class=\"layout-split-proxy-h\"></div><div class=\"layout-split-proxy-v\"></div>");
        cc.bind("_resize",function(e,_18) {
            if($(this).hasClass("easyui-fluid") || _18) {
                _2(_13);
            }
            return false;
        });
    };
    function _19(_1a,_1b,el) {
        _1b.region = _1b.region || "center";
        var _1c = $.data(_1a,"layout").panels;
        var cc = $(_1a);
        var dir = _1b.region;
        if(_1c[dir].length) {
            return;
        }
        var pp = $(el);
        if(!pp.length) {
            pp = $("<div></div>").appendTo(cc);
        }
        var _1d = $.extend({},$.fn.layout.paneldefaults,{
            width: (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),height: (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),doSize: false,collapsible: true,onOpen: function() {
                var _1e = $(this).panel("header").children("div.panel-tool");
                _1e.children("a.panel-tool-collapse").hide();
                var _1f = { north: "up",south: "down",east: "right",west: "left" };
                if(!_1f[dir]) {
                    return;
                }
                var _20 = "layout-button-" + _1f[dir];
                var t = _1e.children("a." + _20);
                if(!t.length) {
                    t = $("<a href=\"javascript:void(0)\"></a>").addClass(_20).appendTo(_1e);
                    t.bind("click",{ dir: dir },function(e) {
                        _2d(_1a,e.data.dir);
                        return false;
                    });
                }
                $(this).panel("options").collapsible ? t.show() : t.hide();
            }
        },_1b,{ cls: ((_1b.cls || "") + " layout-panel layout-panel-" + dir),bodyCls: ((_1b.bodyCls || "") + " layout-body") });
        pp.panel(_1d);
        _1c[dir] = pp;
        var _21 = { north: "s",south: "n",east: "w",west: "e" };
        var _22 = pp.panel("panel");
        if(pp.panel("options").split) {
            _22.addClass("layout-split-" + dir);
        }
        _22.resizable($.extend({},{
            handles: (_21[dir] || ""),disabled: (!pp.panel("options").split),onStartResize: function(e) {
                _1 = true;
                if(dir == "north" || dir == "south") {
                    var _23 = $(">div.layout-split-proxy-v",_1a);
                } else {
                    var _23 = $(">div.layout-split-proxy-h",_1a);
                }
                var top = 0,_24 = 0,_25 = 0,_26 = 0;
                var pos = { display: "block" };
                if(dir == "north") {
                    pos.top = parseInt(_22.css("top")) + _22.outerHeight() - _23.height();
                    pos.left = parseInt(_22.css("left"));
                    pos.width = _22.outerWidth();
                    pos.height = _23.height();
                } else {
                    if(dir == "south") {
                        pos.top = parseInt(_22.css("top"));
                        pos.left = parseInt(_22.css("left"));
                        pos.width = _22.outerWidth();
                        pos.height = _23.height();
                    } else {
                        if(dir == "east") {
                            pos.top = parseInt(_22.css("top")) || 0;
                            pos.left = parseInt(_22.css("left")) || 0;
                            pos.width = _23.width();
                            pos.height = _22.outerHeight();
                        } else {
                            if(dir == "west") {
                                pos.top = parseInt(_22.css("top")) || 0;
                                pos.left = _22.outerWidth() - _23.width();
                                pos.width = _23.width();
                                pos.height = _22.outerHeight();
                            }
                        }
                    }
                }
                _23.css(pos);
                $("<div class=\"layout-mask\"></div>").css({ left: 0,top: 0,width: cc.width(),height: cc.height() }).appendTo(cc);
            },onResize: function(e) {
                if(dir == "north" || dir == "south") {
                    var _27 = $(">div.layout-split-proxy-v",_1a);
                    _27.css("top",e.pageY - $(_1a).offset().top - _27.height() / 2);
                } else {
                    var _27 = $(">div.layout-split-proxy-h",_1a);
                    _27.css("left",e.pageX - $(_1a).offset().left - _27.width() / 2);
                }
                return false;
            },onStopResize: function(e) {
                cc.children("div.layout-split-proxy-v,div.layout-split-proxy-h").hide();
                pp.panel("resize",e.data);
                _2(_1a);
                _1 = false;
                cc.find(">div.layout-mask").remove();
            }
        },_1b));
        cc.layout("options").onAdd.call(_1a,dir);
    };
    function _28(_29,_2a) {
        var _2b = $.data(_29,"layout").panels;
        if(_2b[_2a].length) {
            _2b[_2a].panel("destroy");
            _2b[_2a] = $();
            var _2c = "expand" + _2a.substring(0,1).toUpperCase() + _2a.substring(1);
            if(_2b[_2c]) {
                _2b[_2c].panel("destroy");
                _2b[_2c] = undefined;
            }
            $(_29).layout("options").onRemove.call(_29,_2a);
        }
    };
    function _2d(_2e,_2f,_30) {
        if(_30 == undefined) {
            _30 = "normal";
        }
        var _31 = $.data(_2e,"layout").panels;
        var p = _31[_2f];
        var _32 = p.panel("options");
        if(_32.onBeforeCollapse.call(p) == false) {
            return;
        }
        var _33 = "expand" + _2f.substring(0,1).toUpperCase() + _2f.substring(1);
        if(!_31[_33]) {
            _31[_33] = _34(_2f);
            var ep = _31[_33].panel("panel");
            if(!_32.expandMode) {
                ep.css("cursor","default");
            } else {
                ep.bind("click",function() {
                    if(_32.expandMode == "dock") {
                        _41(_2e,_2f);
                    } else {
                        p.panel("expand",false).panel("open");
                        var _35 = _36();
                        p.panel("resize",_35.collapse);
                        p.panel("panel").animate(_35.expand,function() {
                            $(this).unbind(".layout").bind("mouseleave.layout",{ region: _2f },function(e) {
                                if(_1 == true) {
                                    return;
                                }
                                if($("body>div.combo-p>div.combo-panel:visible").length) {
                                    return;
                                }
                                _2d(_2e,e.data.region);
                            });
                            $(_2e).layout("options").onExpand.call(_2e,_2f);
                        });
                    }
                    return false;
                });
            }
        }
        var _37 = _36();
        if(!_a(_31[_33])) {
            _31.center.panel("resize",_37.resizeC);
        }
        p.panel("panel").animate(_37.collapse,_30,function() {
            p.panel("collapse",false).panel("close");
            _31[_33].panel("open").panel("resize",_37.expandP);
            $(this).unbind(".layout");
            $(_2e).layout("options").onCollapse.call(_2e,_2f);
        });
        function _34(dir) {
            var _38 = { "east": "left","west": "right","north": "down","south": "up" };
            var _39 = (_32.region == "north" || _32.region == "south");
            var _3a = "layout-button-" + _38[dir];
            var p = $("<div></div>").appendTo(_2e);
            p.panel($.extend({},$.fn.layout.paneldefaults,{
                cls: ("layout-expand layout-expand-" + dir),title: "&nbsp;",iconCls: (_32.hideCollapsedContent ? null : _32.iconCls),closed: true,minWidth: 0,minHeight: 0,doSize: false,region: _32.region,collapsedSize: _32.collapsedSize,noheader: (!_39 && _32.hideExpandTool),tools: ((_39 && _32.hideExpandTool) ? null : [{
                    iconCls: _3a,handler: function() {
                        _41(_2e,_2f);
                        return false;
                    }
                }])
            }));
            if(!_32.hideCollapsedContent) {
                var _3b = typeof _32.collapsedContent == "function" ? _32.collapsedContent.call(p[0],_32.title) : _32.collapsedContent;
                _39 ? p.panel("setTitle",_3b) : p.html(_3b);
            }
            p.panel("panel").hover(function() {
                $(this).addClass("layout-expand-over");
            },function() {
                $(this).removeClass("layout-expand-over");
            });
            return p;
        };
        function _36() {
            var cc = $(_2e);
            var _3c = _31.center.panel("options");
            var _3d = _32.collapsedSize;
            if(_2f == "east") {
                var _3e = p.panel("panel")._outerWidth();
                var _3f = _3c.width + _3e - _3d;
                if(_32.split || !_32.border) {
                    _3f++;
                }
                return { resizeC: { width: _3f },expand: { left: cc.width() - _3e },expandP: { top: _3c.top,left: cc.width() - _3d,width: _3d,height: _3c.height },collapse: { left: cc.width(),top: _3c.top,height: _3c.height } };
            } else {
                if(_2f == "west") {
                    var _3e = p.panel("panel")._outerWidth();
                    var _3f = _3c.width + _3e - _3d;
                    if(_32.split || !_32.border) {
                        _3f++;
                    }
                    return { resizeC: { width: _3f,left: _3d - 1 },expand: { left: 0 },expandP: { left: 0,top: _3c.top,width: _3d,height: _3c.height },collapse: { left: -_3e,top: _3c.top,height: _3c.height } };
                } else {
                    if(_2f == "north") {
                        var _40 = p.panel("panel")._outerHeight();
                        var hh = _3c.height;
                        if(!_a(_31.expandNorth)) {
                            hh += _40 - _3d + ((_32.split || !_32.border) ? 1 : 0);
                        }
                        _31.east.add(_31.west).add(_31.expandEast).add(_31.expandWest).panel("resize",{ top: _3d - 1,height: hh });
                        return { resizeC: { top: _3d - 1,height: hh },expand: { top: 0 },expandP: { top: 0,left: 0,width: cc.width(),height: _3d },collapse: { top: -_40,width: cc.width() } };
                    } else {
                        if(_2f == "south") {
                            var _40 = p.panel("panel")._outerHeight();
                            var hh = _3c.height;
                            if(!_a(_31.expandSouth)) {
                                hh += _40 - _3d + ((_32.split || !_32.border) ? 1 : 0);
                            }
                            _31.east.add(_31.west).add(_31.expandEast).add(_31.expandWest).panel("resize",{ height: hh });
                            return { resizeC: { height: hh },expand: { top: cc.height() - _40 },expandP: { top: cc.height() - _3d,left: 0,width: cc.width(),height: _3d },collapse: { top: cc.height(),width: cc.width() } };
                        }
                    }
                }
            }
        };
    };
    function _41(_42,_43) {
        var _44 = $.data(_42,"layout").panels;
        var p = _44[_43];
        var _45 = p.panel("options");
        if(_45.onBeforeExpand.call(p) == false) {
            return;
        }
        var _46 = "expand" + _43.substring(0,1).toUpperCase() + _43.substring(1);
        if(_44[_46]) {
            _44[_46].panel("close");
            p.panel("panel").stop(true,true);
            p.panel("expand",false).panel("open");
            var _47 = _48();
            p.panel("resize",_47.collapse);
            p.panel("panel").animate(_47.expand,function() {
                _2(_42);
                $(_42).layout("options").onExpand.call(_42,_43);
            });
        }
        function _48() {
            var cc = $(_42);
            var _49 = _44.center.panel("options");
            if(_43 == "east" && _44.expandEast) {
                return { collapse: { left: cc.width(),top: _49.top,height: _49.height },expand: { left: cc.width() - p.panel("panel")._outerWidth() } };
            } else {
                if(_43 == "west" && _44.expandWest) {
                    return { collapse: { left: -p.panel("panel")._outerWidth(),top: _49.top,height: _49.height },expand: { left: 0 } };
                } else {
                    if(_43 == "north" && _44.expandNorth) {
                        return { collapse: { top: -p.panel("panel")._outerHeight(),width: cc.width() },expand: { top: 0 } };
                    } else {
                        if(_43 == "south" && _44.expandSouth) {
                            return { collapse: { top: cc.height(),width: cc.width() },expand: { top: cc.height() - p.panel("panel")._outerHeight() } };
                        }
                    }
                }
            }
        };
    };
    function _a(pp) {
        if(!pp) {
            return false;
        }
        if(pp.length) {
            return pp.panel("panel").is(":visible");
        } else {
            return false;
        }
    };
    function _4a(_4b) {
        var _4c = $.data(_4b,"layout");
        var _4d = _4c.options;
        var _4e = _4c.panels;
        var _4f = _4d.onCollapse;
        _4d.onCollapse = function() {
        };
        _50("east");
        _50("west");
        _50("north");
        _50("south");
        _4d.onCollapse = _4f;
        function _50(_51) {
            var p = _4e[_51];
            if(p.length && p.panel("options").collapsed) {
                _2d(_4b,_51,0);
            }
        };
    };
    function _52(_53,_54,_55) {
        var p = $(_53).layout("panel",_54);
        p.panel("options").split = _55;
        var cls = "layout-split-" + _54;
        var _56 = p.panel("panel").removeClass(cls);
        if(_55) {
            _56.addClass(cls);
        }
        _56.resizable({ disabled: (!_55) });
        _2(_53);
    };
    $.fn.layout = function(_57,_58) {
        if(typeof _57 == "string") {
            return $.fn.layout.methods[_57](this,_58);
        }
        _57 = _57 || {};
        return this.each(function() {
            var _59 = $.data(this,"layout");
            if(_59) {
                $.extend(_59.options,_57);
            } else {
                var _5a = $.extend({},$.fn.layout.defaults,$.fn.layout.parseOptions(this),_57);
                $.data(this,"layout",{ options: _5a,panels: { center: $(),north: $(),south: $(),east: $(),west: $() } });
                _12(this);
            }
            _2(this);
            _4a(this);
        });
    };
    $.fn.layout.methods = {
        options: function(jq) {
            return $.data(jq[0],"layout").options;
        },resize: function(jq,_5b) {
            return jq.each(function() {
                _2(this,_5b);
            });
        },panel: function(jq,_5c) {
            return $.data(jq[0],"layout").panels[_5c];
        },collapse: function(jq,_5d) {
            return jq.each(function() {
                _2d(this,_5d);
            });
        },expand: function(jq,_5e) {
            return jq.each(function() {
                _41(this,_5e);
            });
        },add: function(jq,_5f) {
            return jq.each(function() {
                _19(this,_5f);
                _2(this);
                if($(this).layout("panel",_5f.region).panel("options").collapsed) {
                    _2d(this,_5f.region,0);
                }
            });
        },remove: function(jq,_60) {
            return jq.each(function() {
                _28(this,_60);
                _2(this);
            });
        },split: function(jq,_61) {
            return jq.each(function() {
                _52(this,_61,true);
            });
        },unsplit: function(jq,_62) {
            return jq.each(function() {
                _52(this,_62,false);
            });
        }
    };
    $.fn.layout.parseOptions = function(_63) {
        return $.extend({},$.parser.parseOptions(_63,[{ fit: "boolean" }]));
    };
    $.fn.layout.defaults = {
        fit: false,onExpand: function(_64) {
        },onCollapse: function(_65) {
        },onAdd: function(_66) {
        },onRemove: function(_67) {
        }
    };
    $.fn.layout.parsePanelOptions = function(_68) {
        var t = $(_68);
        return $.extend({},$.fn.panel.parseOptions(_68),$.parser.parseOptions(_68,["region",{ split: "boolean",collpasedSize: "number",minWidth: "number",minHeight: "number",maxWidth: "number",maxHeight: "number" }]));
    };
    $.fn.layout.paneldefaults = $.extend({},$.fn.panel.defaults,{
        region: null,split: false,collapsedSize: 28,expandMode: "float",hideExpandTool: false,hideCollapsedContent: true,collapsedContent: function(_69) {
            var p = $(this);
            var _6a = p.panel("options");
            if(_6a.region == "north" || _6a.region == "south") {
                return _69;
            }
            var _6b = _6a.collapsedSize - 2;
            var _6c = (_6b - 16) / 2;
            _6c = _6b - _6c;
            var cc = [];
            if(_6a.iconCls) {
                cc.push("<div class=\"panel-icon " + _6a.iconCls + "\"></div>");
            }
            cc.push("<div class=\"panel-title layout-expand-title");
            cc.push(_6a.iconCls ? " layout-expand-with-icon" : "");
            cc.push("\" style=\"left:" + _6c + "px\">");
            cc.push(_69);
            cc.push("</div>");
            return cc.join("");
        },minWidth: 10,minHeight: 10,maxWidth: 10000,maxHeight: 10000
    });
})(jQuery);


/**
 * jQuery EasyUI 1.4.5
 * 
 * Copyright (c) 2009-2016 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the freeware license: http://www.jeasyui.com/license_freeware.php
 * To use it on other terms please contact us: info@jeasyui.com
 *
 */
/****************************jquery.draggable****************************/
(function ($) {
    function drag(e) {
        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;
        var proxy = state.proxy;

        var dragData = e.data;
        var left = dragData.startLeft + e.pageX - dragData.startX;
        var top = dragData.startTop + e.pageY - dragData.startY;

        if (proxy) {
            if (proxy.parent()[0] == document.body) {
                if (opts.deltaX != null && opts.deltaX != undefined) {
                    left = e.pageX + opts.deltaX;
                } else {
                    left = e.pageX - e.data.offsetWidth;
                }
                if (opts.deltaY != null && opts.deltaY != undefined) {
                    top = e.pageY + opts.deltaY;
                } else {
                    top = e.pageY - e.data.offsetHeight;
                }
            } else {
                if (opts.deltaX != null && opts.deltaX != undefined) {
                    left += e.data.offsetWidth + opts.deltaX;
                }
                if (opts.deltaY != null && opts.deltaY != undefined) {
                    top += e.data.offsetHeight + opts.deltaY;
                }
            }
        }

        if (e.data.parent != document.body) {
            left += $(e.data.parent).scrollLeft();
            top += $(e.data.parent).scrollTop();
        }

        if (opts.axis == 'h') {
            dragData.left = left;
        } else if (opts.axis == 'v') {
            dragData.top = top;
        } else {
            dragData.left = left;
            dragData.top = top;
        }
    }

    function applyDrag(e) {
        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;
        var proxy = state.proxy;
        if (!proxy) {
            proxy = $(e.data.target);
        }
        proxy.css({
            left: e.data.left,
            top: e.data.top
        });
        $('body').css('cursor', opts.cursor);
    }

    function doDown(e) {
        if (!$.fn.draggable.isDragging) { return false; }

        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;

        var droppables = $('.droppable').filter(function () {
            return e.data.target != this;
        }).filter(function () {
            var accept = $.data(this, 'droppable').options.accept;
            if (accept) {
                return $(accept).filter(function () {
                    return this == e.data.target;
                }).length > 0;
            } else {
                return true;
            }
        });
        state.droppables = droppables;

        var proxy = state.proxy;
        if (!proxy) {
            if (opts.proxy) {
                if (opts.proxy == 'clone') {
                    proxy = $(e.data.target).clone().insertAfter(e.data.target);
                } else {
                    proxy = opts.proxy.call(e.data.target, e.data.target);
                }
                state.proxy = proxy;
            } else {
                proxy = $(e.data.target);
            }
        }

        proxy.css('position', 'absolute');
        drag(e);
        applyDrag(e);

        opts.onStartDrag.call(e.data.target, e);
        return false;
    }

    function doMove(e) {
        if (!$.fn.draggable.isDragging) { return false; }

        var state = $.data(e.data.target, 'draggable');
        drag(e);
        if (state.options.onDrag.call(e.data.target, e) != false) {
            applyDrag(e);
        }

        var source = e.data.target;
        state.droppables.each(function () {
            var dropObj = $(this);
            if (dropObj.droppable('options').disabled) { return; }

            var p2 = dropObj.offset();
            if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
					&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()) {
                if (!this.entered) {
                    $(this).trigger('_dragenter', [source]);
                    this.entered = true;
                }
                $(this).trigger('_dragover', [source]);
            } else {
                if (this.entered) {
                    $(this).trigger('_dragleave', [source]);
                    this.entered = false;
                }
            }
        });

        return false;
    }

    function doUp(e) {
        if (!$.fn.draggable.isDragging) {
            clearDragging();
            return false;
        }

        doMove(e);

        var state = $.data(e.data.target, 'draggable');
        var proxy = state.proxy;
        var opts = state.options;
        if (opts.revert) {
            if (checkDrop() == true) {
                $(e.data.target).css({
                    position: e.data.startPosition,
                    left: e.data.startLeft,
                    top: e.data.startTop
                });
            } else {
                if (proxy) {
                    var left, top;
                    if (proxy.parent()[0] == document.body) {
                        left = e.data.startX - e.data.offsetWidth;
                        top = e.data.startY - e.data.offsetHeight;
                    } else {
                        left = e.data.startLeft;
                        top = e.data.startTop;
                    }
                    proxy.animate({
                        left: left,
                        top: top
                    }, function () {
                        removeProxy();
                    });
                } else {
                    $(e.data.target).animate({
                        left: e.data.startLeft,
                        top: e.data.startTop
                    }, function () {
                        $(e.data.target).css('position', e.data.startPosition);
                    });
                }
            }
        } else {
            $(e.data.target).css({
                position: 'absolute',
                left: e.data.left,
                top: e.data.top
            });
            checkDrop();
        }

        opts.onStopDrag.call(e.data.target, e);

        clearDragging();

        function removeProxy() {
            if (proxy) {
                proxy.remove();
            }
            state.proxy = null;
        }

        function checkDrop() {
            var dropped = false;
            state.droppables.each(function () {
                var dropObj = $(this);
                if (dropObj.droppable('options').disabled) { return; }

                var p2 = dropObj.offset();
                if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
						&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()) {
                    if (opts.revert) {
                        $(e.data.target).css({
                            position: e.data.startPosition,
                            left: e.data.startLeft,
                            top: e.data.startTop
                        });
                    }
                    $(this).trigger('_drop', [e.data.target]);
                    removeProxy();
                    dropped = true;
                    this.entered = false;
                    return false;
                }
            });
            if (!dropped && !opts.revert) {
                removeProxy();
            }
            return dropped;
        }

        return false;
    }

    function clearDragging() {
        if ($.fn.draggable.timer) {
            clearTimeout($.fn.draggable.timer);
            $.fn.draggable.timer = undefined;
        }
        $(document).unbind('.draggable');
        $.fn.draggable.isDragging = false;
        setTimeout(function () {
            $('body').css('cursor', '');
        }, 100);
    }

    $.fn.draggable = function (options, param) {
        if (typeof options == 'string') {
            return $.fn.draggable.methods[options](this, param);
        }

        return this.each(function () {
            var opts;
            var state = $.data(this, 'draggable');
            if (state) {
                state.handle.unbind('.draggable');
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), options || {});
            }
            var handle = opts.handle ? (typeof opts.handle == 'string' ? $(opts.handle, this) : opts.handle) : $(this);

            $.data(this, 'draggable', {
                options: opts,
                handle: handle
            });

            if (opts.disabled) {
                $(this).css('cursor', '');
                return;
            }

            handle.unbind('.draggable').bind('mousemove.draggable', { target: this }, function (e) {
                if ($.fn.draggable.isDragging) { return }
                var opts = $.data(e.data.target, 'draggable').options;
                if (checkArea(e)) {
                    $(this).css('cursor', opts.cursor);
                } else {
                    $(this).css('cursor', '');
                }
            }).bind('mouseleave.draggable', { target: this }, function (e) {
                $(this).css('cursor', '');
            }).bind('mousedown.draggable', { target: this }, function (e) {
                if (checkArea(e) == false) return;
                $(this).css('cursor', '');

                var position = $(e.data.target).position();
                var offset = $(e.data.target).offset();
                var data = {
                    startPosition: $(e.data.target).css('position'),
                    startLeft: position.left,
                    startTop: position.top,
                    left: position.left,
                    top: position.top,
                    startX: e.pageX,
                    startY: e.pageY,
                    offsetWidth: (e.pageX - offset.left),
                    offsetHeight: (e.pageY - offset.top),
                    target: e.data.target,
                    parent: $(e.data.target).parent()[0]
                };

                $.extend(e.data, data);
                var opts = $.data(e.data.target, 'draggable').options;
                if (opts.onBeforeDrag.call(e.data.target, e) == false) return;

                $(document).bind('mousedown.draggable', e.data, doDown);
                $(document).bind('mousemove.draggable', e.data, doMove);
                $(document).bind('mouseup.draggable', e.data, doUp);

                $.fn.draggable.timer = setTimeout(function () {
                    $.fn.draggable.isDragging = true;
                    doDown(e);
                }, opts.delay);
                return false;
            });

            // check if the handle can be dragged
            function checkArea(e) {
                var state = $.data(e.data.target, 'draggable');
                var handle = state.handle;
                var offset = $(handle).offset();
                var width = $(handle).outerWidth();
                var height = $(handle).outerHeight();
                var t = e.pageY - offset.top;
                var r = offset.left + width - e.pageX;
                var b = offset.top + height - e.pageY;
                var l = e.pageX - offset.left;

                return Math.min(t, r, b, l) > state.options.edge;
            }

        });
    };

    $.fn.draggable.methods = {
        options: function (jq) {
            return $.data(jq[0], 'draggable').options;
        },
        proxy: function (jq) {
            return $.data(jq[0], 'draggable').proxy;
        },
        enable: function (jq) {
            return jq.each(function () {
                $(this).draggable({ disabled: false });
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $(this).draggable({ disabled: true });
            });
        }
    };

    $.fn.draggable.parseOptions = function (target) {
        var t = $(target);
        return $.extend({},
				$.parser.parseOptions(target, ['cursor', 'handle', 'axis',
				       { 'revert': 'boolean', 'deltaX': 'number', 'deltaY': 'number', 'edge': 'number', 'delay': 'number' }]), {
				           disabled: (t.attr('disabled') ? true : undefined)
				       });
    };

    $.fn.draggable.defaults = {
        proxy: null,	// 'clone' or a function that will create the proxy object, 
        // the function has the source parameter that indicate the source object dragged.
        revert: false,
        cursor: 'move',
        deltaX: null,
        deltaY: null,
        handle: null,
        disabled: false,
        edge: 0,
        axis: null,	// v or h
        delay: 100,

        onBeforeDrag: function (e) { },
        onStartDrag: function (e) { },
        onDrag: function (e) { },
        onStopDrag: function (e) { }
    };

    $.fn.draggable.isDragging = false;

})(jQuery);


/****************************jquery.droppable****************************/
(function ($) {
    function init(target) {
        $(target).addClass('droppable');
        $(target).bind('_dragenter', function (e, source) {
            $.data(target, 'droppable').options.onDragEnter.apply(target, [e, source]);
        });
        $(target).bind('_dragleave', function (e, source) {
            $.data(target, 'droppable').options.onDragLeave.apply(target, [e, source]);
        });
        $(target).bind('_dragover', function (e, source) {
            $.data(target, 'droppable').options.onDragOver.apply(target, [e, source]);
        });
        $(target).bind('_drop', function (e, source) {
            $.data(target, 'droppable').options.onDrop.apply(target, [e, source]);
        });
    }

    $.fn.droppable = function (options, param) {
        if (typeof options == 'string') {
            return $.fn.droppable.methods[options](this, param);
        }

        options = options || {};
        return this.each(function () {
            var state = $.data(this, 'droppable');
            if (state) {
                $.extend(state.options, options);
            } else {
                init(this);
                $.data(this, 'droppable', {
                    options: $.extend({}, $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), options)
                });
            }
        });
    };

    $.fn.droppable.methods = {
        options: function (jq) {
            return $.data(jq[0], 'droppable').options;
        },
        enable: function (jq) {
            return jq.each(function () {
                $(this).droppable({ disabled: false });
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $(this).droppable({ disabled: true });
            });
        }
    };

    $.fn.droppable.parseOptions = function (target) {
        var t = $(target);
        return $.extend({}, $.parser.parseOptions(target, ['accept']), {
            disabled: (t.attr('disabled') ? true : undefined)
        });
    };

    $.fn.droppable.defaults = {
        accept: null,
        disabled: false,
        onDragEnter: function (e, source) { },
        onDragOver: function (e, source) { },
        onDragLeave: function (e, source) { },
        onDrop: function (e, source) { }
    };
})(jQuery);

/****************************jquery.menu****************************/
/**
 * jQuery EasyUI 1.4.5
 * 
 * Copyright (c) 2009-2016 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the freeware license: http://www.jeasyui.com/license_freeware.php
 * To use it on other terms please contact us: info@jeasyui.com
 *
 */
/**
 * menu - jQuery EasyUI
 * 
 */
(function ($) {
    $(function () {
        $(document).unbind('.menu').bind('mousedown.menu', function (e) {
            var m = $(e.target).closest('div.menu,div.combo-p');
            if (m.length) { return }
            $('body>div.menu-top:visible').not('.menu-inline').menu('hide');
            hideMenu($('body>div.menu:visible').not('.menu-inline'));
        });
    });

    /**
	 * initialize the target menu, the function can be invoked only once
	 */
    function init(target) {
        var opts = $.data(target, 'menu').options;
        $(target).addClass('menu-top');	// the top menu
        opts.inline ? $(target).addClass('menu-inline') : $(target).appendTo('body');
        $(target).bind('_resize', function (e, force) {
            if ($(this).hasClass('easyui-fluid') || force) {
                $(target).menu('resize', target);
            }
            return false;
        });

        var menus = splitMenu($(target));
        for (var i = 0; i < menus.length; i++) {
            createMenu(menus[i]);
        }

        function splitMenu(menu) {
            var menus = [];
            menu.addClass('menu');
            menus.push(menu);
            if (!menu.hasClass('menu-content')) {
                menu.children('div').each(function () {
                    var submenu = $(this).children('div');
                    if (submenu.length) {
                        //						submenu.insertAfter(target);
                        submenu.appendTo('body');
                        this.submenu = submenu;		// point to the sub menu
                        var mm = splitMenu(submenu);
                        menus = menus.concat(mm);
                    }
                });
            }
            return menus;
        }

        function createMenu(menu) {
            var wh = $.parser.parseOptions(menu[0], ['width', 'height']);
            menu[0].originalHeight = wh.height || 0;
            if (menu.hasClass('menu-content')) {
                menu[0].originalWidth = wh.width || menu._outerWidth();
            } else {
                menu[0].originalWidth = wh.width || 0;
                menu.children('div').each(function () {
                    var item = $(this);
                    var itemOpts = $.extend({}, $.parser.parseOptions(this, ['name', 'iconCls', 'href', { separator: 'boolean' }]), {
                        disabled: (item.attr('disabled') ? true : undefined)
                    });
                    if (itemOpts.separator) {
                        item.addClass('menu-sep');
                    }
                    if (!item.hasClass('menu-sep')) {
                        item[0].itemName = itemOpts.name || '';
                        item[0].itemHref = itemOpts.href || '';

                        var text = item.addClass('menu-item').html();
                        item.empty().append($('<div class="menu-text"></div>').html(text));
                        if (itemOpts.iconCls) {
                            $('<div class="menu-icon"></div>').addClass(itemOpts.iconCls).appendTo(item);
                        }
                        if (itemOpts.disabled) {
                            setDisabled(target, item[0], true);
                        }
                        if (item[0].submenu) {
                            $('<div class="menu-rightarrow"></div>').appendTo(item);	// has sub menu
                        }

                        bindMenuItemEvent(target, item);
                    }
                });
                $('<div class="menu-line"></div>').prependTo(menu);
            }
            setMenuSize(target, menu);
            if (!menu.hasClass('menu-inline')) {
                menu.hide();
            }

            bindMenuEvent(target, menu);
        }
    }

    function setMenuSize(target, menu) {
        var opts = $.data(target, 'menu').options;
        var style = menu.attr('style') || '';
        menu.css({
            display: 'block',
            left: -10000,
            height: 'auto',
            overflow: 'hidden'
        });
        menu.find('.menu-item').each(function () {
            $(this)._outerHeight(opts.itemHeight);
            $(this).find('.menu-text').css({
                height: (opts.itemHeight - 2) + 'px',
                lineHeight: (opts.itemHeight - 2) + 'px'
            });
        });
        menu.removeClass('menu-noline').addClass(opts.noline ? 'menu-noline' : '');

        var width = menu[0].originalWidth || 'auto';
        if (isNaN(parseInt(width))) {
            width = 0;
            menu.find('div.menu-text').each(function () {
                if (width < $(this)._outerWidth()) {
                    width = $(this)._outerWidth();
                }
            });
            width += 40;
        }

        var autoHeight = menu.outerHeight();
        var height = menu[0].originalHeight || 'auto';
        if (isNaN(parseInt(height))) {
            height = autoHeight;

            if (menu.hasClass('menu-top') && opts.alignTo) {
                var at = $(opts.alignTo);
                var h1 = at.offset().top - $(document).scrollTop();
                var h2 = $(window)._outerHeight() + $(document).scrollTop() - at.offset().top - at._outerHeight();
                height = Math.min(height, Math.max(h1, h2));
            } else if (height > $(window)._outerHeight()) {
                height = $(window).height();
            }
        }

        menu.attr('style', style);	// restore the original style
        menu._size({
            fit: (menu[0] == target ? opts.fit : false),
            width: width,
            minWidth: opts.minWidth,
            height: height
        });
        menu.css('overflow', menu.outerHeight() < autoHeight ? 'auto' : 'hidden');
        menu.children('div.menu-line')._outerHeight(autoHeight - 2);
    }

    /**
	 * bind menu event
	 */
    function bindMenuEvent(target, menu) {
        if (menu.hasClass('menu-inline')) { return }
        var state = $.data(target, 'menu');
        menu.unbind('.menu').bind('mouseenter.menu', function () {
            if (state.timer) {
                clearTimeout(state.timer);
                state.timer = null;
            }
        }).bind('mouseleave.menu', function () {
            if (state.options.hideOnUnhover) {
                state.timer = setTimeout(function () {
                    hideAll(target, $(target).hasClass('menu-inline'));
                }, state.options.duration);
            }
        });
    }

    /**
	 * bind menu item event
	 */
    function bindMenuItemEvent(target, item) {
        if (!item.hasClass('menu-item')) { return }
        item.unbind('.menu');
        item.bind('click.menu', function () {
            if ($(this).hasClass('menu-item-disabled')) {
                return;
            }
            // only the sub menu clicked can hide all menus
            if (!this.submenu) {
                hideAll(target, $(target).hasClass('menu-inline'));
                var href = this.itemHref;
                if (href) {
                    location.href = href;
                }
            }
            $(this).trigger('mouseenter');
            var item = $(target).menu('getItem', this);
            $.data(target, 'menu').options.onClick.call(target, item);
        }).bind('mouseenter.menu', function (e) {
            // hide other menu
            item.siblings().each(function () {
                if (this.submenu) {
                    hideMenu(this.submenu);
                }
                $(this).removeClass('menu-active');
            });
            // show this menu
            item.addClass('menu-active');

            if ($(this).hasClass('menu-item-disabled')) {
                item.addClass('menu-active-disabled');
                return;
            }

            var submenu = item[0].submenu;
            if (submenu) {
                $(target).menu('show', {
                    menu: submenu,
                    parent: item
                });
            }
        }).bind('mouseleave.menu', function (e) {
            item.removeClass('menu-active menu-active-disabled');
            var submenu = item[0].submenu;
            if (submenu) {
                if (e.pageX >= parseInt(submenu.css('left'))) {
                    item.addClass('menu-active');
                } else {
                    hideMenu(submenu);
                }

            } else {
                item.removeClass('menu-active');
            }
        });
    }

    /**
	 * hide top menu and it's all sub menus
	 */
    function hideAll(target, inline) {
        var state = $.data(target, 'menu');
        if (state) {
            if ($(target).is(':visible')) {
                hideMenu($(target));
                if (inline) {
                    $(target).show();
                } else {
                    state.options.onHide.call(target);
                }
            }
        }
        return false;
    }

    /**
	 * show the menu, the 'param' object has one or more properties:
	 * left: the left position to display
	 * top: the top position to display
	 * menu: the menu to display, if not defined, the 'target menu' is used
	 * parent: the parent menu item to align to
	 * alignTo: the element object to align to
	 */
    function showMenu(target, param) {
        param = param || {};
        var left, top;
        var opts = $.data(target, 'menu').options;
        var menu = $(param.menu || target);
        $(target).menu('resize', menu[0]);
        if (menu.hasClass('menu-top')) {
            $.extend(opts, param);
            left = opts.left;
            top = opts.top;
            if (opts.alignTo) {
                var at = $(opts.alignTo);
                left = at.offset().left;
                top = at.offset().top + at._outerHeight();
                if (opts.align == 'right') {
                    left += at.outerWidth() - menu.outerWidth();
                }
            }
            if (left + menu.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()) {
                left = $(window)._outerWidth() + $(document).scrollLeft() - menu.outerWidth() - 5;
            }
            if (left < 0) { left = 0; }
            top = _fixTop(top, opts.alignTo);
        } else {
            var parent = param.parent;	// the parent menu item
            left = parent.offset().left + parent.outerWidth() - 2;
            if (left + menu.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft()) {
                left = parent.offset().left - menu.outerWidth() + 2;
            }
            top = _fixTop(parent.offset().top - 3);
        }

        function _fixTop(top, alignTo) {
            if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
                if (alignTo) {
                    top = $(alignTo).offset().top - menu._outerHeight();
                } else {
                    top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight();
                }
            }
            if (top < 0) { top = 0; }
            return top;
        }

        menu.css(opts.position.call(target, menu[0], left, top));
        menu.show(0, function () {
            if (!menu[0].shadow) {
                menu[0].shadow = $('<div class="menu-shadow"></div>').insertAfter(menu);
            }
            menu[0].shadow.css({
                display: (menu.hasClass('menu-inline') ? 'none' : 'block'),
                zIndex: $.fn.menu.defaults.zIndex++,
                left: menu.css('left'),
                top: menu.css('top'),
                width: menu.outerWidth(),
                height: menu.outerHeight()
            });
            menu.css('z-index', $.fn.menu.defaults.zIndex++);
            if (menu.hasClass('menu-top')) {
                opts.onShow.call(target);
            }
        });
    }

    function hideMenu(menu) {
        if (menu && menu.length) {
            hideit(menu);
            menu.find('div.menu-item').each(function () {
                if (this.submenu) {
                    hideMenu(this.submenu);
                }
                $(this).removeClass('menu-active');
            });
        }

        function hideit(m) {
            m.stop(true, true);
            if (m[0].shadow) {
                m[0].shadow.hide();
            }
            m.hide();
        }
    }

    function findItem(target, text) {
        var result = null;
        var tmp = $('<div></div>');
        function find(menu) {
            menu.children('div.menu-item').each(function () {
                var item = $(target).menu('getItem', this);
                var s = tmp.empty().html(item.text).text();
                if (text == $.trim(s)) {
                    result = item;
                } else if (this.submenu && !result) {
                    find(this.submenu);
                }
            });
        }
        find($(target));
        tmp.remove();
        return result;
    }

    function setDisabled(target, itemEl, disabled) {
        var t = $(itemEl);
        if (!t.hasClass('menu-item')) { return }

        if (disabled) {
            t.addClass('menu-item-disabled');
            if (itemEl.onclick) {
                itemEl.onclick1 = itemEl.onclick;
                itemEl.onclick = null;
            }
        } else {
            t.removeClass('menu-item-disabled');
            if (itemEl.onclick1) {
                itemEl.onclick = itemEl.onclick1;
                itemEl.onclick1 = null;
            }
        }
    }

    function appendItem(target, param) {
        var opts = $.data(target, 'menu').options;
        var menu = $(target);
        if (param.parent) {
            if (!param.parent.submenu) {
                var submenu = $('<div class="menu"><div class="menu-line"></div></div>').appendTo('body');
                submenu.hide();
                param.parent.submenu = submenu;
                $('<div class="menu-rightarrow"></div>').appendTo(param.parent);
            }
            menu = param.parent.submenu;
        }
        if (param.separator) {
            var item = $('<div class="menu-sep"></div>').appendTo(menu);
        } else {
            var item = $('<div class="menu-item"></div>').appendTo(menu);
            $('<div class="menu-text"></div>').html(param.text).appendTo(item);
        }
        if (param.iconCls) $('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(item);
        if (param.id) item.attr('id', param.id);
        if (param.name) { item[0].itemName = param.name }
        if (param.href) { item[0].itemHref = param.href }
        if (param.onclick) {
            if (typeof param.onclick == 'string') {
                item.attr('onclick', param.onclick);
            } else {
                item[0].onclick = eval(param.onclick);
            }
        }
        if (param.handler) { item[0].onclick = eval(param.handler) }
        if (param.disabled) { setDisabled(target, item[0], true) }

        bindMenuItemEvent(target, item);
        bindMenuEvent(target, menu);
        setMenuSize(target, menu);
    }

    function removeItem(target, itemEl) {
        function removeit(el) {
            if (el.submenu) {
                el.submenu.children('div.menu-item').each(function () {
                    removeit(this);
                });
                var shadow = el.submenu[0].shadow;
                if (shadow) shadow.remove();
                el.submenu.remove();
            }
            $(el).remove();
        }
        var menu = $(itemEl).parent();
        removeit(itemEl);
        setMenuSize(target, menu);
    }

    function setVisible(target, itemEl, visible) {
        var menu = $(itemEl).parent();
        if (visible) {
            $(itemEl).show();
        } else {
            $(itemEl).hide();
        }
        setMenuSize(target, menu);
    }

    function destroyMenu(target) {
        $(target).children('div.menu-item').each(function () {
            removeItem(target, this);
        });
        if (target.shadow) target.shadow.remove();
        $(target).remove();
    }

    $.fn.menu = function (options, param) {
        if (typeof options == 'string') {
            return $.fn.menu.methods[options](this, param);
        }

        options = options || {};
        return this.each(function () {
            var state = $.data(this, 'menu');
            if (state) {
                $.extend(state.options, options);
            } else {
                state = $.data(this, 'menu', {
                    options: $.extend({}, $.fn.menu.defaults, $.fn.menu.parseOptions(this), options)
                });
                init(this);
            }
            $(this).css({
                left: state.options.left,
                top: state.options.top
            });
        });
    };

    $.fn.menu.methods = {
        options: function (jq) {
            return $.data(jq[0], 'menu').options;
        },
        show: function (jq, pos) {
            return jq.each(function () {
                showMenu(this, pos);
            });
        },
        hide: function (jq) {
            return jq.each(function () {
                hideAll(this);
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                destroyMenu(this);
            });
        },
        /**
		 * set the menu item text
		 * param: {
		 * 	target: DOM object, indicate the menu item
		 * 	text: string, the new text
		 * }
		 */
        setText: function (jq, param) {
            return jq.each(function () {
                $(param.target).children('div.menu-text').html(param.text);
            });
        },
        /**
		 * set the menu icon class
		 * param: {
		 * 	target: DOM object, indicate the menu item
		 * 	iconCls: the menu item icon class
		 * }
		 */
        setIcon: function (jq, param) {
            return jq.each(function () {
                $(param.target).children('div.menu-icon').remove();
                if (param.iconCls) {
                    $('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(param.target);
                }
            });
        },
        /**
		 * get the menu item data that contains the following property:
		 * {
		 * 	target: DOM object, the menu item
		 *  id: the menu id
		 * 	text: the menu item text
		 * 	iconCls: the icon class
		 *  href: a remote address to redirect to
		 *  onclick: a function to be called when the item is clicked
		 * }
		 */
        getItem: function (jq, itemEl) {
            var t = $(itemEl);
            var item = {
                target: itemEl,
                id: t.attr('id'),
                text: $.trim(t.children('div.menu-text').html()),
                disabled: t.hasClass('menu-item-disabled'),
                //				href: t.attr('href'),
                //				name: t.attr('name'),
                name: itemEl.itemName,
                href: itemEl.itemHref,
                onclick: itemEl.onclick
            }
            var icon = t.children('div.menu-icon');
            if (icon.length) {
                var cc = [];
                var aa = icon.attr('class').split(' ');
                for (var i = 0; i < aa.length; i++) {
                    if (aa[i] != 'menu-icon') {
                        cc.push(aa[i]);
                    }
                }
                item.iconCls = cc.join(' ');
            }
            return item;
        },
        findItem: function (jq, text) {
            return findItem(jq[0], text);
        },
        /**
		 * append menu item, the param contains following properties:
		 * parent,id,text,iconCls,href,onclick
		 * when parent property is assigned, append menu item to it
		 */
        appendItem: function (jq, param) {
            return jq.each(function () {
                appendItem(this, param);
            });
        },
        removeItem: function (jq, itemEl) {
            return jq.each(function () {
                removeItem(this, itemEl);
            });
        },
        enableItem: function (jq, itemEl) {
            return jq.each(function () {
                setDisabled(this, itemEl, false);
            });
        },
        disableItem: function (jq, itemEl) {
            return jq.each(function () {
                setDisabled(this, itemEl, true);
            });
        },
        showItem: function (jq, itemEl) {
            return jq.each(function () {
                setVisible(this, itemEl, true);
            });
        },
        hideItem: function (jq, itemEl) {
            return jq.each(function () {
                setVisible(this, itemEl, false);
            });
        },
        resize: function (jq, menuEl) {
            return jq.each(function () {
                setMenuSize(this, $(menuEl));
            });
        }
    };

    $.fn.menu.parseOptions = function (target) {
        return $.extend({}, $.parser.parseOptions(target, [
		     { minWidth: 'number', itemHeight: 'number', duration: 'number', hideOnUnhover: 'boolean' },
		     { fit: 'boolean', inline: 'boolean', noline: 'boolean' }
        ]));
    };

    $.fn.menu.defaults = {
        zIndex: 110000,
        left: 0,
        top: 0,
        alignTo: null,
        align: 'left',
        minWidth: 120,
        itemHeight: 22,
        duration: 100,	// Defines duration time in milliseconds to hide when the mouse leaves the menu.
        hideOnUnhover: true,	// Automatically hides the menu when mouse exits it
        inline: false,	// true to stay inside its parent, false to go on top of all elements
        fit: false,
        noline: false,
        position: function (target, left, top) {
            return { left: left, top: top }
        },
        onShow: function () { },
        onHide: function () { },
        onClick: function (item) { }
    };
})(jQuery);



/****************************jquery.tree****************************/
(function($){
function _1(_2){
var _3=$(_2);
_3.addClass("tree");
return _3;
};
function _4(_5){
var _6=$.data(_5,"tree").options;
$(_5).unbind().bind("mouseover",function(e){
var tt=$(e.target);
var _7=tt.closest("div.tree-node");
if(!_7.length){
return;
}
_7.addClass("tree-node-hover");
if(tt.hasClass("tree-hit")){
if(tt.hasClass("tree-expanded")){
tt.addClass("tree-expanded-hover");
}else{
tt.addClass("tree-collapsed-hover");
}
}
e.stopPropagation();
}).bind("mouseout",function(e){
var tt=$(e.target);
var _8=tt.closest("div.tree-node");
if(!_8.length){
return;
}
_8.removeClass("tree-node-hover");
if(tt.hasClass("tree-hit")){
if(tt.hasClass("tree-expanded")){
tt.removeClass("tree-expanded-hover");
}else{
tt.removeClass("tree-collapsed-hover");
}
}
e.stopPropagation();
}).bind("click",function(e){
var tt=$(e.target);
var _9=tt.closest("div.tree-node");
if(!_9.length){
return;
}
if(tt.hasClass("tree-hit")){
_85(_5,_9[0]);
return false;
}else{
if(tt.hasClass("tree-checkbox")){
_34(_5,_9[0]);
return false;
}else{
_d9(_5,_9[0]);
_6.onClick.call(_5,_c(_5,_9[0]));
}
}
e.stopPropagation();
}).bind("dblclick",function(e){
var _a=$(e.target).closest("div.tree-node");
if(!_a.length){
return;
}
_d9(_5,_a[0]);
_6.onDblClick.call(_5,_c(_5,_a[0]));
e.stopPropagation();
}).bind("contextmenu",function(e){
var _b=$(e.target).closest("div.tree-node");
if(!_b.length){
return;
}
_6.onContextMenu.call(_5,e,_c(_5,_b[0]));
e.stopPropagation();
});
};
function _d(_e){
var _f=$.data(_e,"tree").options;
_f.dnd=false;
var _10=$(_e).find("div.tree-node");
_10.draggable("disable");
_10.css("cursor","pointer");
};
function _11(_12){
var _13=$.data(_12,"tree");
var _14=_13.options;
var _15=_13.tree;
_13.disabledNodes=[];
_14.dnd=true;
_15.find("div.tree-node").draggable({disabled:false,revert:true,cursor:"pointer",proxy:function(_16){
var p=$("<div class=\"tree-node-proxy\"></div>").appendTo("body");
p.html("<span class=\"tree-dnd-icon tree-dnd-no\">&nbsp;</span>"+$(_16).find(".tree-title").html());
p.hide();
return p;
},deltaX:15,deltaY:15,onBeforeDrag:function(e){
if(_14.onBeforeDrag.call(_12,_c(_12,this))==false){
return false;
}
if($(e.target).hasClass("tree-hit")||$(e.target).hasClass("tree-checkbox")){
return false;
}
if(e.which!=1){
return false;
}
var _17=$(this).find("span.tree-indent");
if(_17.length){
e.data.offsetWidth-=_17.length*_17.width();
}
},onStartDrag:function(e){
$(this).next("ul").find("div.tree-node").each(function(){
$(this).droppable("disable");
_13.disabledNodes.push(this);
});
$(this).draggable("proxy").css({left:-10000,top:-10000});
_14.onStartDrag.call(_12,_c(_12,this));
var _18=_c(_12,this);
if(_18.id==undefined){
_18.id="easyui_tree_node_id_temp";
_60(_12,_18);
}
_13.draggingNodeId=_18.id;
},onDrag:function(e){
var x1=e.pageX,y1=e.pageY,x2=e.data.startX,y2=e.data.startY;
var d=Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
if(d>3){
$(this).draggable("proxy").show();
}
this.pageY=e.pageY;
},onStopDrag:function(){
for(var i=0;i<_13.disabledNodes.length;i++){
$(_13.disabledNodes[i]).droppable("enable");
}
_13.disabledNodes=[];
var _19=_d0(_12,_13.draggingNodeId);
if(_19&&_19.id=="easyui_tree_node_id_temp"){
_19.id="";
_60(_12,_19);
}
_14.onStopDrag.call(_12,_19);
}}).droppable({accept:"div.tree-node",onDragEnter:function(e,_1a){
if(_14.onDragEnter.call(_12,this,_1b(_1a))==false){
_1c(_1a,false);
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
$(this).droppable("disable");
_13.disabledNodes.push(this);
}
},onDragOver:function(e,_1d){
if($(this).droppable("options").disabled){
return;
}
var _1e=_1d.pageY;
var top=$(this).offset().top;
var _1f=top+$(this).outerHeight();
_1c(_1d,true);
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
if(_1e>top+(_1f-top)/2){
if(_1f-_1e<5){
$(this).addClass("tree-node-bottom");
}else{
$(this).addClass("tree-node-append");
}
}else{
if(_1e-top<5){
$(this).addClass("tree-node-top");
}else{
$(this).addClass("tree-node-append");
}
}
if(_14.onDragOver.call(_12,this,_1b(_1d))==false){
_1c(_1d,false);
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
$(this).droppable("disable");
_13.disabledNodes.push(this);
}
},onDragLeave:function(e,_20){
_1c(_20,false);
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
_14.onDragLeave.call(_12,this,_1b(_20));
},onDrop:function(e,_21){
var _22=this;
var _23,_24;
if($(this).hasClass("tree-node-append")){
_23=_25;
_24="append";
}else{
_23=_26;
_24=$(this).hasClass("tree-node-top")?"top":"bottom";
}
if(_14.onBeforeDrop.call(_12,_22,_1b(_21),_24)==false){
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
return;
}
_23(_21,_22,_24);
$(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
}});
function _1b(_27,pop){
return $(_27).closest("ul.tree").tree(pop?"pop":"getData",_27);
};
function _1c(_28,_29){
var _2a=$(_28).draggable("proxy").find("span.tree-dnd-icon");
_2a.removeClass("tree-dnd-yes tree-dnd-no").addClass(_29?"tree-dnd-yes":"tree-dnd-no");
};
function _25(_2b,_2c){
if(_c(_12,_2c).state=="closed"){
_79(_12,_2c,function(){
_2d();
});
}else{
_2d();
}
function _2d(){
var _2e=_1b(_2b,true);
$(_12).tree("append",{parent:_2c,data:[_2e]});
_14.onDrop.call(_12,_2c,_2e,"append");
};
};
function _26(_2f,_30,_31){
var _32={};
if(_31=="top"){
_32.before=_30;
}else{
_32.after=_30;
}
var _33=_1b(_2f,true);
_32.data=_33;
$(_12).tree("insert",_32);
_14.onDrop.call(_12,_30,_33,_31);
};
};
function _34(_35,_36,_37,_38){
var _39=$.data(_35,"tree");
var _3a=_39.options;
if(!_3a.checkbox){
return;
}
var _3b=_c(_35,_36);
if(!_3b.checkState){
return;
}
var ck=$(_36).find(".tree-checkbox");
if(_37==undefined){
if(ck.hasClass("tree-checkbox1")){
_37=false;
}else{
if(ck.hasClass("tree-checkbox0")){
_37=true;
}else{
if(_3b._checked==undefined){
_3b._checked=$(_36).find(".tree-checkbox").hasClass("tree-checkbox1");
}
_37=!_3b._checked;
}
}
}
_3b._checked=_37;
if(_37){
if(ck.hasClass("tree-checkbox1")){
return;
}
}else{
if(ck.hasClass("tree-checkbox0")){
return;
}
}
if(!_38){
if(_3a.onBeforeCheck.call(_35,_3b,_37)==false){
return;
}
}
if(_3a.cascadeCheck){
_3c(_35,_3b,_37);
_3d(_35,_3b);
}else{
_3e(_35,_3b,_37?"1":"0");
}
if(!_38){
_3a.onCheck.call(_35,_3b,_37);
}
};
function _3c(_3f,_40,_41){
var _42=$.data(_3f,"tree").options;
var _43=_41?1:0;
_3e(_3f,_40,_43);
if(_42.deepCheck){
$.easyui.forEach(_40.children||[],true,function(n){
_3e(_3f,n,_43);
});
}else{
var _44=[];
if(_40.children&&_40.children.length){
_44.push(_40);
}
$.easyui.forEach(_40.children||[],true,function(n){
if(!n.hidden){
_3e(_3f,n,_43);
if(n.children&&n.children.length){
_44.push(n);
}
}
});
for(var i=_44.length-1;i>=0;i--){
var _45=_44[i];
_3e(_3f,_45,_46(_45));
}
}
};
function _3e(_47,_48,_49){
var _4a=$.data(_47,"tree").options;
if(!_48.checkState||_49==undefined){
return;
}
if(_48.hidden&&!_4a.deepCheck){
return;
}
var ck=$("#"+_48.domId).find(".tree-checkbox");
_48.checkState=["unchecked","checked","indeterminate"][_49];
_48.checked=(_48.checkState=="checked");
ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
ck.addClass("tree-checkbox"+_49);
};
function _3d(_4b,_4c){
var pd=_4d(_4b,$("#"+_4c.domId)[0]);
if(pd){
_3e(_4b,pd,_46(pd));
_3d(_4b,pd);
}
};
function _46(row){
var c0=0;
var c1=0;
var len=0;
$.easyui.forEach(row.children||[],false,function(r){
if(r.checkState){
len++;
if(r.checkState=="checked"){
c1++;
}else{
if(r.checkState=="unchecked"){
c0++;
}
}
}
});
if(len==0){
return undefined;
}
var _4e=0;
if(c0==len){
_4e=0;
}else{
if(c1==len){
_4e=1;
}else{
_4e=2;
}
}
return _4e;
};
function _4f(_50,_51){
var _52=$.data(_50,"tree").options;
if(!_52.checkbox){
return;
}
var _53=$(_51);
var ck=_53.find(".tree-checkbox");
var _54=_c(_50,_51);
if(_52.view.hasCheckbox(_50,_54)){
if(!ck.length){
_54.checkState=_54.checkState||"unchecked";
$("<span class=\"tree-checkbox\"></span>").insertBefore(_53.find(".tree-title"));
}
if(_54.checkState=="checked"){
_34(_50,_51,true,true);
}else{
if(_54.checkState=="unchecked"){
_34(_50,_51,false,true);
}else{
var _55=_46(_54);
if(_55===0){
_34(_50,_51,false,true);
}else{
if(_55===1){
_34(_50,_51,true,true);
}
}
}
}
}else{
ck.remove();
_54.checkState=undefined;
_54.checked=undefined;
_3d(_50,_54);
}
};
function _56(_57,ul,_58,_59,_5a){
var _5b=$.data(_57,"tree");
var _5c=_5b.options;
var _5d=$(ul).prevAll("div.tree-node:first");
_58=_5c.loadFilter.call(_57,_58,_5d[0]);
var _5e=_5f(_57,"domId",_5d.attr("id"));
if(!_59){
_5e?_5e.children=_58:_5b.data=_58;
$(ul).empty();
}else{
if(_5e){
_5e.children?_5e.children=_5e.children.concat(_58):_5e.children=_58;
}else{
_5b.data=_5b.data.concat(_58);
}
}
_5c.view.render.call(_5c.view,_57,ul,_58);
if(_5c.dnd){
_11(_57);
}
if(_5e){
_60(_57,_5e);
}
for(var i=0;i<_5b.tmpIds.length;i++){
_34(_57,$("#"+_5b.tmpIds[i])[0],true,true);
}
_5b.tmpIds=[];
setTimeout(function(){
_61(_57,_57);
},0);
if(!_5a){
_5c.onLoadSuccess.call(_57,_5e,_58);
}
};
function _61(_62,ul,_63){
var _64=$.data(_62,"tree").options;
if(_64.lines){
$(_62).addClass("tree-lines");
}else{
$(_62).removeClass("tree-lines");
return;
}
if(!_63){
_63=true;
$(_62).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
$(_62).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
var _65=$(_62).tree("getRoots");
if(_65.length>1){
$(_65[0].target).addClass("tree-root-first");
}else{
if(_65.length==1){
$(_65[0].target).addClass("tree-root-one");
}
}
}
$(ul).children("li").each(function(){
var _66=$(this).children("div.tree-node");
var ul=_66.next("ul");
if(ul.length){
if($(this).next().length){
_67(_66);
}
_61(_62,ul,_63);
}else{
_68(_66);
}
});
var _69=$(ul).children("li:last").children("div.tree-node").addClass("tree-node-last");
_69.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom");
function _68(_6a,_6b){
var _6c=_6a.find("span.tree-icon");
_6c.prev("span.tree-indent").addClass("tree-join");
};
function _67(_6d){
var _6e=_6d.find("span.tree-indent, span.tree-hit").length;
_6d.next().find("div.tree-node").each(function(){
$(this).children("span:eq("+(_6e-1)+")").addClass("tree-line");
});
};
};
function _6f(_70,ul,_71,_72){
var _73=$.data(_70,"tree").options;
_71=$.extend({},_73.queryParams,_71||{});
var _74=null;
if(_70!=ul){
var _75=$(ul).prev();
_74=_c(_70,_75[0]);
}
if(_73.onBeforeLoad.call(_70,_74,_71)==false){
return;
}
var _76=$(ul).prev().children("span.tree-folder");
_76.addClass("tree-loading");
var _77=_73.loader.call(_70,_71,function(_78){
_76.removeClass("tree-loading");
_56(_70,ul,_78);
if(_72){
_72();
}
},function(){
_76.removeClass("tree-loading");
_73.onLoadError.apply(_70,arguments);
if(_72){
_72();
}
});
if(_77==false){
_76.removeClass("tree-loading");
}
};
function _79(_7a,_7b,_7c){
var _7d=$.data(_7a,"tree").options;
var hit=$(_7b).children("span.tree-hit");
if(hit.length==0){
return;
}
if(hit.hasClass("tree-expanded")){
return;
}
var _7e=_c(_7a,_7b);
if(_7d.onBeforeExpand.call(_7a,_7e)==false){
return;
}
hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
hit.next().addClass("tree-folder-open");
var ul=$(_7b).next();
if(ul.length){
if(_7d.animate){
ul.slideDown("normal",function(){
_7e.state="open";
_7d.onExpand.call(_7a,_7e);
if(_7c){
_7c();
}
});
}else{
ul.css("display","block");
_7e.state="open";
_7d.onExpand.call(_7a,_7e);
if(_7c){
_7c();
}
}
}else{
var _7f=$("<ul style=\"display:none\"></ul>").insertAfter(_7b);
_6f(_7a,_7f[0],{id:_7e.id},function(){
if(_7f.is(":empty")){
_7f.remove();
}
if(_7d.animate){
_7f.slideDown("normal",function(){
_7e.state="open";
_7d.onExpand.call(_7a,_7e);
if(_7c){
_7c();
}
});
}else{
_7f.css("display","block");
_7e.state="open";
_7d.onExpand.call(_7a,_7e);
if(_7c){
_7c();
}
}
});
}
};
function _80(_81,_82){
var _83=$.data(_81,"tree").options;
var hit=$(_82).children("span.tree-hit");
if(hit.length==0){
return;
}
if(hit.hasClass("tree-collapsed")){
return;
}
var _84=_c(_81,_82);
if(_83.onBeforeCollapse.call(_81,_84)==false){
return;
}
hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
hit.next().removeClass("tree-folder-open");
var ul=$(_82).next();
if(_83.animate){
ul.slideUp("normal",function(){
_84.state="closed";
_83.onCollapse.call(_81,_84);
});
}else{
ul.css("display","none");
_84.state="closed";
_83.onCollapse.call(_81,_84);
}
};
function _85(_86,_87){
var hit=$(_87).children("span.tree-hit");
if(hit.length==0){
return;
}
if(hit.hasClass("tree-expanded")){
_80(_86,_87);
}else{
_79(_86,_87);
}
};
function _88(_89,_8a){
var _8b=_8c(_89,_8a);
if(_8a){
_8b.unshift(_c(_89,_8a));
}
for(var i=0;i<_8b.length;i++){
_79(_89,_8b[i].target);
}
};
function _8d(_8e,_8f){
var _90=[];
var p=_4d(_8e,_8f);
while(p){
_90.unshift(p);
p=_4d(_8e,p.target);
}
for(var i=0;i<_90.length;i++){
_79(_8e,_90[i].target);
}
};
function _91(_92,_93){
var c=$(_92).parent();
while(c[0].tagName!="BODY"&&c.css("overflow-y")!="auto"){
c=c.parent();
}
var n=$(_93);
var _94=n.offset().top;
if(c[0].tagName!="BODY"){
var _95=c.offset().top;
if(_94<_95){
c.scrollTop(c.scrollTop()+_94-_95);
}else{
if(_94+n.outerHeight()>_95+c.outerHeight()-18){
c.scrollTop(c.scrollTop()+_94+n.outerHeight()-_95-c.outerHeight()+18);
}
}
}else{
c.scrollTop(_94);
}
};
function _96(_97,_98){
var _99=_8c(_97,_98);
if(_98){
_99.unshift(_c(_97,_98));
}
for(var i=0;i<_99.length;i++){
_80(_97,_99[i].target);
}
};
function _9a(_9b,_9c){
var _9d=$(_9c.parent);
var _9e=_9c.data;
if(!_9e){
return;
}
_9e=$.isArray(_9e)?_9e:[_9e];
if(!_9e.length){
return;
}
var ul;
if(_9d.length==0){
ul=$(_9b);
}else{
if(_9f(_9b,_9d[0])){
var _a0=_9d.find("span.tree-icon");
_a0.removeClass("tree-file").addClass("tree-folder tree-folder-open");
var hit=$("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_a0);
if(hit.prev().length){
hit.prev().remove();
}
}
ul=_9d.next();
if(!ul.length){
ul=$("<ul></ul>").insertAfter(_9d);
}
}
_56(_9b,ul[0],_9e,true,true);
};
function _a1(_a2,_a3){
var ref=_a3.before||_a3.after;
var _a4=_4d(_a2,ref);
var _a5=_a3.data;
if(!_a5){
return;
}
_a5=$.isArray(_a5)?_a5:[_a5];
if(!_a5.length){
return;
}
_9a(_a2,{parent:(_a4?_a4.target:null),data:_a5});
var _a6=_a4?_a4.children:$(_a2).tree("getRoots");
for(var i=0;i<_a6.length;i++){
if(_a6[i].domId==$(ref).attr("id")){
for(var j=_a5.length-1;j>=0;j--){
_a6.splice((_a3.before?i:(i+1)),0,_a5[j]);
}
_a6.splice(_a6.length-_a5.length,_a5.length);
break;
}
}
var li=$();
for(var i=0;i<_a5.length;i++){
li=li.add($("#"+_a5[i].domId).parent());
}
if(_a3.before){
li.insertBefore($(ref).parent());
}else{
li.insertAfter($(ref).parent());
}
};
function _a7(_a8,_a9){
var _aa=del(_a9);
$(_a9).parent().remove();
if(_aa){
if(!_aa.children||!_aa.children.length){
var _ab=$(_aa.target);
_ab.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
_ab.find(".tree-hit").remove();
$("<span class=\"tree-indent\"></span>").prependTo(_ab);
_ab.next().remove();
}
_60(_a8,_aa);
}
_61(_a8,_a8);
function del(_ac){
var id=$(_ac).attr("id");
var _ad=_4d(_a8,_ac);
var cc=_ad?_ad.children:$.data(_a8,"tree").data;
for(var i=0;i<cc.length;i++){
if(cc[i].domId==id){
cc.splice(i,1);
break;
}
}
return _ad;
};
};
function _60(_ae,_af){
var _b0=$.data(_ae,"tree").options;
var _b1=$(_af.target);
var _b2=_c(_ae,_af.target);
if(_b2.iconCls){
_b1.find(".tree-icon").removeClass(_b2.iconCls);
}
$.extend(_b2,_af);
_b1.find(".tree-title").html(_b0.formatter.call(_ae,_b2));
if(_b2.iconCls){
_b1.find(".tree-icon").addClass(_b2.iconCls);
}
_4f(_ae,_af.target);
};
function _b3(_b4,_b5){
if(_b5){
var p=_4d(_b4,_b5);
while(p){
_b5=p.target;
p=_4d(_b4,_b5);
}
return _c(_b4,_b5);
}else{
var _b6=_b7(_b4);
return _b6.length?_b6[0]:null;
}
};
function _b7(_b8){
var _b9=$.data(_b8,"tree").data;
for(var i=0;i<_b9.length;i++){
_ba(_b9[i]);
}
return _b9;
};
function _8c(_bb,_bc){
var _bd=[];
var n=_c(_bb,_bc);
var _be=n?(n.children||[]):$.data(_bb,"tree").data;
$.easyui.forEach(_be,true,function(_bf){
_bd.push(_ba(_bf));
});
return _bd;
};
function _4d(_c0,_c1){
var p=$(_c1).closest("ul").prevAll("div.tree-node:first");
return _c(_c0,p[0]);
};
function _c2(_c3,_c4){
_c4=_c4||"checked";
if(!$.isArray(_c4)){
_c4=[_c4];
}
var _c5=[];
$.easyui.forEach($.data(_c3,"tree").data,true,function(n){
if(n.checkState&&$.easyui.indexOfArray(_c4,n.checkState)!=-1){
_c5.push(_ba(n));
}
});
return _c5;
};
function _c6(_c7){
var _c8=$(_c7).find("div.tree-node-selected");
return _c8.length?_c(_c7,_c8[0]):null;
};
function _c9(_ca,_cb){
var _cc=_c(_ca,_cb);
if(_cc&&_cc.children){
$.easyui.forEach(_cc.children,true,function(_cd){
_ba(_cd);
});
}
return _cc;
};
function _c(_ce,_cf){
return _5f(_ce,"domId",$(_cf).attr("id"));
};
function _d0(_d1,id){
return _5f(_d1,"id",id);
};
function _5f(_d2,_d3,_d4){
var _d5=$.data(_d2,"tree").data;
var _d6=null;
$.easyui.forEach(_d5,true,function(_d7){
if(_d7[_d3]==_d4){
_d6=_ba(_d7);
return false;
}
});
return _d6;
};
function _ba(_d8){
_d8.target=$("#"+_d8.domId)[0];
return _d8;
};
function _d9(_da,_db){
var _dc=$.data(_da,"tree").options;
var _dd=_c(_da,_db);
if(_dc.onBeforeSelect.call(_da,_dd)==false){
return;
}
$(_da).find("div.tree-node-selected").removeClass("tree-node-selected");
$(_db).addClass("tree-node-selected");
_dc.onSelect.call(_da,_dd);
};
function _9f(_de,_df){
return $(_df).children("span.tree-hit").length==0;
};
function _e0(_e1,_e2){
var _e3=$.data(_e1,"tree").options;
var _e4=_c(_e1,_e2);
if(_e3.onBeforeEdit.call(_e1,_e4)==false){
return;
}
$(_e2).css("position","relative");
var nt=$(_e2).find(".tree-title");
var _e5=nt.outerWidth();
nt.empty();
var _e6=$("<input class=\"tree-editor\">").appendTo(nt);
_e6.val(_e4.text).focus();
_e6.width(_e5+20);
_e6._outerHeight(18);
_e6.bind("click",function(e){
return false;
}).bind("mousedown",function(e){
e.stopPropagation();
}).bind("mousemove",function(e){
e.stopPropagation();
}).bind("keydown",function(e){
if(e.keyCode==13){
_e7(_e1,_e2);
return false;
}else{
if(e.keyCode==27){
_ed(_e1,_e2);
return false;
}
}
}).bind("blur",function(e){
e.stopPropagation();
_e7(_e1,_e2);
});
};
function _e7(_e8,_e9){
var _ea=$.data(_e8,"tree").options;
$(_e9).css("position","");
var _eb=$(_e9).find("input.tree-editor");
var val=_eb.val();
_eb.remove();
var _ec=_c(_e8,_e9);
_ec.text=val;
_60(_e8,_ec);
_ea.onAfterEdit.call(_e8,_ec);
};
function _ed(_ee,_ef){
var _f0=$.data(_ee,"tree").options;
$(_ef).css("position","");
$(_ef).find("input.tree-editor").remove();
var _f1=_c(_ee,_ef);
_60(_ee,_f1);
_f0.onCancelEdit.call(_ee,_f1);
};
function _f2(_f3,q){
var _f4=$.data(_f3,"tree");
var _f5=_f4.options;
var ids={};
$.easyui.forEach(_f4.data,true,function(_f6){
if(_f5.filter.call(_f3,q,_f6)){
$("#"+_f6.domId).removeClass("tree-node-hidden");
ids[_f6.domId]=1;
_f6.hidden=false;
}else{
$("#"+_f6.domId).addClass("tree-node-hidden");
_f6.hidden=true;
}
});
for(var id in ids){
_f7(id);
}
function _f7(_f8){
var p=$(_f3).tree("getParent",$("#"+_f8)[0]);
while(p){
$(p.target).removeClass("tree-node-hidden");
p.hidden=false;
p=$(_f3).tree("getParent",p.target);
}
};
};
$.fn.tree=function(_f9,_fa){
if(typeof _f9=="string"){
return $.fn.tree.methods[_f9](this,_fa);
}
var _f9=_f9||{};
return this.each(function(){
var _fb=$.data(this,"tree");
var _fc;
if(_fb){
_fc=$.extend(_fb.options,_f9);
_fb.options=_fc;
}else{
_fc=$.extend({},$.fn.tree.defaults,$.fn.tree.parseOptions(this),_f9);
$.data(this,"tree",{options:_fc,tree:_1(this),data:[],tmpIds:[]});
var _fd=$.fn.tree.parseData(this);
if(_fd.length){
_56(this,this,_fd);
}
}
_4(this);
if(_fc.data){
_56(this,this,$.extend(true,[],_fc.data));
}
_6f(this,this);
});
};
$.fn.tree.methods={options:function(jq){
return $.data(jq[0],"tree").options;
},loadData:function(jq,_fe){
return jq.each(function(){
_56(this,this,_fe);
});
},getNode:function(jq,_ff){
return _c(jq[0],_ff);
},getData:function(jq,_100){
return _c9(jq[0],_100);
},reload:function(jq,_101){
return jq.each(function(){
if(_101){
var node=$(_101);
var hit=node.children("span.tree-hit");
hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
node.next().remove();
_79(this,_101);
}else{
$(this).empty();
_6f(this,this);
}
});
},getRoot:function(jq,_102){
return _b3(jq[0],_102);
},getRoots:function(jq){
return _b7(jq[0]);
},getParent:function(jq,_103){
return _4d(jq[0],_103);
},getChildren:function(jq,_104){
return _8c(jq[0],_104);
},getChecked:function(jq,_105){
return _c2(jq[0],_105);
},getSelected:function(jq){
return _c6(jq[0]);
},isLeaf:function(jq,_106){
return _9f(jq[0],_106);
},find:function(jq,id){
return _d0(jq[0],id);
},select:function(jq,_107){
return jq.each(function(){
_d9(this,_107);
});
},check:function(jq,_108){
return jq.each(function(){
_34(this,_108,true);
});
},uncheck:function(jq,_109){
return jq.each(function(){
_34(this,_109,false);
});
},collapse:function(jq,_10a){
return jq.each(function(){
_80(this,_10a);
});
},expand:function(jq,_10b){
return jq.each(function(){
_79(this,_10b);
});
},collapseAll:function(jq,_10c){
return jq.each(function(){
_96(this,_10c);
});
},expandAll:function(jq,_10d){
return jq.each(function(){
_88(this,_10d);
});
},expandTo:function(jq,_10e){
return jq.each(function(){
_8d(this,_10e);
});
},scrollTo:function(jq,_10f){
return jq.each(function(){
_91(this,_10f);
});
},toggle:function(jq,_110){
return jq.each(function(){
_85(this,_110);
});
},append:function(jq,_111){
return jq.each(function(){
_9a(this,_111);
});
},insert:function(jq,_112){
return jq.each(function(){
_a1(this,_112);
});
},remove:function(jq,_113){
return jq.each(function(){
_a7(this,_113);
});
},pop:function(jq,_114){
var node=jq.tree("getData",_114);
jq.tree("remove",_114);
return node;
},update:function(jq,_115){
return jq.each(function(){
_60(this,$.extend({},_115,{checkState:_115.checked?"checked":(_115.checked===false?"unchecked":undefined)}));
});
},enableDnd:function(jq){
return jq.each(function(){
_11(this);
});
},disableDnd:function(jq){
return jq.each(function(){
_d(this);
});
},beginEdit:function(jq,_116){
return jq.each(function(){
_e0(this,_116);
});
},endEdit:function(jq,_117){
return jq.each(function(){
_e7(this,_117);
});
},cancelEdit:function(jq,_118){
return jq.each(function(){
_ed(this,_118);
});
},doFilter:function(jq,q){
return jq.each(function(){
_f2(this,q);
});
}};
$.fn.tree.parseOptions=function(_119){
var t=$(_119);
return $.extend({},$.parser.parseOptions(_119,["url","method",{checkbox:"boolean",cascadeCheck:"boolean",onlyLeafCheck:"boolean"},{animate:"boolean",lines:"boolean",dnd:"boolean"}]));
};
$.fn.tree.parseData=function(_11a){
var data=[];
_11b(data,$(_11a));
return data;
function _11b(aa,tree){
tree.children("li").each(function(){
var node=$(this);
var item=$.extend({},$.parser.parseOptions(this,["id","iconCls","state"]),{checked:(node.attr("checked")?true:undefined)});
item.text=node.children("span").html();
if(!item.text){
item.text=node.html();
}
var _11c=node.children("ul");
if(_11c.length){
item.children=[];
_11b(item.children,_11c);
}
aa.push(item);
});
};
};
var _11d=1;
var _11e={render:function(_11f,ul,data){
var _120=$.data(_11f,"tree");
var opts=_120.options;
var _121=$(ul).prev(".tree-node");
var _122=_121.length?$(_11f).tree("getNode",_121[0]):null;
var _123=_121.find("span.tree-indent, span.tree-hit").length;
var cc=_124.call(this,_123,data);
$(ul).append(cc.join(""));
function _124(_125,_126){
var cc=[];
for(var i=0;i<_126.length;i++){
var item=_126[i];
if(item.state!="open"&&item.state!="closed"){
item.state="open";
}
item.domId="_easyui_tree_"+_11d++;
cc.push("<li>");
cc.push("<div id=\""+item.domId+"\" class=\"tree-node\">");
for(var j=0;j<_125;j++){
cc.push("<span class=\"tree-indent\"></span>");
}
if(item.state=="closed"){
cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
cc.push("<span class=\"tree-icon tree-folder "+(item.iconCls?item.iconCls:"")+"\"></span>");
}else{
if(item.children&&item.children.length){
cc.push("<span class=\"tree-hit tree-expanded\"></span>");
cc.push("<span class=\"tree-icon tree-folder tree-folder-open "+(item.iconCls?item.iconCls:"")+"\"></span>");
}else{
cc.push("<span class=\"tree-indent\"></span>");
cc.push("<span class=\"tree-icon tree-file "+(item.iconCls?item.iconCls:"")+"\"></span>");
}
}
if(this.hasCheckbox(_11f,item)){
var flag=0;
if(_122&&_122.checkState=="checked"&&opts.cascadeCheck){
flag=1;
item.checked=true;
}else{
if(item.checked){
$.easyui.addArrayItem(_120.tmpIds,item.domId);
}
}
item.checkState=flag?"checked":"unchecked";
cc.push("<span class=\"tree-checkbox tree-checkbox"+flag+"\"></span>");
}else{
item.checkState=undefined;
item.checked=undefined;
}
cc.push("<span class=\"tree-title\">"+opts.formatter.call(_11f,item)+"</span>");
cc.push("</div>");
if(item.children&&item.children.length){
var tmp=_124.call(this,_125+1,item.children);
cc.push("<ul style=\"display:"+(item.state=="closed"?"none":"block")+"\">");
cc=cc.concat(tmp);
cc.push("</ul>");
}
cc.push("</li>");
}
return cc;
};
},hasCheckbox:function(_127,item){
var _128=$.data(_127,"tree");
var opts=_128.options;
if(opts.checkbox){
if($.isFunction(opts.checkbox)){
if(opts.checkbox.call(_127,item)){
return true;
}else{
return false;
}
}else{
if(opts.onlyLeafCheck){
if(item.state=="open"&&!(item.children&&item.children.length)){
return true;
}
}else{
return true;
}
}
}
return false;
}};
$.fn.tree.defaults={url:null,method:"post",animate:false,checkbox:false,cascadeCheck:true,onlyLeafCheck:false,lines:false,dnd:false,data:null,queryParams:{},formatter:function(node){
return node.text;
},filter:function(q,node){
var qq=[];
$.map($.isArray(q)?q:[q],function(q){
q=$.trim(q);
if(q){
qq.push(q);
}
});
for(var i=0;i<qq.length;i++){
var _129=node.text.toLowerCase().indexOf(qq[i].toLowerCase());
if(_129>=0){
return true;
}
}
return !qq.length;
},loader:function(_12a,_12b,_12c){
var opts=$(this).tree("options");
if(!opts.url){
return false;
}
$.ajax({type:opts.method,url:opts.url,data:_12a,dataType:"json",success:function(data){
_12b(data);
},error:function(){
_12c.apply(this,arguments);
}});
},loadFilter:function(data,_12d){
return data;
},view:_11e,onBeforeLoad:function(node,_12e){
},onLoadSuccess:function(node,data){
},onLoadError:function(){
},onClick:function(node){
},onDblClick:function(node){
},onBeforeExpand:function(node){
},onExpand:function(node){
},onBeforeCollapse:function(node){
},onCollapse:function(node){
},onBeforeCheck:function(node,_12f){
},onCheck:function(node,_130){
},onBeforeSelect:function(node){
},onSelect:function(node){
},onContextMenu:function(e,node){
},onBeforeDrag:function(node){
},onStartDrag:function(node){
},onStopDrag:function(node){
},onDragEnter:function(_131,_132){
},onDragOver:function(_133,_134){
},onDragLeave:function(_135,_136){
},onBeforeDrop:function(_137,_138,_139){
},onDrop:function(_13a,_13b,_13c){
},onBeforeEdit:function(node){
},onAfterEdit:function(node){
},onCancelEdit:function(node){
}};
})(jQuery);


/****************************jquery.linkbutton****************************/

(function ($) {
    function setSize(target, param) {
        var opts = $.data(target, 'linkbutton').options;
        if (param) {
            $.extend(opts, param);
        }
        if (opts.width || opts.height || opts.fit) {
            var btn = $(target);
            var parent = btn.parent();
            var isVisible = btn.is(':visible');
            if (!isVisible) {
                var spacer = $('<div style="display:none"></div>').insertBefore(target);
                var style = {
                    position: btn.css('position'),
                    display: btn.css('display'),
                    left: btn.css('left')
                };
                btn.appendTo('body');
                btn.css({
                    position: 'absolute',
                    display: 'inline-block',
                    left: -20000
                });
            }
            btn._size(opts, parent);
            var left = btn.find('.l-btn-left');
            left.css('margin-top', 0);
            left.css('margin-top', parseInt((btn.height() - left.height()) / 2) + 'px');
            if (!isVisible) {
                btn.insertAfter(spacer);
                btn.css(style);
                spacer.remove();
            }
        }
    }

    function createButton(target) {
        var opts = $.data(target, 'linkbutton').options;
        var t = $(target).empty();

        t.addClass('l-btn').removeClass('l-btn-plain l-btn-selected l-btn-plain-selected l-btn-outline');
        t.removeClass('l-btn-small l-btn-medium l-btn-large').addClass('l-btn-' + opts.size);
        if (opts.plain) { t.addClass('l-btn-plain') }
        if (opts.outline) { t.addClass('l-btn-outline') }
        if (opts.selected) {
            t.addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
        }
        t.attr('group', opts.group || '');
        t.attr('id', opts.id || '');

        var inner = $('<span class="l-btn-left"></span>').appendTo(t);
        if (opts.text) {
            $('<span class="l-btn-text"></span>').html(opts.text).appendTo(inner);
        } else {
            $('<span class="l-btn-text l-btn-empty">&nbsp;</span>').appendTo(inner);
        }
        if (opts.iconCls) {
            $('<span class="l-btn-icon">&nbsp;</span>').addClass(opts.iconCls).appendTo(inner);
            inner.addClass('l-btn-icon-' + opts.iconAlign);
        }

        t.unbind('.linkbutton').bind('focus.linkbutton', function () {
            if (!opts.disabled) {
                $(this).addClass('l-btn-focus');
            }
        }).bind('blur.linkbutton', function () {
            $(this).removeClass('l-btn-focus');
        }).bind('click.linkbutton', function () {
            if (!opts.disabled) {
                if (opts.toggle) {
                    if (opts.selected) {
                        $(this).linkbutton('unselect');
                    } else {
                        $(this).linkbutton('select');
                    }
                }
                opts.onClick.call(this);
            }
            //			return false;
        });
        //		if (opts.toggle && !opts.disabled){
        //			t.bind('click.linkbutton', function(){
        //				if (opts.selected){
        //					$(this).linkbutton('unselect');
        //				} else {
        //					$(this).linkbutton('select');
        //				}
        //			});
        //		}

        setSelected(target, opts.selected)
        setDisabled(target, opts.disabled);
    }

    function setSelected(target, selected) {
        var opts = $.data(target, 'linkbutton').options;
        if (selected) {
            if (opts.group) {
                $('a.l-btn[group="' + opts.group + '"]').each(function () {
                    var o = $(this).linkbutton('options');
                    if (o.toggle) {
                        $(this).removeClass('l-btn-selected l-btn-plain-selected');
                        o.selected = false;
                    }
                });
            }
            $(target).addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
            opts.selected = true;
        } else {
            if (!opts.group) {
                $(target).removeClass('l-btn-selected l-btn-plain-selected');
                opts.selected = false;
            }
        }
    }

    function setDisabled(target, disabled) {
        var state = $.data(target, 'linkbutton');
        var opts = state.options;
        $(target).removeClass('l-btn-disabled l-btn-plain-disabled');
        if (disabled) {
            opts.disabled = true;
            var href = $(target).attr('href');
            if (href) {
                state.href = href;
                $(target).attr('href', 'javascript:void(0)');
            }
            if (target.onclick) {
                state.onclick = target.onclick;
                target.onclick = null;
            }
            opts.plain ? $(target).addClass('l-btn-disabled l-btn-plain-disabled') : $(target).addClass('l-btn-disabled');
        } else {
            opts.disabled = false;
            if (state.href) {
                $(target).attr('href', state.href);
            }
            if (state.onclick) {
                target.onclick = state.onclick;
            }
        }
    }

    $.fn.linkbutton = function (options, param) {
        if (typeof options == 'string') {
            return $.fn.linkbutton.methods[options](this, param);
        }

        options = options || {};
        return this.each(function () {
            var state = $.data(this, 'linkbutton');
            if (state) {
                $.extend(state.options, options);
            } else {
                $.data(this, 'linkbutton', {
                    options: $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), options)
                });
                $(this).removeAttr('disabled');
                $(this).bind('_resize', function (e, force) {
                    if ($(this).hasClass('easyui-fluid') || force) {
                        setSize(this);
                    }
                    return false;
                });
            }

            createButton(this);
            setSize(this);
        });
    };

    $.fn.linkbutton.methods = {
        options: function (jq) {
            return $.data(jq[0], 'linkbutton').options;
        },
        resize: function (jq, param) {
            return jq.each(function () {
                setSize(this, param);
            });
        },
        enable: function (jq) {
            return jq.each(function () {
                setDisabled(this, false);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                setDisabled(this, true);
            });
        },
        select: function (jq) {
            return jq.each(function () {
                setSelected(this, true);
            });
        },
        unselect: function (jq) {
            return jq.each(function () {
                setSelected(this, false);
            });
        }
    };

    $.fn.linkbutton.parseOptions = function (target) {
        var t = $(target);
        return $.extend({}, $.parser.parseOptions(target,
			['id', 'iconCls', 'iconAlign', 'group', 'size', 'text', { plain: 'boolean', toggle: 'boolean', selected: 'boolean', outline: 'boolean' }]
		), {
		    disabled: (t.attr('disabled') ? true : undefined),
		    text: ($.trim(t.html()) || undefined),
		    iconCls: (t.attr('icon') || t.attr('iconCls'))
		});
    };

    $.fn.linkbutton.defaults = {
        id: null,
        disabled: false,
        toggle: false,
        selected: false,
        outline: false,
        group: null,
        plain: false,
        text: '',
        iconCls: null,
        iconAlign: 'left',
        size: 'small',	// small,large
        onClick: function () { }
    };

})(jQuery);


/****************************jquery.pagination****************************/

(function ($) {
    function _1(_2) {
        var _3 = $.data(_2, "pagination");
        var _4 = _3.options;
        var bb = _3.bb = {};
        var _5 = $(_2).addClass("pagination").html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr></tr></table>");
        var tr = _5.find("tr");
        var aa = $.extend([], _4.layout);
        if (!_4.showPageList) {
            _6(aa, "list");
        }
        if (!_4.showRefresh) {
            _6(aa, "refresh");
        }
        if (aa[0] == "sep") {
            aa.shift();
        }
        if (aa[aa.length - 1] == "sep") {
            aa.pop();
        }
        for (var _7 = 0; _7 < aa.length; _7++) {
            var _8 = aa[_7];
            if (_8 == "list") {
                var ps = $("<select class=\"pagination-page-list\"></select>");
                ps.bind("change", function () {
                    _4.pageSize = parseInt($(this).val());
                    _4.onChangePageSize.call(_2, _4.pageSize);
                    _10(_2, _4.pageNumber);
                });
                for (var i = 0; i < _4.pageList.length; i++) {
                    $("<option></option>").text(_4.pageList[i]).appendTo(ps);
                }
                $("<td></td>").append(ps).appendTo(tr);
            } else {
                if (_8 == "sep") {
                    $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
                } else {
                    if (_8 == "first") {
                        bb.first = _9("first");
                    } else {
                        if (_8 == "prev") {
                            bb.prev = _9("prev");
                        } else {
                            if (_8 == "next") {
                                bb.next = _9("next");
                            } else {
                                if (_8 == "last") {
                                    bb.last = _9("last");
                                } else {
                                    if (_8 == "manual") {
                                        $("<span style=\"padding-left:6px;\"></span>").html(_4.beforePageText).appendTo(tr).wrap("<td></td>");
                                        bb.num = $("<input class=\"pagination-num\" type=\"text\" value=\"1\" size=\"2\">").appendTo(tr).wrap("<td></td>");
                                        bb.num.unbind(".pagination").bind("keydown.pagination", function (e) {
                                            if (e.keyCode == 13) {
                                                var _a = parseInt($(this).val()) || 1;
                                                _10(_2, _a);
                                                return false;
                                            }
                                        });
                                        bb.after = $("<span style=\"padding-right:6px;\"></span>").appendTo(tr).wrap("<td></td>");
                                    } else {
                                        if (_8 == "refresh") {
                                            bb.refresh = _9("refresh");
                                        } else {
                                            if (_8 == "links") {
                                                $("<td class=\"pagination-links\"></td>").appendTo(tr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (_4.buttons) {
            $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
            if ($.isArray(_4.buttons)) {
                for (var i = 0; i < _4.buttons.length; i++) {
                    var _b = _4.buttons[i];
                    if (_b == "-") {
                        $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
                        a[0].onclick = eval(_b.handler || function () {
                        });
                        a.linkbutton($.extend({}, _b, { plain: true }));
                    }
                }
            } else {
                var td = $("<td></td>").appendTo(tr);
                $(_4.buttons).appendTo(td).show();
            }
        }
        $("<div class=\"pagination-info\"></div>").appendTo(_5);
        $("<div style=\"clear:both;\"></div>").appendTo(_5);
        function _9(_c) {
            var _d = _4.nav[_c];
            var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(tr);
            a.wrap("<td></td>");
            a.linkbutton({ iconCls: _d.iconCls, plain: true }).unbind(".pagination").bind("click.pagination", function () {
                _d.handler.call(_2);
            });
            return a;
        };
        function _6(aa, _e) {
            var _f = $.inArray(_e, aa);
            if (_f >= 0) {
                aa.splice(_f, 1);
            }
            return aa;
        };
    };
    function _10(_11, _12) {
        var _13 = $.data(_11, "pagination").options;
        _14(_11, { pageNumber: _12 });
        _13.onSelectPage.call(_11, _13.pageNumber, _13.pageSize);
    };
    function _14(_15, _16) {
        var _17 = $.data(_15, "pagination");
        var _18 = _17.options;
        var bb = _17.bb;
        $.extend(_18, _16 || {});
        var ps = $(_15).find("select.pagination-page-list");
        if (ps.length) {
            ps.val(_18.pageSize + "");
            _18.pageSize = parseInt(ps.val());
        }
        var _19 = Math.ceil(_18.total / _18.pageSize) || 1;
        if (_18.pageNumber < 1) {
            _18.pageNumber = 1;
        }
        if (_18.pageNumber > _19) {
            _18.pageNumber = _19;
        }
        if (_18.total == 0) {
            _18.pageNumber = 0;
            _19 = 0;
        }
        if (bb.num) {
            bb.num.val(_18.pageNumber);
        }
        if (bb.after) {
            bb.after.html(_18.afterPageText.replace(/{pages}/, _19));
        }
        var td = $(_15).find("td.pagination-links");
        if (td.length) {
            td.empty();
            var _1a = _18.pageNumber - Math.floor(_18.links / 2);
            if (_1a < 1) {
                _1a = 1;
            }
            var _1b = _1a + _18.links - 1;
            if (_1b > _19) {
                _1b = _19;
            }
            _1a = _1b - _18.links + 1;
            if (_1a < 1) {
                _1a = 1;
            }
            for (var i = _1a; i <= _1b; i++) {
                var a = $("<a class=\"pagination-link\" href=\"javascript:void(0)\"></a>").appendTo(td);
                a.linkbutton({ plain: true, text: i });
                if (i == _18.pageNumber) {
                    a.linkbutton("select");
                } else {
                    a.unbind(".pagination").bind("click.pagination", { pageNumber: i }, function (e) {
                        _10(_15, e.data.pageNumber);
                    });
                }
            }
        }
        var _1c = _18.displayMsg;
        _1c = _1c.replace(/{from}/, _18.total == 0 ? 0 : _18.pageSize * (_18.pageNumber - 1) + 1);
        _1c = _1c.replace(/{to}/, Math.min(_18.pageSize * (_18.pageNumber), _18.total));
        _1c = _1c.replace(/{total}/, _18.total);
        $(_15).find("div.pagination-info").html(_1c);
        if (bb.first) {
            bb.first.linkbutton({ disabled: ((!_18.total) || _18.pageNumber == 1) });
        }
        if (bb.prev) {
            bb.prev.linkbutton({ disabled: ((!_18.total) || _18.pageNumber == 1) });
        }
        if (bb.next) {
            bb.next.linkbutton({ disabled: (_18.pageNumber == _19) });
        }
        if (bb.last) {
            bb.last.linkbutton({ disabled: (_18.pageNumber == _19) });
        }
        _1d(_15, _18.loading);
    };
    function _1d(_1e, _1f) {
        var _20 = $.data(_1e, "pagination");
        var _21 = _20.options;
        _21.loading = _1f;
        if (_21.showRefresh && _20.bb.refresh) {
            _20.bb.refresh.linkbutton({ iconCls: (_21.loading ? "pagination-loading" : "pagination-load") });
        }
    };
    $.fn.pagination = function (_22, _23) {
        if (typeof _22 == "string") {
            return $.fn.pagination.methods[_22](this, _23);
        }
        _22 = _22 || {};
        return this.each(function () {
            var _24;
            var _25 = $.data(this, "pagination");
            if (_25) {
                _24 = $.extend(_25.options, _22);
            } else {
                _24 = $.extend({}, $.fn.pagination.defaults, $.fn.pagination.parseOptions(this), _22);
                $.data(this, "pagination", { options: _24 });
            }
            _1(this);
            _14(this);
        });
    };
    $.fn.pagination.methods = {
        options: function (jq) {
            return $.data(jq[0], "pagination").options;
        }, loading: function (jq) {
            return jq.each(function () {
                _1d(this, true);
            });
        }, loaded: function (jq) {
            return jq.each(function () {
                _1d(this, false);
            });
        }, refresh: function (jq, _26) {
            return jq.each(function () {
                _14(this, _26);
            });
        }, select: function (jq, _27) {
            return jq.each(function () {
                _10(this, _27);
            });
        }
    };
    $.fn.pagination.parseOptions = function (_28) {
        var t = $(_28);
        return $.extend({}, $.parser.parseOptions(_28, [{ total: "number", pageSize: "number", pageNumber: "number", links: "number" }, { loading: "boolean", showPageList: "boolean", showRefresh: "boolean" }]), { pageList: (t.attr("pageList") ? eval(t.attr("pageList")) : undefined) });
    };
    $.fn.pagination.defaults = {
        total: 1, pageSize: 10, pageNumber: 1, pageList: [10, 20, 30, 50], loading: false, buttons: null, showPageList: true, showRefresh: true, links: 10, layout: ["list", "sep", "first", "prev", "sep", "manual", "sep", "next", "last", "sep", "refresh"], onSelectPage: function (_29, _2a) {
        }, onBeforeRefresh: function (_2b, _2c) {
        }, onRefresh: function (_2d, _2e) {
        }, onChangePageSize: function (_2f) {
        }, beforePageText: "Page", afterPageText: "of {pages}", displayMsg: "Displaying {from} to {to} of {total} items", nav: {
            first: {
                iconCls: "pagination-first", handler: function () {
                    var _30 = $(this).pagination("options");
                    if (_30.pageNumber > 1) {
                        $(this).pagination("select", 1);
                    }
                }
            }, prev: {
                iconCls: "pagination-prev", handler: function () {
                    var _31 = $(this).pagination("options");
                    if (_31.pageNumber > 1) {
                        $(this).pagination("select", _31.pageNumber - 1);
                    }
                }
            }, next: {
                iconCls: "pagination-next", handler: function () {
                    var _32 = $(this).pagination("options");
                    var _33 = Math.ceil(_32.total / _32.pageSize);
                    if (_32.pageNumber < _33) {
                        $(this).pagination("select", _32.pageNumber + 1);
                    }
                }
            }, last: {
                iconCls: "pagination-last", handler: function () {
                    var _34 = $(this).pagination("options");
                    var _35 = Math.ceil(_34.total / _34.pageSize);
                    if (_34.pageNumber < _35) {
                        $(this).pagination("select", _35);
                    }
                }
            }, refresh: {
                iconCls: "pagination-refresh", handler: function () {
                    var _36 = $(this).pagination("options");
                    if (_36.onBeforeRefresh.call(this, _36.pageNumber, _36.pageSize) != false) {
                        $(this).pagination("select", _36.pageNumber);
                        _36.onRefresh.call(this, _36.pageNumber, _36.pageSize);
                    }
                }
            }
        }
    };
})(jQuery);


/****************************jquery.datagrid****************************/
(function ($) {
    var _1 = 0;
    function _2(a, o) {
        return $.easyui.indexOfArray(a, o);
    };
    function _3(a, o, id) {
        $.easyui.removeArrayItem(a, o, id);
    };
    function _4(a, o, r) {
        $.easyui.addArrayItem(a, o, r);
    };
    function _5(_6, aa) {
        return $.data(_6, "treegrid") ? aa.slice(1) : aa;
    };
    function _7(_8) {
        var _9 = $.data(_8, "datagrid");
        var _a = _9.options;
        var _b = _9.panel;
        var dc = _9.dc;
        var ss = null;
        if (_a.sharedStyleSheet) {
            ss = typeof _a.sharedStyleSheet == "boolean" ? "head" : _a.sharedStyleSheet;
        } else {
            ss = _b.closest("div.datagrid-view");
            if (!ss.length) {
                ss = dc.view;
            }
        }
        var cc = $(ss);
        var _c = $.data(cc[0], "ss");
        if (!_c) {
            _c = $.data(cc[0], "ss", { cache: {}, dirty: [] });
        }
        return {
            add: function (_d) {
                var ss = ["<style type=\"text/css\" easyui=\"true\">"];
                for (var i = 0; i < _d.length; i++) {
                    _c.cache[_d[i][0]] = { width: _d[i][1] };
                }
                var _e = 0;
                for (var s in _c.cache) {
                    var _f = _c.cache[s];
                    _f.index = _e++;
                    ss.push(s + "{width:" + _f.width + "}");
                }
                ss.push("</style>");
                $(ss.join("\n")).appendTo(cc);
                cc.children("style[easyui]:not(:last)").remove();
            }, getRule: function (_10) {
                var _11 = cc.children("style[easyui]:last")[0];
                var _12 = _11.styleSheet ? _11.styleSheet : (_11.sheet || document.styleSheets[document.styleSheets.length - 1]);
                var _13 = _12.cssRules || _12.rules;
                return _13[_10];
            }, set: function (_14, _15) {
                var _16 = _c.cache[_14];
                if (_16) {
                    _16.width = _15;
                    var _17 = this.getRule(_16.index);
                    if (_17) {
                        _17.style["width"] = _15;
                    }
                }
            }, remove: function (_18) {
                var tmp = [];
                for (var s in _c.cache) {
                    if (s.indexOf(_18) == -1) {
                        tmp.push([s, _c.cache[s].width]);
                    }
                }
                _c.cache = {};
                this.add(tmp);
            }, dirty: function (_19) {
                if (_19) {
                    _c.dirty.push(_19);
                }
            }, clean: function () {
                for (var i = 0; i < _c.dirty.length; i++) {
                    this.remove(_c.dirty[i]);
                }
                _c.dirty = [];
            }
        };
    };
    function _1a(_1b, _1c) {
        var _1d = $.data(_1b, "datagrid");
        var _1e = _1d.options;
        var _1f = _1d.panel;
        if (_1c) {
            $.extend(_1e, _1c);
        }
        if (_1e.fit == true) {
            var p = _1f.panel("panel").parent();
            _1e.width = p.width();
            _1e.height = p.height();
        }
        _1f.panel("resize", _1e);
    };
    function _20(_21) {
        var _22 = $.data(_21, "datagrid");
        var _23 = _22.options;
        var dc = _22.dc;
        var _24 = _22.panel;
        var _25 = _24.width();
        var _26 = _24.height();
        var _27 = dc.view;
        var _28 = dc.view1;
        var _29 = dc.view2;
        var _2a = _28.children("div.datagrid-header");
        var _2b = _29.children("div.datagrid-header");
        var _2c = _2a.find("table");
        var _2d = _2b.find("table");
        _27.width(_25);
        var _2e = _2a.children("div.datagrid-header-inner").show();
        _28.width(_2e.find("table").width());
        if (!_23.showHeader) {
            _2e.hide();
        }
        _29.width(_25 - _28._outerWidth());
        _28.children()._outerWidth(_28.width());
        _29.children()._outerWidth(_29.width());
        var all = _2a.add(_2b).add(_2c).add(_2d);
        all.css("height", "");
        var hh = Math.max(_2c.height(), _2d.height());
        all._outerHeight(hh);
        dc.body1.add(dc.body2).children("table.datagrid-btable-frozen").css({ position: "absolute", top: dc.header2._outerHeight() });
        var _2f = dc.body2.children("table.datagrid-btable-frozen")._outerHeight();
        var _30 = _2f + _2b._outerHeight() + _29.children(".datagrid-footer")._outerHeight();
        _24.children(":not(.datagrid-view,.datagrid-mask,.datagrid-mask-msg)").each(function () {
            _30 += $(this)._outerHeight();
        });
        var _31 = _24.outerHeight() - _24.height();
        var _32 = _24._size("minHeight") || "";
        var _33 = _24._size("maxHeight") || "";
        _28.add(_29).children("div.datagrid-body").css({ marginTop: _2f, height: (isNaN(parseInt(_23.height)) ? "" : (_26 - _30)), minHeight: (_32 ? _32 - _31 - _30 : ""), maxHeight: (_33 ? _33 - _31 - _30 : "") });
        _27.height(_29.height());
    };
    function _34(_35, _36, _37) {
        var _38 = $.data(_35, "datagrid").data.rows;
        var _39 = $.data(_35, "datagrid").options;
        var dc = $.data(_35, "datagrid").dc;
        if (!dc.body1.is(":empty") && (!_39.nowrap || _39.autoRowHeight || _37)) {
            if (_36 != undefined) {
                var tr1 = _39.finder.getTr(_35, _36, "body", 1);
                var tr2 = _39.finder.getTr(_35, _36, "body", 2);
                _3a(tr1, tr2);
            } else {
                var tr1 = _39.finder.getTr(_35, 0, "allbody", 1);
                var tr2 = _39.finder.getTr(_35, 0, "allbody", 2);
                _3a(tr1, tr2);
                if (_39.showFooter) {
                    var tr1 = _39.finder.getTr(_35, 0, "allfooter", 1);
                    var tr2 = _39.finder.getTr(_35, 0, "allfooter", 2);
                    _3a(tr1, tr2);
                }
            }
        }
        _20(_35);
        if (_39.height == "auto") {
            var _3b = dc.body1.parent();
            var _3c = dc.body2;
            var _3d = _3e(_3c);
            var _3f = _3d.height;
            if (_3d.width > _3c.width()) {
                _3f += 18;
            }
            _3f -= parseInt(_3c.css("marginTop")) || 0;
            _3b.height(_3f);
            _3c.height(_3f);
            dc.view.height(dc.view2.height());
        }
        dc.body2.triggerHandler("scroll");
        function _3a(_40, _41) {
            for (var i = 0; i < _41.length; i++) {
                var tr1 = $(_40[i]);
                var tr2 = $(_41[i]);
                tr1.css("height", "");
                tr2.css("height", "");
                var _42 = Math.max(tr1.height(), tr2.height());
                tr1.css("height", _42);
                tr2.css("height", _42);
            }
        };
        function _3e(cc) {
            var _43 = 0;
            var _44 = 0;
            $(cc).children().each(function () {
                var c = $(this);
                if (c.is(":visible")) {
                    _44 += c._outerHeight();
                    if (_43 < c._outerWidth()) {
                        _43 = c._outerWidth();
                    }
                }
            });
            return { width: _43, height: _44 };
        };
    };
    function _45(_46, _47) {
        var _48 = $.data(_46, "datagrid");
        var _49 = _48.options;
        var dc = _48.dc;
        if (!dc.body2.children("table.datagrid-btable-frozen").length) {
            dc.body1.add(dc.body2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
        }
        _4a(true);
        _4a(false);
        _20(_46);
        function _4a(_4b) {
            var _4c = _4b ? 1 : 2;
            var tr = _49.finder.getTr(_46, _47, "body", _4c);
            (_4b ? dc.body1 : dc.body2).children("table.datagrid-btable-frozen").append(tr);
        };
    };
    function _4d(_4e, _4f) {
        function _50() {
            var _51 = [];
            var _52 = [];
            $(_4e).children("thead").each(function () {
                var opt = $.parser.parseOptions(this, [{ frozen: "boolean" }]);
                $(this).find("tr").each(function () {
                    var _53 = [];
                    $(this).find("th").each(function () {
                        var th = $(this);
                        var col = $.extend({}, $.parser.parseOptions(this, ["id", "field", "align", "halign", "order", "width", { sortable: "boolean", checkbox: "boolean", resizable: "boolean", fixed: "boolean" }, { rowspan: "number", colspan: "number" }]), { title: (th.html() || undefined), hidden: (th.attr("hidden") ? true : undefined), formatter: (th.attr("formatter") ? eval(th.attr("formatter")) : undefined), styler: (th.attr("styler") ? eval(th.attr("styler")) : undefined), sorter: (th.attr("sorter") ? eval(th.attr("sorter")) : undefined) });
                        if (col.width && String(col.width).indexOf("%") == -1) {
                            col.width = parseInt(col.width);
                        }
                        if (th.attr("editor")) {
                            var s = $.trim(th.attr("editor"));
                            if (s.substr(0, 1) == "{") {
                                col.editor = eval("(" + s + ")");
                            } else {
                                col.editor = s;
                            }
                        }
                        _53.push(col);
                    });
                    opt.frozen ? _51.push(_53) : _52.push(_53);
                });
            });
            return [_51, _52];
        };
        var _54 = $("<div class=\"datagrid-wrap\">" + "<div class=\"datagrid-view\">" + "<div class=\"datagrid-view1\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\">" + "<div class=\"datagrid-body-inner\"></div>" + "</div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "<div class=\"datagrid-view2\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\"></div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "</div>" + "</div>").insertAfter(_4e);
        _54.panel({ doSize: false, cls: "datagrid" });
        $(_4e).addClass("datagrid-f").hide().appendTo(_54.children("div.datagrid-view"));
        var cc = _50();
        var _55 = _54.children("div.datagrid-view");
        var _56 = _55.children("div.datagrid-view1");
        var _57 = _55.children("div.datagrid-view2");
        return { panel: _54, frozenColumns: cc[0], columns: cc[1], dc: { view: _55, view1: _56, view2: _57, header1: _56.children("div.datagrid-header").children("div.datagrid-header-inner"), header2: _57.children("div.datagrid-header").children("div.datagrid-header-inner"), body1: _56.children("div.datagrid-body").children("div.datagrid-body-inner"), body2: _57.children("div.datagrid-body"), footer1: _56.children("div.datagrid-footer").children("div.datagrid-footer-inner"), footer2: _57.children("div.datagrid-footer").children("div.datagrid-footer-inner") } };
    };
    function _58(_59) {
        var _5a = $.data(_59, "datagrid");
        var _5b = _5a.options;
        var dc = _5a.dc;
        var _5c = _5a.panel;
        _5a.ss = $(_59).datagrid("createStyleSheet");
        _5c.panel($.extend({}, _5b, {
            id: null, doSize: false, onResize: function (_5d, _5e) {
                if ($.data(_59, "datagrid")) {
                    _20(_59);
                    $(_59).datagrid("fitColumns");
                    _5b.onResize.call(_5c, _5d, _5e);
                }
            }, onExpand: function () {
                if ($.data(_59, "datagrid")) {
                    $(_59).datagrid("fixRowHeight").datagrid("fitColumns");
                    _5b.onExpand.call(_5c);
                }
            }
        }));
        _5a.rowIdPrefix = "datagrid-row-r" + (++_1);
        _5a.cellClassPrefix = "datagrid-cell-c" + _1;
        _5f(dc.header1, _5b.frozenColumns, true);
        _5f(dc.header2, _5b.columns, false);
        _60();
        dc.header1.add(dc.header2).css("display", _5b.showHeader ? "block" : "none");
        dc.footer1.add(dc.footer2).css("display", _5b.showFooter ? "block" : "none");
        if (_5b.toolbar) {
            if ($.isArray(_5b.toolbar)) {
                $("div.datagrid-toolbar", _5c).remove();
                var tb = $("<div class=\"datagrid-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(_5c);
                var tr = tb.find("tr");
                for (var i = 0; i < _5b.toolbar.length; i++) {
                    var btn = _5b.toolbar[i];
                    if (btn == "-") {
                        $("<td><div class=\"datagrid-btn-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var _61 = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
                        _61[0].onclick = eval(btn.handler || function () {
                        });
                        _61.linkbutton($.extend({}, btn, { plain: true }));
                    }
                }
            } else {
                $(_5b.toolbar).addClass("datagrid-toolbar").prependTo(_5c);
                $(_5b.toolbar).show();
            }
        } else {
            $("div.datagrid-toolbar", _5c).remove();
        }
        $("div.datagrid-pager", _5c).remove();
        if (_5b.pagination) {
            var _62 = $("<div class=\"datagrid-pager\"></div>");
            if (_5b.pagePosition == "bottom") {
                _62.appendTo(_5c);
            } else {
                if (_5b.pagePosition == "top") {
                    _62.addClass("datagrid-pager-top").prependTo(_5c);
                } else {
                    var _63 = $("<div class=\"datagrid-pager datagrid-pager-top\"></div>").prependTo(_5c);
                    _62.appendTo(_5c);
                    _62 = _62.add(_63);
                }
            }
            _62.pagination({
                total: (_5b.pageNumber * _5b.pageSize), pageNumber: _5b.pageNumber, pageSize: _5b.pageSize, pageList: _5b.pageList, onSelectPage: function (_64, _65) {
                    _5b.pageNumber = _64 || 1;
                    _5b.pageSize = _65;
                    _62.pagination("refresh", { pageNumber: _64, pageSize: _65 });
                    _af(_59);
                }
            });
            _5b.pageSize = _62.pagination("options").pageSize;
        }
        function _5f(_66, _67, _68) {
            if (!_67) {
                return;
            }
            $(_66).show();
            $(_66).empty();
            var _69 = [];
            var _6a = [];
            var _6b = [];
            if (_5b.sortName) {
                _69 = _5b.sortName.split(",");
                _6a = _5b.sortOrder.split(",");
            }
            var t = $("<table class=\"datagrid-htable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody></tbody></table>").appendTo(_66);
            for (var i = 0; i < _67.length; i++) {
                var tr = $("<tr class=\"datagrid-header-row\"></tr>").appendTo($("tbody", t));
                var _6c = _67[i];
                for (var j = 0; j < _6c.length; j++) {
                    var col = _6c[j];
                    var _6d = "";
                    if (col.rowspan) {
                        _6d += "rowspan=\"" + col.rowspan + "\" ";
                    }
                    if (col.colspan) {
                        _6d += "colspan=\"" + col.colspan + "\" ";
                        if (!col.id) {
                            col.id = ["datagrid-td-group" + _1, i, j].join("-");
                        }
                    }
                    if (col.id) {
                        _6d += "id=\"" + col.id + "\"";
                    }
                    var td = $("<td " + _6d + "></td>").appendTo(tr);
                    if (col.checkbox) {
                        td.attr("field", col.field);
                        $("<div class=\"datagrid-header-check\"></div>").html("<input type=\"checkbox\"/>").appendTo(td);
                    } else {
                        if (col.field) {
                            td.attr("field", col.field);
                            td.append("<div class=\"datagrid-cell\"><span></span><span class=\"datagrid-sort-icon\"></span></div>");
                            td.find("span:first").html(col.title);
                            var _6e = td.find("div.datagrid-cell");
                            var pos = _2(_69, col.field);
                            if (pos >= 0) {
                                _6e.addClass("datagrid-sort-" + _6a[pos]);
                            }
                            if (col.sortable) {
                                _6e.addClass("datagrid-sort");
                            }
                            if (col.resizable == false) {
                                _6e.attr("resizable", "false");
                            }
                            if (col.width) {
                                var _6f = $.parser.parseValue("width", col.width, dc.view, _5b.scrollbarSize);
                                _6e._outerWidth(_6f - 1);
                                col.boxWidth = parseInt(_6e[0].style.width);
                                col.deltaWidth = _6f - col.boxWidth;
                            } else {
                                col.auto = true;
                            }
                            _6e.css("text-align", (col.halign || col.align || ""));
                            col.cellClass = _5a.cellClassPrefix + "-" + col.field.replace(/[\.|\s]/g, "-");
                            _6e.addClass(col.cellClass).css("width", "");
                        } else {
                            $("<div class=\"datagrid-cell-group\"></div>").html(col.title).appendTo(td);
                        }
                    }
                    if (col.hidden) {
                        td.hide();
                        _6b.push(col.field);
                    }
                }
            }
            if (_68 && _5b.rownumbers) {
                var td = $("<td rowspan=\"" + _5b.frozenColumns.length + "\"><div class=\"datagrid-header-rownumber\"></div></td>");
                if ($("tr", t).length == 0) {
                    td.wrap("<tr class=\"datagrid-header-row\"></tr>").parent().appendTo($("tbody", t));
                } else {
                    td.prependTo($("tr:first", t));
                }
            }
            for (var i = 0; i < _6b.length; i++) {
                _b1(_59, _6b[i], -1);
            }
        };
        function _60() {
            var _70 = [];
            var _71 = _72(_59, true).concat(_72(_59));
            for (var i = 0; i < _71.length; i++) {
                var col = _73(_59, _71[i]);
                if (col && !col.checkbox) {
                    _70.push(["." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto"]);
                }
            }
            _5a.ss.add(_70);
            _5a.ss.dirty(_5a.cellSelectorPrefix);
            _5a.cellSelectorPrefix = "." + _5a.cellClassPrefix;
        };
    };
    function _74(_75) {
        var _76 = $.data(_75, "datagrid");
        var _77 = _76.panel;
        var _78 = _76.options;
        var dc = _76.dc;
        var _79 = dc.header1.add(dc.header2);
        _79.find("input[type=checkbox]").unbind(".datagrid").bind("click.datagrid", function (e) {
            if (_78.singleSelect && _78.selectOnCheck) {
                return false;
            }
            if ($(this).is(":checked")) {
                _130(_75);
            } else {
                _136(_75);
            }
            e.stopPropagation();
        });
        var _7a = _79.find("div.datagrid-cell");
        _7a.closest("td").unbind(".datagrid").bind("mouseenter.datagrid", function () {
            if (_76.resizing) {
                return;
            }
            $(this).addClass("datagrid-header-over");
        }).bind("mouseleave.datagrid", function () {
            $(this).removeClass("datagrid-header-over");
        }).bind("contextmenu.datagrid", function (e) {
            var _7b = $(this).attr("field");
            _78.onHeaderContextMenu.call(_75, e, _7b);
        });
        _7a.unbind(".datagrid").bind("click.datagrid", function (e) {
            var p1 = $(this).offset().left + 5;
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
            if (e.pageX < p2 && e.pageX > p1) {
                _a3(_75, $(this).parent().attr("field"));
            }
        }).bind("dblclick.datagrid", function (e) {
            var p1 = $(this).offset().left + 5;
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
            var _7c = _78.resizeHandle == "right" ? (e.pageX > p2) : (_78.resizeHandle == "left" ? (e.pageX < p1) : (e.pageX < p1 || e.pageX > p2));
            if (_7c) {
                var _7d = $(this).parent().attr("field");
                var col = _73(_75, _7d);
                if (col.resizable == false) {
                    return;
                }
                $(_75).datagrid("autoSizeColumn", _7d);
                col.auto = false;
            }
        });
        var _7e = _78.resizeHandle == "right" ? "e" : (_78.resizeHandle == "left" ? "w" : "e,w");
        _7a.each(function () {
            $(this).resizable({
                handles: _7e, disabled: ($(this).attr("resizable") ? $(this).attr("resizable") == "false" : false), minWidth: 25, onStartResize: function (e) {
                    _76.resizing = true;
                    _79.css("cursor", $("body").css("cursor"));
                    if (!_76.proxy) {
                        _76.proxy = $("<div class=\"datagrid-resize-proxy\"></div>").appendTo(dc.view);
                    }
                    _76.proxy.css({ left: e.pageX - $(_77).offset().left - 1, display: "none" });
                    setTimeout(function () {
                        if (_76.proxy) {
                            _76.proxy.show();
                        }
                    }, 500);
                }, onResize: function (e) {
                    _76.proxy.css({ left: e.pageX - $(_77).offset().left - 1, display: "block" });
                    return false;
                }, onStopResize: function (e) {
                    _79.css("cursor", "");
                    $(this).css("height", "");
                    var _7f = $(this).parent().attr("field");
                    var col = _73(_75, _7f);
                    col.width = $(this)._outerWidth();
                    col.boxWidth = col.width - col.deltaWidth;
                    col.auto = undefined;
                    $(this).css("width", "");
                    $(_75).datagrid("fixColumnSize", _7f);
                    _76.proxy.remove();
                    _76.proxy = null;
                    if ($(this).parents("div:first.datagrid-header").parent().hasClass("datagrid-view1")) {
                        _20(_75);
                    }
                    $(_75).datagrid("fitColumns");
                    _78.onResizeColumn.call(_75, _7f, col.width);
                    setTimeout(function () {
                        _76.resizing = false;
                    }, 0);
                }
            });
        });
        var bb = dc.body1.add(dc.body2);
        bb.unbind();
        for (var _80 in _78.rowEvents) {
            bb.bind(_80, _78.rowEvents[_80]);
        }
        dc.body1.bind("mousewheel DOMMouseScroll", function (e) {
            e.preventDefault();
            var e1 = e.originalEvent || window.event;
            var _81 = e1.wheelDelta || e1.detail * (-1);
            if ("deltaY" in e1) {
                _81 = e1.deltaY * -1;
            }
            var dg = $(e.target).closest("div.datagrid-view").children(".datagrid-f");
            var dc = dg.data("datagrid").dc;
            dc.body2.scrollTop(dc.body2.scrollTop() - _81);
        });
        dc.body2.bind("scroll", function () {
            var b1 = dc.view1.children("div.datagrid-body");
            b1.scrollTop($(this).scrollTop());
            var c1 = dc.body1.children(":first");
            var c2 = dc.body2.children(":first");
            if (c1.length && c2.length) {
                var _82 = c1.offset().top;
                var _83 = c2.offset().top;
                if (_82 != _83) {
                    b1.scrollTop(b1.scrollTop() + _82 - _83);
                }
            }
            dc.view2.children("div.datagrid-header,div.datagrid-footer")._scrollLeft($(this)._scrollLeft());
            dc.body2.children("table.datagrid-btable-frozen").css("left", -$(this)._scrollLeft());
        });
    };
    function _84(_85) {
        return function (e) {
            var tr = _86(e.target);
            if (!tr) {
                return;
            }
            var _87 = _88(tr);
            if ($.data(_87, "datagrid").resizing) {
                return;
            }
            var _89 = _8a(tr);
            if (_85) {
                _8b(_87, _89);
            } else {
                var _8c = $.data(_87, "datagrid").options;
                _8c.finder.getTr(_87, _89).removeClass("datagrid-row-over");
            }
        };
    };
    function _8d(e) {
        var tr = _86(e.target);
        if (!tr) {
            return;
        }
        var _8e = _88(tr);
        var _8f = $.data(_8e, "datagrid").options;
        var _90 = _8a(tr);
        var tt = $(e.target);
        if (tt.parent().hasClass("datagrid-cell-check")) {
            if (_8f.singleSelect && _8f.selectOnCheck) {
                tt._propAttr("checked", !tt.is(":checked"));
                _91(_8e, _90);
            } else {
                if (tt.is(":checked")) {
                    tt._propAttr("checked", false);
                    _91(_8e, _90);
                } else {
                    tt._propAttr("checked", true);
                    _92(_8e, _90);
                }
            }
        } else {
            var row = _8f.finder.getRow(_8e, _90);
            var td = tt.closest("td[field]", tr);
            if (td.length) {
                var _93 = td.attr("field");
                _8f.onClickCell.call(_8e, _90, _93, row[_93]);
            }
            if (_8f.singleSelect == true) {
                _94(_8e, _90);
            } else {
                if (_8f.ctrlSelect) {
                    if (e.ctrlKey) {
                        if (tr.hasClass("datagrid-row-selected")) {
                            _95(_8e, _90);
                        } else {
                            _94(_8e, _90);
                        }
                    } else {
                        if (e.shiftKey) {
                            $(_8e).datagrid("clearSelections");
                            var _96 = Math.min(_8f.lastSelectedIndex || 0, _90);
                            var _97 = Math.max(_8f.lastSelectedIndex || 0, _90);
                            for (var i = _96; i <= _97; i++) {
                                _94(_8e, i);
                            }
                        } else {
                            $(_8e).datagrid("clearSelections");
                            _94(_8e, _90);
                            _8f.lastSelectedIndex = _90;
                        }
                    }
                } else {
                    if (tr.hasClass("datagrid-row-selected")) {
                        _95(_8e, _90);
                    } else {
                        _94(_8e, _90);
                    }
                }
            }
            _8f.onClickRow.apply(_8e, _5(_8e, [_90, row]));
        }
    };
    function _98(e) {
        var tr = _86(e.target);
        if (!tr) {
            return;
        }
        var _99 = _88(tr);
        var _9a = $.data(_99, "datagrid").options;
        var _9b = _8a(tr);
        var row = _9a.finder.getRow(_99, _9b);
        var td = $(e.target).closest("td[field]", tr);
        if (td.length) {
            var _9c = td.attr("field");
            _9a.onDblClickCell.call(_99, _9b, _9c, row[_9c]);
        }
        _9a.onDblClickRow.apply(_99, _5(_99, [_9b, row]));
    };
    function _9d(e) {
        var tr = _86(e.target);
        if (tr) {
            var _9e = _88(tr);
            var _9f = $.data(_9e, "datagrid").options;
            var _a0 = _8a(tr);
            var row = _9f.finder.getRow(_9e, _a0);
            _9f.onRowContextMenu.call(_9e, e, _a0, row);
        } else {
            var _a1 = _86(e.target, ".datagrid-body");
            if (_a1) {
                var _9e = _88(_a1);
                var _9f = $.data(_9e, "datagrid").options;
                _9f.onRowContextMenu.call(_9e, e, -1, null);
            }
        }
    };
    function _88(t) {
        return $(t).closest("div.datagrid-view").children(".datagrid-f")[0];
    };
    function _86(t, _a2) {
        var tr = $(t).closest(_a2 || "tr.datagrid-row");
        if (tr.length && tr.parent().length) {
            return tr;
        } else {
            return undefined;
        }
    };
    function _8a(tr) {
        if (tr.attr("datagrid-row-index")) {
            return parseInt(tr.attr("datagrid-row-index"));
        } else {
            return tr.attr("node-id");
        }
    };
    function _a3(_a4, _a5) {
        var _a6 = $.data(_a4, "datagrid");
        var _a7 = _a6.options;
        _a5 = _a5 || {};
        var _a8 = { sortName: _a7.sortName, sortOrder: _a7.sortOrder };
        if (typeof _a5 == "object") {
            $.extend(_a8, _a5);
        }
        var _a9 = [];
        var _aa = [];
        if (_a8.sortName) {
            _a9 = _a8.sortName.split(",");
            _aa = _a8.sortOrder.split(",");
        }
        if (typeof _a5 == "string") {
            var _ab = _a5;
            var col = _73(_a4, _ab);
            if (!col.sortable || _a6.resizing) {
                return;
            }
            var _ac = col.order || "asc";
            var pos = _2(_a9, _ab);
            if (pos >= 0) {
                var _ad = _aa[pos] == "asc" ? "desc" : "asc";
                if (_a7.multiSort && _ad == _ac) {
                    _a9.splice(pos, 1);
                    _aa.splice(pos, 1);
                } else {
                    _aa[pos] = _ad;
                }
            } else {
                if (_a7.multiSort) {
                    _a9.push(_ab);
                    _aa.push(_ac);
                } else {
                    _a9 = [_ab];
                    _aa = [_ac];
                }
            }
            _a8.sortName = _a9.join(",");
            _a8.sortOrder = _aa.join(",");
        }
        if (_a7.onBeforeSortColumn.call(_a4, _a8.sortName, _a8.sortOrder) == false) {
            return;
        }
        $.extend(_a7, _a8);
        var dc = _a6.dc;
        var _ae = dc.header1.add(dc.header2);
        _ae.find("div.datagrid-cell").removeClass("datagrid-sort-asc datagrid-sort-desc");
        for (var i = 0; i < _a9.length; i++) {
            var col = _73(_a4, _a9[i]);
            _ae.find("div." + col.cellClass).addClass("datagrid-sort-" + _aa[i]);
        }
        if (_a7.remoteSort) {
            _af(_a4);
        } else {
            _b0(_a4, $(_a4).datagrid("getData"));
        }
        _a7.onSortColumn.call(_a4, _a7.sortName, _a7.sortOrder);
    };
    function _b1(_b2, _b3, _b4) {
        _b5(true);
        _b5(false);
        function _b5(_b6) {
            var aa = _b7(_b2, _b6);
            if (aa.length) {
                var _b8 = aa[aa.length - 1];
                var _b9 = _2(_b8, _b3);
                if (_b9 >= 0) {
                    for (var _ba = 0; _ba < aa.length - 1; _ba++) {
                        var td = $("#" + aa[_ba][_b9]);
                        var _bb = parseInt(td.attr("colspan") || 1) + (_b4 || 0);
                        td.attr("colspan", _bb);
                        if (_bb) {
                            td.show();
                        } else {
                            td.hide();
                        }
                    }
                }
            }
        };
    };
    function _bc(_bd) {
        var _be = $.data(_bd, "datagrid");
        var _bf = _be.options;
        var dc = _be.dc;
        var _c0 = dc.view2.children("div.datagrid-header");
        dc.body2.css("overflow-x", "");
        _c1();
        _c2();
        _c3();
        _c1(true);
        if (_c0.width() >= _c0.find("table").width()) {
            dc.body2.css("overflow-x", "hidden");
        }
        function _c3() {
            if (!_bf.fitColumns) {
                return;
            }
            if (!_be.leftWidth) {
                _be.leftWidth = 0;
            }
            var _c4 = 0;
            var cc = [];
            var _c5 = _72(_bd, false);
            for (var i = 0; i < _c5.length; i++) {
                var col = _73(_bd, _c5[i]);
                if (_c6(col)) {
                    _c4 += col.width;
                    cc.push({ field: col.field, col: col, addingWidth: 0 });
                }
            }
            if (!_c4) {
                return;
            }
            cc[cc.length - 1].addingWidth -= _be.leftWidth;
            var _c7 = _c0.children("div.datagrid-header-inner").show();
            var _c8 = _c0.width() - _c0.find("table").width() - _bf.scrollbarSize + _be.leftWidth;
            var _c9 = _c8 / _c4;
            if (!_bf.showHeader) {
                _c7.hide();
            }
            for (var i = 0; i < cc.length; i++) {
                var c = cc[i];
                var _ca = parseInt(c.col.width * _c9);
                c.addingWidth += _ca;
                _c8 -= _ca;
            }
            cc[cc.length - 1].addingWidth += _c8;
            for (var i = 0; i < cc.length; i++) {
                var c = cc[i];
                if (c.col.boxWidth + c.addingWidth > 0) {
                    c.col.boxWidth += c.addingWidth;
                    c.col.width += c.addingWidth;
                }
            }
            _be.leftWidth = _c8;
            $(_bd).datagrid("fixColumnSize");
        };
        function _c2() {
            var _cb = false;
            var _cc = _72(_bd, true).concat(_72(_bd, false));
            $.map(_cc, function (_cd) {
                var col = _73(_bd, _cd);
                if (String(col.width || "").indexOf("%") >= 0) {
                    var _ce = $.parser.parseValue("width", col.width, dc.view, _bf.scrollbarSize) - col.deltaWidth;
                    if (_ce > 0) {
                        col.boxWidth = _ce;
                        _cb = true;
                    }
                }
            });
            if (_cb) {
                $(_bd).datagrid("fixColumnSize");
            }
        };
        function _c1(fit) {
            var _cf = dc.header1.add(dc.header2).find(".datagrid-cell-group");
            if (_cf.length) {
                _cf.each(function () {
                    $(this)._outerWidth(fit ? $(this).parent().width() : 10);
                });
                if (fit) {
                    _20(_bd);
                }
            }
        };
        function _c6(col) {
            if (String(col.width || "").indexOf("%") >= 0) {
                return false;
            }
            if (!col.hidden && !col.checkbox && !col.auto && !col.fixed) {
                return true;
            }
        };
    };
    function _d0(_d1, _d2) {
        var _d3 = $.data(_d1, "datagrid");
        var _d4 = _d3.options;
        var dc = _d3.dc;
        var tmp = $("<div class=\"datagrid-cell\" style=\"position:absolute;left:-9999px\"></div>").appendTo("body");
        if (_d2) {
            _1a(_d2);
            $(_d1).datagrid("fitColumns");
        } else {
            var _d5 = false;
            var _d6 = _72(_d1, true).concat(_72(_d1, false));
            for (var i = 0; i < _d6.length; i++) {
                var _d2 = _d6[i];
                var col = _73(_d1, _d2);
                if (col.auto) {
                    _1a(_d2);
                    _d5 = true;
                }
            }
            if (_d5) {
                $(_d1).datagrid("fitColumns");
            }
        }
        tmp.remove();
        function _1a(_d7) {
            var _d8 = dc.view.find("div.datagrid-header td[field=\"" + _d7 + "\"] div.datagrid-cell");
            _d8.css("width", "");
            var col = $(_d1).datagrid("getColumnOption", _d7);
            col.width = undefined;
            col.boxWidth = undefined;
            col.auto = true;
            $(_d1).datagrid("fixColumnSize", _d7);
            var _d9 = Math.max(_da("header"), _da("allbody"), _da("allfooter")) + 1;
            _d8._outerWidth(_d9 - 1);
            col.width = _d9;
            col.boxWidth = parseInt(_d8[0].style.width);
            col.deltaWidth = _d9 - col.boxWidth;
            _d8.css("width", "");
            $(_d1).datagrid("fixColumnSize", _d7);
            _d4.onResizeColumn.call(_d1, _d7, col.width);
            function _da(_db) {
                var _dc = 0;
                if (_db == "header") {
                    _dc = _dd(_d8);
                } else {
                    _d4.finder.getTr(_d1, 0, _db).find("td[field=\"" + _d7 + "\"] div.datagrid-cell").each(function () {
                        var w = _dd($(this));
                        if (_dc < w) {
                            _dc = w;
                        }
                    });
                }
                return _dc;
                function _dd(_de) {
                    return _de.is(":visible") ? _de._outerWidth() : tmp.html(_de.html())._outerWidth();
                };
            };
        };
    };
    function _df(_e0, _e1) {
        var _e2 = $.data(_e0, "datagrid");
        var _e3 = _e2.options;
        var dc = _e2.dc;
        var _e4 = dc.view.find("table.datagrid-btable,table.datagrid-ftable");
        _e4.css("table-layout", "fixed");
        if (_e1) {
            fix(_e1);
        } else {
            var ff = _72(_e0, true).concat(_72(_e0, false));
            for (var i = 0; i < ff.length; i++) {
                fix(ff[i]);
            }
        }
        _e4.css("table-layout", "");
        _e5(_e0);
        _34(_e0);
        _e6(_e0);
        function fix(_e7) {
            var col = _73(_e0, _e7);
            if (col.cellClass) {
                _e2.ss.set("." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto");
            }
        };
    };
    function _e5(_e8) {
        var dc = $.data(_e8, "datagrid").dc;
        dc.view.find("td.datagrid-td-merged").each(function () {
            var td = $(this);
            var _e9 = td.attr("colspan") || 1;
            var col = _73(_e8, td.attr("field"));
            var _ea = col.boxWidth + col.deltaWidth - 1;
            for (var i = 1; i < _e9; i++) {
                td = td.next();
                col = _73(_e8, td.attr("field"));
                _ea += col.boxWidth + col.deltaWidth;
            }
            $(this).children("div.datagrid-cell")._outerWidth(_ea);
        });
    };
    function _e6(_eb) {
        var dc = $.data(_eb, "datagrid").dc;
        dc.view.find("div.datagrid-editable").each(function () {
            var _ec = $(this);
            var _ed = _ec.parent().attr("field");
            var col = $(_eb).datagrid("getColumnOption", _ed);
            _ec._outerWidth(col.boxWidth + col.deltaWidth - 1);
            var ed = $.data(this, "datagrid.editor");
            if (ed.actions.resize) {
                ed.actions.resize(ed.target, _ec.width());
            }
        });
    };
    function _73(_ee, _ef) {
        function _f0(_f1) {
            if (_f1) {
                for (var i = 0; i < _f1.length; i++) {
                    var cc = _f1[i];
                    for (var j = 0; j < cc.length; j++) {
                        var c = cc[j];
                        if (c.field == _ef) {
                            return c;
                        }
                    }
                }
            }
            return null;
        };
        var _f2 = $.data(_ee, "datagrid").options;
        var col = _f0(_f2.columns);
        if (!col) {
            col = _f0(_f2.frozenColumns);
        }
        return col;
    };
    function _b7(_f3, _f4) {
        var _f5 = $.data(_f3, "datagrid").options;
        var _f6 = _f4 ? _f5.frozenColumns : _f5.columns;
        var aa = [];
        var _f7 = _f8();
        for (var i = 0; i < _f6.length; i++) {
            aa[i] = new Array(_f7);
        }
        for (var _f9 = 0; _f9 < _f6.length; _f9++) {
            $.map(_f6[_f9], function (col) {
                var _fa = _fb(aa[_f9]);
                if (_fa >= 0) {
                    var _fc = col.field || col.id || "";
                    for (var c = 0; c < (col.colspan || 1) ; c++) {
                        for (var r = 0; r < (col.rowspan || 1) ; r++) {
                            aa[_f9 + r][_fa] = _fc;
                        }
                        _fa++;
                    }
                }
            });
        }
        return aa;
        function _f8() {
            var _fd = 0;
            $.map(_f6[0] || [], function (col) {
                _fd += col.colspan || 1;
            });
            return _fd;
        };
        function _fb(a) {
            for (var i = 0; i < a.length; i++) {
                if (a[i] == undefined) {
                    return i;
                }
            }
            return -1;
        };
    };
    function _72(_fe, _ff) {
        var aa = _b7(_fe, _ff);
        return aa.length ? aa[aa.length - 1] : aa;
    };
    function _b0(_100, data) {
        var _101 = $.data(_100, "datagrid");
        var opts = _101.options;
        var dc = _101.dc;
        data = opts.loadFilter.call(_100, data);
        if ($.isArray(data)) {
            data = { total: data.length, rows: data };
        }
        data.total = parseInt(data.total);
        _101.data = data;
        if (data.footer) {
            _101.footer = data.footer;
        }
        if (!opts.remoteSort && opts.sortName) {
            var _102 = opts.sortName.split(",");
            var _103 = opts.sortOrder.split(",");
            data.rows.sort(function (r1, r2) {
                var r = 0;
                for (var i = 0; i < _102.length; i++) {
                    var sn = _102[i];
                    var so = _103[i];
                    var col = _73(_100, sn);
                    var _104 = col.sorter || function (a, b) {
                        return a == b ? 0 : (a > b ? 1 : -1);
                    };
                    r = _104(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                    if (r != 0) {
                        return r;
                    }
                }
                return r;
            });
        }
        if (opts.view.onBeforeRender) {
            opts.view.onBeforeRender.call(opts.view, _100, data.rows);
        }
        opts.view.render.call(opts.view, _100, dc.body2, false);
        opts.view.render.call(opts.view, _100, dc.body1, true);
        if (opts.showFooter) {
            opts.view.renderFooter.call(opts.view, _100, dc.footer2, false);
            opts.view.renderFooter.call(opts.view, _100, dc.footer1, true);
        }
        if (opts.view.onAfterRender) {
            opts.view.onAfterRender.call(opts.view, _100);
        }
        _101.ss.clean();
        var _105 = $(_100).datagrid("getPager");
        if (_105.length) {
            var _106 = _105.pagination("options");
            if (_106.total != data.total) {
                _105.pagination("refresh", { total: data.total });
                if (opts.pageNumber != _106.pageNumber && _106.pageNumber > 0) {
                    opts.pageNumber = _106.pageNumber;
                    _af(_100);
                }
            }
        }
        _34(_100);
        dc.body2.triggerHandler("scroll");
        $(_100).datagrid("setSelectionState");
        $(_100).datagrid("autoSizeColumn");
        opts.onLoadSuccess.call(_100, data);
    };
    function _107(_108) {
        var _109 = $.data(_108, "datagrid");
        var opts = _109.options;
        var dc = _109.dc;
        dc.header1.add(dc.header2).find("input[type=checkbox]")._propAttr("checked", false);
        if (opts.idField) {
            var _10a = $.data(_108, "treegrid") ? true : false;
            var _10b = opts.onSelect;
            var _10c = opts.onCheck;
            opts.onSelect = opts.onCheck = function () {
            };
            var rows = opts.finder.getRows(_108);
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var _10d = _10a ? row[opts.idField] : i;
                if (_10e(_109.selectedRows, row)) {
                    _94(_108, _10d, true);
                }
                if (_10e(_109.checkedRows, row)) {
                    _91(_108, _10d, true);
                }
            }
            opts.onSelect = _10b;
            opts.onCheck = _10c;
        }
        function _10e(a, r) {
            for (var i = 0; i < a.length; i++) {
                if (a[i][opts.idField] == r[opts.idField]) {
                    a[i] = r;
                    return true;
                }
            }
            return false;
        };
    };
    function _10f(_110, row) {
        var _111 = $.data(_110, "datagrid");
        var opts = _111.options;
        var rows = _111.data.rows;
        if (typeof row == "object") {
            return _2(rows, row);
        } else {
            for (var i = 0; i < rows.length; i++) {
                if (rows[i][opts.idField] == row) {
                    return i;
                }
            }
            return -1;
        }
    };
    function _112(_113) {
        var _114 = $.data(_113, "datagrid");
        var opts = _114.options;
        var data = _114.data;
        if (opts.idField) {
            return _114.selectedRows;
        } else {
            var rows = [];
            opts.finder.getTr(_113, "", "selected", 2).each(function () {
                rows.push(opts.finder.getRow(_113, $(this)));
            });
            return rows;
        }
    };
    function _115(_116) {
        var _117 = $.data(_116, "datagrid");
        var opts = _117.options;
        if (opts.idField) {
            return _117.checkedRows;
        } else {
            var rows = [];
            opts.finder.getTr(_116, "", "checked", 2).each(function () {
                rows.push(opts.finder.getRow(_116, $(this)));
            });
            return rows;
        }
    };
    function _118(_119, _11a) {
        var _11b = $.data(_119, "datagrid");
        var dc = _11b.dc;
        var opts = _11b.options;
        var tr = opts.finder.getTr(_119, _11a);
        if (tr.length) {
            if (tr.closest("table").hasClass("datagrid-btable-frozen")) {
                return;
            }
            var _11c = dc.view2.children("div.datagrid-header")._outerHeight();
            var _11d = dc.body2;
            var _11e = _11d.outerHeight(true) - _11d.outerHeight();
            var top = tr.position().top - _11c - _11e;
            if (top < 0) {
                _11d.scrollTop(_11d.scrollTop() + top);
            } else {
                if (top + tr._outerHeight() > _11d.height() - 18) {
                    _11d.scrollTop(_11d.scrollTop() + top + tr._outerHeight() - _11d.height() + 18);
                }
            }
        }
    };
    function _8b(_11f, _120) {
        var _121 = $.data(_11f, "datagrid");
        var opts = _121.options;
        opts.finder.getTr(_11f, _121.highlightIndex).removeClass("datagrid-row-over");
        opts.finder.getTr(_11f, _120).addClass("datagrid-row-over");
        _121.highlightIndex = _120;
    };
    function _94(_122, _123, _124) {
        var _125 = $.data(_122, "datagrid");
        var opts = _125.options;
        var row = opts.finder.getRow(_122, _123);
        if (opts.onBeforeSelect.apply(_122, _5(_122, [_123, row])) == false) {
            return;
        }
        if (opts.singleSelect) {
            _126(_122, true);
            _125.selectedRows = [];
        }
        if (!_124 && opts.checkOnSelect) {
            _91(_122, _123, true);
        }
        if (opts.idField) {
            _4(_125.selectedRows, opts.idField, row);
        }
        opts.finder.getTr(_122, _123).addClass("datagrid-row-selected");
        opts.onSelect.apply(_122, _5(_122, [_123, row]));
        _118(_122, _123);
    };
    function _95(_127, _128, _129) {
        var _12a = $.data(_127, "datagrid");
        var dc = _12a.dc;
        var opts = _12a.options;
        var row = opts.finder.getRow(_127, _128);
        if (opts.onBeforeUnselect.apply(_127, _5(_127, [_128, row])) == false) {
            return;
        }
        if (!_129 && opts.checkOnSelect) {
            _92(_127, _128, true);
        }
        opts.finder.getTr(_127, _128).removeClass("datagrid-row-selected");
        if (opts.idField) {
            _3(_12a.selectedRows, opts.idField, row[opts.idField]);
        }
        opts.onUnselect.apply(_127, _5(_127, [_128, row]));
    };
    function _12b(_12c, _12d) {
        var _12e = $.data(_12c, "datagrid");
        var opts = _12e.options;
        var rows = opts.finder.getRows(_12c);
        var _12f = $.data(_12c, "datagrid").selectedRows;
        if (!_12d && opts.checkOnSelect) {
            _130(_12c, true);
        }
        opts.finder.getTr(_12c, "", "allbody").addClass("datagrid-row-selected");
        if (opts.idField) {
            for (var _131 = 0; _131 < rows.length; _131++) {
                _4(_12f, opts.idField, rows[_131]);
            }
        }
        opts.onSelectAll.call(_12c, rows);
    };
    function _126(_132, _133) {
        var _134 = $.data(_132, "datagrid");
        var opts = _134.options;
        var rows = opts.finder.getRows(_132);
        var _135 = $.data(_132, "datagrid").selectedRows;
        if (!_133 && opts.checkOnSelect) {
            _136(_132, true);
        }
        opts.finder.getTr(_132, "", "selected").removeClass("datagrid-row-selected");
        if (opts.idField) {
            for (var _137 = 0; _137 < rows.length; _137++) {
                _3(_135, opts.idField, rows[_137][opts.idField]);
            }
        }
        opts.onUnselectAll.call(_132, rows);
    };
    function _91(_138, _139, _13a) {
        var _13b = $.data(_138, "datagrid");
        var opts = _13b.options;
        var row = opts.finder.getRow(_138, _139);
        if (opts.onBeforeCheck.apply(_138, _5(_138, [_139, row])) == false) {
            return;
        }
        if (opts.singleSelect && opts.selectOnCheck) {
            _136(_138, true);
            _13b.checkedRows = [];
        }
        if (!_13a && opts.selectOnCheck) {
            _94(_138, _139, true);
        }
        var tr = opts.finder.getTr(_138, _139).addClass("datagrid-row-checked");
        tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
        tr = opts.finder.getTr(_138, "", "checked", 2);
        if (tr.length == opts.finder.getRows(_138).length) {
            var dc = _13b.dc;
            dc.header1.add(dc.header2).find("input[type=checkbox]")._propAttr("checked", true);
        }
        if (opts.idField) {
            _4(_13b.checkedRows, opts.idField, row);
        }
        opts.onCheck.apply(_138, _5(_138, [_139, row]));
    };
    function _92(_13c, _13d, _13e) {
        var _13f = $.data(_13c, "datagrid");
        var opts = _13f.options;
        var row = opts.finder.getRow(_13c, _13d);
        if (opts.onBeforeUncheck.apply(_13c, _5(_13c, [_13d, row])) == false) {
            return;
        }
        if (!_13e && opts.selectOnCheck) {
            _95(_13c, _13d, true);
        }
        var tr = opts.finder.getTr(_13c, _13d).removeClass("datagrid-row-checked");
        tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", false);
        var dc = _13f.dc;
        var _140 = dc.header1.add(dc.header2);
        _140.find("input[type=checkbox]")._propAttr("checked", false);
        if (opts.idField) {
            _3(_13f.checkedRows, opts.idField, row[opts.idField]);
        }
        opts.onUncheck.apply(_13c, _5(_13c, [_13d, row]));
    };
    function _130(_141, _142) {
        var _143 = $.data(_141, "datagrid");
        var opts = _143.options;
        var rows = opts.finder.getRows(_141);
        if (!_142 && opts.selectOnCheck) {
            _12b(_141, true);
        }
        var dc = _143.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(_141, "", "allbody").addClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", true);
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _4(_143.checkedRows, opts.idField, rows[i]);
            }
        }
        opts.onCheckAll.call(_141, rows);
    };
    function _136(_144, _145) {
        var _146 = $.data(_144, "datagrid");
        var opts = _146.options;
        var rows = opts.finder.getRows(_144);
        if (!_145 && opts.selectOnCheck) {
            _126(_144, true);
        }
        var dc = _146.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(_144, "", "checked").removeClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", false);
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _3(_146.checkedRows, opts.idField, rows[i][opts.idField]);
            }
        }
        opts.onUncheckAll.call(_144, rows);
    };
    function _147(_148, _149) {
        var opts = $.data(_148, "datagrid").options;
        var tr = opts.finder.getTr(_148, _149);
        var row = opts.finder.getRow(_148, _149);
        if (tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (opts.onBeforeEdit.apply(_148, _5(_148, [_149, row])) == false) {
            return;
        }
        tr.addClass("datagrid-row-editing");
        _14a(_148, _149);
        _e6(_148);
        tr.find("div.datagrid-editable").each(function () {
            var _14b = $(this).parent().attr("field");
            var ed = $.data(this, "datagrid.editor");
            ed.actions.setValue(ed.target, row[_14b]);
        });
        _14c(_148, _149);
        opts.onBeginEdit.apply(_148, _5(_148, [_149, row]));
    };
    function _14d(_14e, _14f, _150) {
        var _151 = $.data(_14e, "datagrid");
        var opts = _151.options;
        var _152 = _151.updatedRows;
        var _153 = _151.insertedRows;
        var tr = opts.finder.getTr(_14e, _14f);
        var row = opts.finder.getRow(_14e, _14f);
        if (!tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (!_150) {
            if (!_14c(_14e, _14f)) {
                return;
            }
            var _154 = false;
            var _155 = {};
            tr.find("div.datagrid-editable").each(function () {
                var _156 = $(this).parent().attr("field");
                var ed = $.data(this, "datagrid.editor");
                var t = $(ed.target);
                var _157 = t.data("textbox") ? t.textbox("textbox") : t;
                _157.triggerHandler("blur");
                var _158 = ed.actions.getValue(ed.target);
                if (row[_156] !== _158) {
                    row[_156] = _158;
                    _154 = true;
                    _155[_156] = _158;
                }
            });
            if (_154) {
                if (_2(_153, row) == -1) {
                    if (_2(_152, row) == -1) {
                        _152.push(row);
                    }
                }
            }
            opts.onEndEdit.apply(_14e, _5(_14e, [_14f, row, _155]));
        }
        tr.removeClass("datagrid-row-editing");
        _159(_14e, _14f);
        $(_14e).datagrid("refreshRow", _14f);
        if (!_150) {
            opts.onAfterEdit.apply(_14e, _5(_14e, [_14f, row, _155]));
        } else {
            opts.onCancelEdit.apply(_14e, _5(_14e, [_14f, row]));
        }
    };
    function _15a(_15b, _15c) {
        var opts = $.data(_15b, "datagrid").options;
        var tr = opts.finder.getTr(_15b, _15c);
        var _15d = [];
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                _15d.push(ed);
            }
        });
        return _15d;
    };
    function _15e(_15f, _160) {
        var _161 = _15a(_15f, _160.index != undefined ? _160.index : _160.id);
        for (var i = 0; i < _161.length; i++) {
            if (_161[i].field == _160.field) {
                return _161[i];
            }
        }
        return null;
    };
    function _14a(_162, _163) {
        var opts = $.data(_162, "datagrid").options;
        var tr = opts.finder.getTr(_162, _163);
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-cell");
            var _164 = $(this).attr("field");
            var col = _73(_162, _164);
            if (col && col.editor) {
                var _165, _166;
                if (typeof col.editor == "string") {
                    _165 = col.editor;
                } else {
                    _165 = col.editor.type;
                    _166 = col.editor.options;
                }
                var _167 = opts.editors[_165];
                if (_167) {
                    var _168 = cell.html();
                    var _169 = cell._outerWidth();
                    cell.addClass("datagrid-editable");
                    cell._outerWidth(_169);
                    cell.html("<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td></td></tr></table>");
                    cell.children("table").bind("click dblclick contextmenu", function (e) {
                        e.stopPropagation();
                    });
                    $.data(cell[0], "datagrid.editor", { actions: _167, target: _167.init(cell.find("td"), _166), field: _164, type: _165, oldHtml: _168 });
                }
            }
        });
        _34(_162, _163, true);
    };
    function _159(_16a, _16b) {
        var opts = $.data(_16a, "datagrid").options;
        var tr = opts.finder.getTr(_16a, _16b);
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                if (ed.actions.destroy) {
                    ed.actions.destroy(ed.target);
                }
                cell.html(ed.oldHtml);
                $.removeData(cell[0], "datagrid.editor");
                cell.removeClass("datagrid-editable");
                cell.css("width", "");
            }
        });
    };
    function _14c(_16c, _16d) {
        var tr = $.data(_16c, "datagrid").options.finder.getTr(_16c, _16d);
        if (!tr.hasClass("datagrid-row-editing")) {
            return true;
        }
        var vbox = tr.find(".validatebox-text");
        vbox.validatebox("validate");
        vbox.trigger("mouseleave");
        var _16e = tr.find(".validatebox-invalid");
        return _16e.length == 0;
    };
    function _16f(_170, _171) {
        var _172 = $.data(_170, "datagrid").insertedRows;
        var _173 = $.data(_170, "datagrid").deletedRows;
        var _174 = $.data(_170, "datagrid").updatedRows;
        if (!_171) {
            var rows = [];
            rows = rows.concat(_172);
            rows = rows.concat(_173);
            rows = rows.concat(_174);
            return rows;
        } else {
            if (_171 == "inserted") {
                return _172;
            } else {
                if (_171 == "deleted") {
                    return _173;
                } else {
                    if (_171 == "updated") {
                        return _174;
                    }
                }
            }
        }
        return [];
    };
    function _175(_176, _177) {
        var _178 = $.data(_176, "datagrid");
        var opts = _178.options;
        var data = _178.data;
        var _179 = _178.insertedRows;
        var _17a = _178.deletedRows;
        $(_176).datagrid("cancelEdit", _177);
        var row = opts.finder.getRow(_176, _177);
        if (_2(_179, row) >= 0) {
            _3(_179, row);
        } else {
            _17a.push(row);
        }
        _3(_178.selectedRows, opts.idField, row[opts.idField]);
        _3(_178.checkedRows, opts.idField, row[opts.idField]);
        opts.view.deleteRow.call(opts.view, _176, _177);
        if (opts.height == "auto") {
            _34(_176);
        }
        $(_176).datagrid("getPager").pagination("refresh", { total: data.total });
    };
    function _17b(_17c, _17d) {
        var data = $.data(_17c, "datagrid").data;
        var view = $.data(_17c, "datagrid").options.view;
        var _17e = $.data(_17c, "datagrid").insertedRows;
        view.insertRow.call(view, _17c, _17d.index, _17d.row);
        _17e.push(_17d.row);
        $(_17c).datagrid("getPager").pagination("refresh", { total: data.total });
    };
    function _17f(_180, row) {
        var data = $.data(_180, "datagrid").data;
        var view = $.data(_180, "datagrid").options.view;
        var _181 = $.data(_180, "datagrid").insertedRows;
        view.insertRow.call(view, _180, null, row);
        _181.push(row);
        $(_180).datagrid("getPager").pagination("refresh", { total: data.total });
    };
    function _182(_183, _184) {
        var _185 = $.data(_183, "datagrid");
        var opts = _185.options;
        var row = opts.finder.getRow(_183, _184.index);
        var _186 = false;
        _184.row = _184.row || {};
        for (var _187 in _184.row) {
            if (row[_187] !== _184.row[_187]) {
                _186 = true;
                break;
            }
        }
        if (_186) {
            if (_2(_185.insertedRows, row) == -1) {
                if (_2(_185.updatedRows, row) == -1) {
                    _185.updatedRows.push(row);
                }
            }
            opts.view.updateRow.call(opts.view, _183, _184.index, _184.row);
        }
    };
    function _188(_189) {
        var _18a = $.data(_189, "datagrid");
        var data = _18a.data;
        var rows = data.rows;
        var _18b = [];
        for (var i = 0; i < rows.length; i++) {
            _18b.push($.extend({}, rows[i]));
        }
        _18a.originalRows = _18b;
        _18a.updatedRows = [];
        _18a.insertedRows = [];
        _18a.deletedRows = [];
    };
    function _18c(_18d) {
        var data = $.data(_18d, "datagrid").data;
        var ok = true;
        for (var i = 0, len = data.rows.length; i < len; i++) {
            if (_14c(_18d, i)) {
                $(_18d).datagrid("endEdit", i);
            } else {
                ok = false;
            }
        }
        if (ok) {
            _188(_18d);
        }
    };
    function _18e(_18f) {
        var _190 = $.data(_18f, "datagrid");
        var opts = _190.options;
        var _191 = _190.originalRows;
        var _192 = _190.insertedRows;
        var _193 = _190.deletedRows;
        var _194 = _190.selectedRows;
        var _195 = _190.checkedRows;
        var data = _190.data;
        function _196(a) {
            var ids = [];
            for (var i = 0; i < a.length; i++) {
                ids.push(a[i][opts.idField]);
            }
            return ids;
        };
        function _197(ids, _198) {
            for (var i = 0; i < ids.length; i++) {
                var _199 = _10f(_18f, ids[i]);
                if (_199 >= 0) {
                    (_198 == "s" ? _94 : _91)(_18f, _199, true);
                }
            }
        };
        for (var i = 0; i < data.rows.length; i++) {
            $(_18f).datagrid("cancelEdit", i);
        }
        var _19a = _196(_194);
        var _19b = _196(_195);
        _194.splice(0, _194.length);
        _195.splice(0, _195.length);
        data.total += _193.length - _192.length;
        data.rows = _191;
        _b0(_18f, data);
        _197(_19a, "s");
        _197(_19b, "c");
        _188(_18f);
    };
    function _af(_19c, _19d, cb) {
        var opts = $.data(_19c, "datagrid").options;
        if (_19d) {
            opts.queryParams = _19d;
        }
        var _19e = $.extend({}, opts.queryParams);
        if (opts.pagination) {
            $.extend(_19e, { page: opts.pageNumber || 1, rows: opts.pageSize });
        }
        if (opts.sortName) {
            $.extend(_19e, { sort: opts.sortName, order: opts.sortOrder });
        }
        if (opts.onBeforeLoad.call(_19c, _19e) == false) {
            return;
        }
        $(_19c).datagrid("loading");
        var _19f = opts.loader.call(_19c, _19e, function (data) {
            $(_19c).datagrid("loaded");
            $(_19c).datagrid("loadData", data);
            if (cb) {
                cb();
            }
        }, function () {
            $(_19c).datagrid("loaded");
            opts.onLoadError.apply(_19c, arguments);
        });
        if (_19f == false) {
            $(_19c).datagrid("loaded");
        }
    };
    function _1a0(_1a1, _1a2) {
        var opts = $.data(_1a1, "datagrid").options;
        _1a2.type = _1a2.type || "body";
        _1a2.rowspan = _1a2.rowspan || 1;
        _1a2.colspan = _1a2.colspan || 1;
        if (_1a2.rowspan == 1 && _1a2.colspan == 1) {
            return;
        }
        var tr = opts.finder.getTr(_1a1, (_1a2.index != undefined ? _1a2.index : _1a2.id), _1a2.type);
        if (!tr.length) {
            return;
        }
        var td = tr.find("td[field=\"" + _1a2.field + "\"]");
        td.attr("rowspan", _1a2.rowspan).attr("colspan", _1a2.colspan);
        td.addClass("datagrid-td-merged");
        _1a3(td.next(), _1a2.colspan - 1);
        for (var i = 1; i < _1a2.rowspan; i++) {
            tr = tr.next();
            if (!tr.length) {
                break;
            }
            td = tr.find("td[field=\"" + _1a2.field + "\"]");
            _1a3(td, _1a2.colspan);
        }
        _e5(_1a1);
        function _1a3(td, _1a4) {
            for (var i = 0; i < _1a4; i++) {
                td.hide();
                td = td.next();
            }
        };
    };
    $.fn.datagrid = function (_1a5, _1a6) {
        if (typeof _1a5 == "string") {
            return $.fn.datagrid.methods[_1a5](this, _1a6);
        }
        _1a5 = _1a5 || {};
        return this.each(function () {
            var _1a7 = $.data(this, "datagrid");
            var opts;
            if (_1a7) {
                opts = $.extend(_1a7.options, _1a5);
                _1a7.options = opts;
            } else {
                opts = $.extend({}, $.extend({}, $.fn.datagrid.defaults, { queryParams: {} }), $.fn.datagrid.parseOptions(this), _1a5);
                $(this).css("width", "").css("height", "");
                var _1a8 = _4d(this, opts.rownumbers);
                if (!opts.columns) {
                    opts.columns = _1a8.columns;
                }
                if (!opts.frozenColumns) {
                    opts.frozenColumns = _1a8.frozenColumns;
                }
                opts.columns = $.extend(true, [], opts.columns);
                opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
                opts.view = $.extend({}, opts.view);
                $.data(this, "datagrid", { options: opts, panel: _1a8.panel, dc: _1a8.dc, ss: null, selectedRows: [], checkedRows: [], data: { total: 0, rows: [] }, originalRows: [], updatedRows: [], insertedRows: [], deletedRows: [] });
            }
            _58(this);
            _74(this);
            _1a(this);
            if (opts.data) {
                $(this).datagrid("loadData", opts.data);
            } else {
                var data = $.fn.datagrid.parseData(this);
                if (data.total > 0) {
                    $(this).datagrid("loadData", data);
                } else {
                    opts.view.renderEmptyRow(this);
                    $(this).datagrid("autoSizeColumn");
                }
            }
            _af(this);
        });
    };
    function _1a9(_1aa) {
        var _1ab = {};
        $.map(_1aa, function (name) {
            _1ab[name] = _1ac(name);
        });
        return _1ab;
        function _1ac(name) {
            function isA(_1ad) {
                return $.data($(_1ad)[0], name) != undefined;
            };
            return {
                init: function (_1ae, _1af) {
                    var _1b0 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_1ae);
                    if (_1b0[name] && name != "text") {
                        return _1b0[name](_1af);
                    } else {
                        return _1b0;
                    }
                }, destroy: function (_1b1) {
                    if (isA(_1b1, name)) {
                        $(_1b1)[name]("destroy");
                    }
                }, getValue: function (_1b2) {
                    if (isA(_1b2, name)) {
                        var opts = $(_1b2)[name]("options");
                        if (opts.multiple) {
                            return $(_1b2)[name]("getValues").join(opts.separator);
                        } else {
                            return $(_1b2)[name]("getValue");
                        }
                    } else {
                        return $(_1b2).val();
                    }
                }, setValue: function (_1b3, _1b4) {
                    if (isA(_1b3, name)) {
                        var opts = $(_1b3)[name]("options");
                        if (opts.multiple) {
                            if (_1b4) {
                                $(_1b3)[name]("setValues", _1b4.split(opts.separator));
                            } else {
                                $(_1b3)[name]("clear");
                            }
                        } else {
                            $(_1b3)[name]("setValue", _1b4);
                        }
                    } else {
                        $(_1b3).val(_1b4);
                    }
                }, resize: function (_1b5, _1b6) {
                    if (isA(_1b5, name)) {
                        $(_1b5)[name]("resize", _1b6);
                    } else {
                        $(_1b5)._outerWidth(_1b6)._outerHeight(22);
                    }
                }
            };
        };
    };
    var _1b7 = $.extend({}, _1a9(["text", "textbox", "numberbox", "numberspinner", "combobox", "combotree", "combogrid", "datebox", "datetimebox", "timespinner", "datetimespinner"]), {
        textarea: {
            init: function (_1b8, _1b9) {
                var _1ba = $("<textarea class=\"datagrid-editable-input\"></textarea>").appendTo(_1b8);
                return _1ba;
            }, getValue: function (_1bb) {
                return $(_1bb).val();
            }, setValue: function (_1bc, _1bd) {
                $(_1bc).val(_1bd);
            }, resize: function (_1be, _1bf) {
                $(_1be)._outerWidth(_1bf);
            }
        }, checkbox: {
            init: function (_1c0, _1c1) {
                var _1c2 = $("<input type=\"checkbox\">").appendTo(_1c0);
                _1c2.val(_1c1.on);
                _1c2.attr("offval", _1c1.off);
                return _1c2;
            }, getValue: function (_1c3) {
                if ($(_1c3).is(":checked")) {
                    return $(_1c3).val();
                } else {
                    return $(_1c3).attr("offval");
                }
            }, setValue: function (_1c4, _1c5) {
                var _1c6 = false;
                if ($(_1c4).val() == _1c5) {
                    _1c6 = true;
                }
                $(_1c4)._propAttr("checked", _1c6);
            }
        }, validatebox: {
            init: function (_1c7, _1c8) {
                var _1c9 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_1c7);
                _1c9.validatebox(_1c8);
                return _1c9;
            }, destroy: function (_1ca) {
                $(_1ca).validatebox("destroy");
            }, getValue: function (_1cb) {
                return $(_1cb).val();
            }, setValue: function (_1cc, _1cd) {
                $(_1cc).val(_1cd);
            }, resize: function (_1ce, _1cf) {
                $(_1ce)._outerWidth(_1cf)._outerHeight(22);
            }
        }
    });
    $.fn.datagrid.methods = {
        options: function (jq) {
            var _1d0 = $.data(jq[0], "datagrid").options;
            var _1d1 = $.data(jq[0], "datagrid").panel.panel("options");
            var opts = $.extend(_1d0, { width: _1d1.width, height: _1d1.height, closed: _1d1.closed, collapsed: _1d1.collapsed, minimized: _1d1.minimized, maximized: _1d1.maximized });
            return opts;
        }, setSelectionState: function (jq) {
            return jq.each(function () {
                _107(this);
            });
        }, createStyleSheet: function (jq) {
            return _7(jq[0]);
        }, getPanel: function (jq) {
            return $.data(jq[0], "datagrid").panel;
        }, getPager: function (jq) {
            return $.data(jq[0], "datagrid").panel.children("div.datagrid-pager");
        }, getColumnFields: function (jq, _1d2) {
            return _72(jq[0], _1d2);
        }, getColumnOption: function (jq, _1d3) {
            return _73(jq[0], _1d3);
        }, resize: function (jq, _1d4) {
            return jq.each(function () {
                _1a(this, _1d4);
            });
        }, load: function (jq, _1d5) {
            return jq.each(function () {
                var opts = $(this).datagrid("options");
                if (typeof _1d5 == "string") {
                    opts.url = _1d5;
                    _1d5 = null;
                }
                opts.pageNumber = 1;
                var _1d6 = $(this).datagrid("getPager");
                _1d6.pagination("refresh", { pageNumber: 1 });
                _af(this, _1d5);
            });
        }, reload: function (jq, _1d7) {
            return jq.each(function () {
                var opts = $(this).datagrid("options");
                if (typeof _1d7 == "string") {
                    opts.url = _1d7;
                    _1d7 = null;
                }
                _af(this, _1d7);
            });
        }, reloadFooter: function (jq, _1d8) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                var dc = $.data(this, "datagrid").dc;
                if (_1d8) {
                    $.data(this, "datagrid").footer = _1d8;
                }
                if (opts.showFooter) {
                    opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
                    opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
                    if (opts.view.onAfterRender) {
                        opts.view.onAfterRender.call(opts.view, this);
                    }
                    $(this).datagrid("fixRowHeight");
                }
            });
        }, loading: function (jq) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                $(this).datagrid("getPager").pagination("loading");
                if (opts.loadMsg) {
                    var _1d9 = $(this).datagrid("getPanel");
                    if (!_1d9.children("div.datagrid-mask").length) {
                        $("<div class=\"datagrid-mask\" style=\"display:block\"></div>").appendTo(_1d9);
                        var msg = $("<div class=\"datagrid-mask-msg\" style=\"display:block;left:50%\"></div>").html(opts.loadMsg).appendTo(_1d9);
                        msg._outerHeight(40);
                        msg.css({ marginLeft: (-msg.outerWidth() / 2), lineHeight: (msg.height() + "px") });
                    }
                }
            });
        }, loaded: function (jq) {
            return jq.each(function () {
                $(this).datagrid("getPager").pagination("loaded");
                var _1da = $(this).datagrid("getPanel");
                _1da.children("div.datagrid-mask-msg").remove();
                _1da.children("div.datagrid-mask").remove();
            });
        }, fitColumns: function (jq) {
            return jq.each(function () {
                _bc(this);
            });
        }, fixColumnSize: function (jq, _1db) {
            return jq.each(function () {
                _df(this, _1db);
            });
        }, fixRowHeight: function (jq, _1dc) {
            return jq.each(function () {
                _34(this, _1dc);
            });
        }, freezeRow: function (jq, _1dd) {
            return jq.each(function () {
                _45(this, _1dd);
            });
        }, autoSizeColumn: function (jq, _1de) {
            return jq.each(function () {
                _d0(this, _1de);
            });
        }, loadData: function (jq, data) {
            return jq.each(function () {
                _b0(this, data);
                _188(this);
            });
        }, getData: function (jq) {
            return $.data(jq[0], "datagrid").data;
        }, getRows: function (jq) {
            return $.data(jq[0], "datagrid").data.rows;
        }, getFooterRows: function (jq) {
            return $.data(jq[0], "datagrid").footer;
        }, getRowIndex: function (jq, id) {
            return _10f(jq[0], id);
        }, getChecked: function (jq) {
            return _115(jq[0]);
        }, getSelected: function (jq) {
            var rows = _112(jq[0]);
            return rows.length > 0 ? rows[0] : null;
        }, getSelections: function (jq) {
            return _112(jq[0]);
        }, clearSelections: function (jq) {
            return jq.each(function () {
                var _1df = $.data(this, "datagrid");
                var _1e0 = _1df.selectedRows;
                var _1e1 = _1df.checkedRows;
                _1e0.splice(0, _1e0.length);
                _126(this);
                if (_1df.options.checkOnSelect) {
                    _1e1.splice(0, _1e1.length);
                }
            });
        }, clearChecked: function (jq) {
            return jq.each(function () {
                var _1e2 = $.data(this, "datagrid");
                var _1e3 = _1e2.selectedRows;
                var _1e4 = _1e2.checkedRows;
                _1e4.splice(0, _1e4.length);
                _136(this);
                if (_1e2.options.selectOnCheck) {
                    _1e3.splice(0, _1e3.length);
                }
            });
        }, scrollTo: function (jq, _1e5) {
            return jq.each(function () {
                _118(this, _1e5);
            });
        }, highlightRow: function (jq, _1e6) {
            return jq.each(function () {
                _8b(this, _1e6);
                _118(this, _1e6);
            });
        }, selectAll: function (jq) {
            return jq.each(function () {
                _12b(this);
            });
        }, unselectAll: function (jq) {
            return jq.each(function () {
                _126(this);
            });
        }, selectRow: function (jq, _1e7) {
            return jq.each(function () {
                _94(this, _1e7);
            });
        }, selectRecord: function (jq, id) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                if (opts.idField) {
                    var _1e8 = _10f(this, id);
                    if (_1e8 >= 0) {
                        $(this).datagrid("selectRow", _1e8);
                    }
                }
            });
        }, unselectRow: function (jq, _1e9) {
            return jq.each(function () {
                _95(this, _1e9);
            });
        }, checkRow: function (jq, _1ea) {
            return jq.each(function () {
                _91(this, _1ea);
            });
        }, uncheckRow: function (jq, _1eb) {
            return jq.each(function () {
                _92(this, _1eb);
            });
        }, checkAll: function (jq) {
            return jq.each(function () {
                _130(this);
            });
        }, uncheckAll: function (jq) {
            return jq.each(function () {
                _136(this);
            });
        }, beginEdit: function (jq, _1ec) {
            return jq.each(function () {
                _147(this, _1ec);
            });
        }, endEdit: function (jq, _1ed) {
            return jq.each(function () {
                _14d(this, _1ed, false);
            });
        }, cancelEdit: function (jq, _1ee) {
            return jq.each(function () {
                _14d(this, _1ee, true);
            });
        }, getEditors: function (jq, _1ef) {
            return _15a(jq[0], _1ef);
        }, getEditor: function (jq, _1f0) {
            return _15e(jq[0], _1f0);
        }, refreshRow: function (jq, _1f1) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                opts.view.refreshRow.call(opts.view, this, _1f1);
            });
        }, validateRow: function (jq, _1f2) {
            return _14c(jq[0], _1f2);
        }, updateRow: function (jq, _1f3) {
            return jq.each(function () {
                _182(this, _1f3);
            });
        }, appendRow: function (jq, row) {
            return jq.each(function () {
                _17f(this, row);
            });
        }, insertRow: function (jq, _1f4) {
            return jq.each(function () {
                _17b(this, _1f4);
            });
        }, deleteRow: function (jq, _1f5) {
            return jq.each(function () {
                _175(this, _1f5);
            });
        }, getChanges: function (jq, _1f6) {
            return _16f(jq[0], _1f6);
        }, acceptChanges: function (jq) {
            return jq.each(function () {
                _18c(this);
            });
        }, rejectChanges: function (jq) {
            return jq.each(function () {
                _18e(this);
            });
        }, mergeCells: function (jq, _1f7) {
            return jq.each(function () {
                _1a0(this, _1f7);
            });
        }, showColumn: function (jq, _1f8) {
            return jq.each(function () {
                var col = $(this).datagrid("getColumnOption", _1f8);
                if (col.hidden) {
                    col.hidden = false;
                    $(this).datagrid("getPanel").find("td[field=\"" + _1f8 + "\"]").show();
                    _b1(this, _1f8, 1);
                    $(this).datagrid("fitColumns");
                }
            });
        }, hideColumn: function (jq, _1f9) {
            return jq.each(function () {
                var col = $(this).datagrid("getColumnOption", _1f9);
                if (!col.hidden) {
                    col.hidden = true;
                    $(this).datagrid("getPanel").find("td[field=\"" + _1f9 + "\"]").hide();
                    _b1(this, _1f9, -1);
                    $(this).datagrid("fitColumns");
                }
            });
        }, sort: function (jq, _1fa) {
            return jq.each(function () {
                _a3(this, _1fa);
            });
        }, gotoPage: function (jq, _1fb) {
            return jq.each(function () {
                var _1fc = this;
                var page, cb;
                if (typeof _1fb == "object") {
                    page = _1fb.page;
                    cb = _1fb.callback;
                } else {
                    page = _1fb;
                }
                $(_1fc).datagrid("options").pageNumber = page;
                $(_1fc).datagrid("getPager").pagination("refresh", { pageNumber: page });
                _af(_1fc, null, function () {
                    if (cb) {
                        cb.call(_1fc, page);
                    }
                });
            });
        }
    };
    $.fn.datagrid.parseOptions = function (_1fd) {
        var t = $(_1fd);
        return $.extend({}, $.fn.panel.parseOptions(_1fd), $.parser.parseOptions(_1fd, ["url", "toolbar", "idField", "sortName", "sortOrder", "pagePosition", "resizeHandle", { sharedStyleSheet: "boolean", fitColumns: "boolean", autoRowHeight: "boolean", striped: "boolean", nowrap: "boolean" }, { rownumbers: "boolean", singleSelect: "boolean", ctrlSelect: "boolean", checkOnSelect: "boolean", selectOnCheck: "boolean" }, { pagination: "boolean", pageSize: "number", pageNumber: "number" }, { multiSort: "boolean", remoteSort: "boolean", showHeader: "boolean", showFooter: "boolean" }, { scrollbarSize: "number" }]), { pageList: (t.attr("pageList") ? eval(t.attr("pageList")) : undefined), loadMsg: (t.attr("loadMsg") != undefined ? t.attr("loadMsg") : undefined), rowStyler: (t.attr("rowStyler") ? eval(t.attr("rowStyler")) : undefined) });
    };
    $.fn.datagrid.parseData = function (_1fe) {
        var t = $(_1fe);
        var data = { total: 0, rows: [] };
        var _1ff = t.datagrid("getColumnFields", true).concat(t.datagrid("getColumnFields", false));
        t.find("tbody tr").each(function () {
            data.total++;
            var row = {};
            $.extend(row, $.parser.parseOptions(this, ["iconCls", "state"]));
            for (var i = 0; i < _1ff.length; i++) {
                row[_1ff[i]] = $(this).find("td:eq(" + i + ")").html();
            }
            data.rows.push(row);
        });
        return data;
    };
    var _200 = {
        render: function (_201, _202, _203) {
            var rows = $(_201).datagrid("getRows");
            $(_202).html(this.renderTable(_201, 0, rows, _203));
        }, renderFooter: function (_204, _205, _206) {
            var opts = $.data(_204, "datagrid").options;
            var rows = $.data(_204, "datagrid").footer || [];
            var _207 = $(_204).datagrid("getColumnFields", _206);
            var _208 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < rows.length; i++) {
                _208.push("<tr class=\"datagrid-row\" datagrid-row-index=\"" + i + "\">");
                _208.push(this.renderRow.call(this, _204, _207, _206, i, rows[i]));
                _208.push("</tr>");
            }
            _208.push("</tbody></table>");
            $(_205).html(_208.join(""));
        }, renderTable: function (_209, _20a, rows, _20b) {
            var _20c = $.data(_209, "datagrid");
            var opts = _20c.options;
            if (_20b) {
                if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
                    return "";
                }
            }
            var _20d = $(_209).datagrid("getColumnFields", _20b);
            var _20e = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var css = opts.rowStyler ? opts.rowStyler.call(_209, _20a, row) : "";
                var cs = this.getStyleValue(css);
                var cls = "class=\"datagrid-row " + (_20a % 2 && opts.striped ? "datagrid-row-alt " : " ") + cs.c + "\"";
                var _20f = cs.s ? "style=\"" + cs.s + "\"" : "";
                var _210 = _20c.rowIdPrefix + "-" + (_20b ? 1 : 2) + "-" + _20a;
                _20e.push("<tr id=\"" + _210 + "\" datagrid-row-index=\"" + _20a + "\" " + cls + " " + _20f + ">");
                _20e.push(this.renderRow.call(this, _209, _20d, _20b, _20a, row));
                _20e.push("</tr>");
                _20a++;
            }
            _20e.push("</tbody></table>");
            return _20e.join("");
        }, renderRow: function (_211, _212, _213, _214, _215) {
            var opts = $.data(_211, "datagrid").options;
            var cc = [];
            if (_213 && opts.rownumbers) {
                var _216 = _214 + 1;
                if (opts.pagination) {
                    _216 += (opts.pageNumber - 1) * opts.pageSize;
                }
                cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">" + _216 + "</div></td>");
            }
            for (var i = 0; i < _212.length; i++) {
                var _217 = _212[i];
                var col = $(_211).datagrid("getColumnOption", _217);
                if (col) {
                    var _218 = _215[_217];
                    var css = col.styler ? (col.styler(_218, _215, _214) || "") : "";
                    var cs = this.getStyleValue(css);
                    var cls = cs.c ? "class=\"" + cs.c + "\"" : "";
                    var _219 = col.hidden ? "style=\"display:none;" + cs.s + "\"" : (cs.s ? "style=\"" + cs.s + "\"" : "");
                    cc.push("<td field=\"" + _217 + "\" " + cls + " " + _219 + ">");
                    var _219 = "";
                    if (!col.checkbox) {
                        if (col.align) {
                            _219 += "text-align:" + col.align + ";";
                        }
                        if (!opts.nowrap) {
                            _219 += "white-space:normal;height:auto;";
                        } else {
                            if (opts.autoRowHeight) {
                                _219 += "height:auto;";
                            }
                        }
                    }
                    cc.push("<div style=\"" + _219 + "\" ");
                    cc.push(col.checkbox ? "class=\"datagrid-cell-check\"" : "class=\"datagrid-cell " + col.cellClass + "\"");
                    cc.push(">");
                    if (col.checkbox) {
                        cc.push("<input type=\"checkbox\" " + (_215.checked ? "checked=\"checked\"" : ""));
                        cc.push(" name=\"" + _217 + "\" value=\"" + (_218 != undefined ? _218 : "") + "\">");
                    } else {
                        if (col.formatter) {
                            cc.push(col.formatter(_218, _215, _214));
                        } else {
                            cc.push(_218);
                        }
                    }
                    cc.push("</div>");
                    cc.push("</td>");
                }
            }
            return cc.join("");
        }, getStyleValue: function (css) {
            var _21a = "";
            var _21b = "";
            if (typeof css == "string") {
                _21b = css;
            } else {
                if (css) {
                    _21a = css["class"] || "";
                    _21b = css["style"] || "";
                }
            }
            return { c: _21a, s: _21b };
        }, refreshRow: function (_21c, _21d) {
            this.updateRow.call(this, _21c, _21d, {});
        }, updateRow: function (_21e, _21f, row) {
            var opts = $.data(_21e, "datagrid").options;
            var _220 = opts.finder.getRow(_21e, _21f);
            var _221 = _222.call(this, _21f);
            $.extend(_220, row);
            var _223 = _222.call(this, _21f);
            var _224 = _221.c;
            var _225 = _223.s;
            var _226 = "datagrid-row " + (_21f % 2 && opts.striped ? "datagrid-row-alt " : " ") + _223.c;
            function _222(_227) {
                var css = opts.rowStyler ? opts.rowStyler.call(_21e, _227, _220) : "";
                return this.getStyleValue(css);
            };
            function _228(_229) {
                var _22a = $(_21e).datagrid("getColumnFields", _229);
                var tr = opts.finder.getTr(_21e, _21f, "body", (_229 ? 1 : 2));
                var _22b = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow.call(this, _21e, _22a, _229, _21f, _220));
                tr.attr("style", _225).removeClass(_224).addClass(_226);
                if (_22b) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
            };
            _228.call(this, true);
            _228.call(this, false);
            $(_21e).datagrid("fixRowHeight", _21f);
        }, insertRow: function (_22c, _22d, row) {
            var _22e = $.data(_22c, "datagrid");
            var opts = _22e.options;
            var dc = _22e.dc;
            var data = _22e.data;
            if (_22d == undefined || _22d == null) {
                _22d = data.rows.length;
            }
            if (_22d > data.rows.length) {
                _22d = data.rows.length;
            }
            function _22f(_230) {
                var _231 = _230 ? 1 : 2;
                for (var i = data.rows.length - 1; i >= _22d; i--) {
                    var tr = opts.finder.getTr(_22c, i, "body", _231);
                    tr.attr("datagrid-row-index", i + 1);
                    tr.attr("id", _22e.rowIdPrefix + "-" + _231 + "-" + (i + 1));
                    if (_230 && opts.rownumbers) {
                        var _232 = i + 2;
                        if (opts.pagination) {
                            _232 += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(_232);
                    }
                    if (opts.striped) {
                        tr.removeClass("datagrid-row-alt").addClass((i + 1) % 2 ? "datagrid-row-alt" : "");
                    }
                }
            };
            function _233(_234) {
                var _235 = _234 ? 1 : 2;
                var _236 = $(_22c).datagrid("getColumnFields", _234);
                var _237 = _22e.rowIdPrefix + "-" + _235 + "-" + _22d;
                var tr = "<tr id=\"" + _237 + "\" class=\"datagrid-row\" datagrid-row-index=\"" + _22d + "\"></tr>";
                if (_22d >= data.rows.length) {
                    if (data.rows.length) {
                        opts.finder.getTr(_22c, "", "last", _235).after(tr);
                    } else {
                        var cc = _234 ? dc.body1 : dc.body2;
                        cc.html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>" + tr + "</tbody></table>");
                    }
                } else {
                    opts.finder.getTr(_22c, _22d + 1, "body", _235).before(tr);
                }
            };
            _22f.call(this, true);
            _22f.call(this, false);
            _233.call(this, true);
            _233.call(this, false);
            data.total += 1;
            data.rows.splice(_22d, 0, row);
            this.refreshRow.call(this, _22c, _22d);
        }, deleteRow: function (_238, _239) {
            var _23a = $.data(_238, "datagrid");
            var opts = _23a.options;
            var data = _23a.data;
            function _23b(_23c) {
                var _23d = _23c ? 1 : 2;
                for (var i = _239 + 1; i < data.rows.length; i++) {
                    var tr = opts.finder.getTr(_238, i, "body", _23d);
                    tr.attr("datagrid-row-index", i - 1);
                    tr.attr("id", _23a.rowIdPrefix + "-" + _23d + "-" + (i - 1));
                    if (_23c && opts.rownumbers) {
                        var _23e = i;
                        if (opts.pagination) {
                            _23e += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(_23e);
                    }
                    if (opts.striped) {
                        tr.removeClass("datagrid-row-alt").addClass((i - 1) % 2 ? "datagrid-row-alt" : "");
                    }
                }
            };
            opts.finder.getTr(_238, _239).remove();
            _23b.call(this, true);
            _23b.call(this, false);
            data.total -= 1;
            data.rows.splice(_239, 1);
        }, onBeforeRender: function (_23f, rows) {
        }, onAfterRender: function (_240) {
            var _241 = $.data(_240, "datagrid");
            var opts = _241.options;
            if (opts.showFooter) {
                var _242 = $(_240).datagrid("getPanel").find("div.datagrid-footer");
                _242.find("div.datagrid-cell-rownumber,div.datagrid-cell-check").css("visibility", "hidden");
            }
            if (opts.finder.getRows(_240).length == 0) {
                this.renderEmptyRow(_240);
            }
        }, renderEmptyRow: function (_243) {
            var cols = $.map($(_243).datagrid("getColumnFields"), function (_244) {
                return $(_243).datagrid("getColumnOption", _244);
            });
            $.map(cols, function (col) {
                col.formatter1 = col.formatter;
                col.styler1 = col.styler;
                col.formatter = col.styler = undefined;
            });
            var _245 = $.data(_243, "datagrid").dc.body2;
            _245.html(this.renderTable(_243, 0, [{}], false));
            _245.find("tbody *").css({ height: 1, borderColor: "transparent", background: "transparent" });
            var tr = _245.find(".datagrid-row");
            tr.removeClass("datagrid-row").removeAttr("datagrid-row-index");
            tr.find(".datagrid-cell,.datagrid-cell-check").empty();
            $.map(cols, function (col) {
                col.formatter = col.formatter1;
                col.styler = col.styler1;
                col.formatter1 = col.styler1 = undefined;
            });
        }
    };
    $.fn.datagrid.defaults = $.extend({}, $.fn.panel.defaults, {
        sharedStyleSheet: false, frozenColumns: undefined, columns: undefined, fitColumns: false, resizeHandle: "right", autoRowHeight: true, toolbar: null, striped: false, method: "post", nowrap: true, idField: null, url: null, data: null, loadMsg: "Processing, please wait ...", rownumbers: false, singleSelect: false, ctrlSelect: false, selectOnCheck: true, checkOnSelect: true, pagination: false, pagePosition: "bottom", pageNumber: 1, pageSize: 10, pageList: [10, 20, 30, 40, 50], queryParams: {}, sortName: null, sortOrder: "asc", multiSort: false, remoteSort: true, showHeader: true, showFooter: false, scrollbarSize: 18, rowEvents: { mouseover: _84(true), mouseout: _84(false), click: _8d, dblclick: _98, contextmenu: _9d }, rowStyler: function (_246, _247) {
        }, loader: function (_248, _249, _24a) {
            var opts = $(this).datagrid("options");
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method, url: opts.url, data: _248, dataType: "json", success: function (data) {
                    _249(data);
                }, error: function () {
                    _24a.apply(this, arguments);
                }
            });
        }, loadFilter: function (data) {
            return data;
        }, editors: _1b7, finder: {
            getTr: function (_24b, _24c, type, _24d) {
                type = type || "body";
                _24d = _24d || 0;
                var _24e = $.data(_24b, "datagrid");
                var dc = _24e.dc;
                var opts = _24e.options;
                if (_24d == 0) {
                    var tr1 = opts.finder.getTr(_24b, _24c, type, 1);
                    var tr2 = opts.finder.getTr(_24b, _24c, type, 2);
                    return tr1.add(tr2);
                } else {
                    if (type == "body") {
                        var tr = $("#" + _24e.rowIdPrefix + "-" + _24d + "-" + _24c);
                        if (!tr.length) {
                            tr = (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index=" + _24c + "]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (_24d == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index=" + _24c + "]");
                        } else {
                            if (type == "selected") {
                                return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-checked");
                                    } else {
                                        if (type == "editing") {
                                            return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-editing");
                                        } else {
                                            if (type == "last") {
                                                return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]:last");
                                            } else {
                                                if (type == "allbody") {
                                                    return (_24d == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]");
                                                } else {
                                                    if (type == "allfooter") {
                                                        return (_24d == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index]");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, getRow: function (_24f, p) {
                var _250 = (typeof p == "object") ? p.attr("datagrid-row-index") : p;
                return $.data(_24f, "datagrid").data.rows[parseInt(_250)];
            }, getRows: function (_251) {
                return $(_251).datagrid("getRows");
            }
        }, view: _200, onBeforeLoad: function (_252) {
        }, onLoadSuccess: function () {
        }, onLoadError: function () {
        }, onClickRow: function (_253, _254) {
        }, onDblClickRow: function (_255, _256) {
        }, onClickCell: function (_257, _258, _259) {
        }, onDblClickCell: function (_25a, _25b, _25c) {
        }, onBeforeSortColumn: function (sort, _25d) {
        }, onSortColumn: function (sort, _25e) {
        }, onResizeColumn: function (_25f, _260) {
        }, onBeforeSelect: function (_261, _262) {
        }, onSelect: function (_263, _264) {
        }, onBeforeUnselect: function (_265, _266) {
        }, onUnselect: function (_267, _268) {
        }, onSelectAll: function (rows) {
        }, onUnselectAll: function (rows) {
        }, onBeforeCheck: function (_269, _26a) {
        }, onCheck: function (_26b, _26c) {
        }, onBeforeUncheck: function (_26d, _26e) {
        }, onUncheck: function (_26f, _270) {
        }, onCheckAll: function (rows) {
        }, onUncheckAll: function (rows) {
        }, onBeforeEdit: function (_271, _272) {
        }, onBeginEdit: function (_273, _274) {
        }, onEndEdit: function (_275, _276, _277) {
        }, onAfterEdit: function (_278, _279, _27a) {
        }, onCancelEdit: function (_27b, _27c) {
        }, onHeaderContextMenu: function (e, _27d) {
        }, onRowContextMenu: function (e, _27e, _27f) {
        }
    });
})(jQuery);

/****************************jquery.treegrid****************************/
 
(function ($) {
    function _1(_2) {
        var _3 = $.data(_2, "treegrid");
        var _4 = _3.options;
        $(_2).datagrid($.extend({}, _4, {
            url: null, data: null, loader: function () {
                return false;
            }, onBeforeLoad: function () {
                return false;
            }, onLoadSuccess: function () {
            }, onResizeColumn: function (_5, _6) {
                _16(_2);
                _4.onResizeColumn.call(_2, _5, _6);
            }, onBeforeSortColumn: function (_7, _8) {
                if (_4.onBeforeSortColumn.call(_2, _7, _8) == false) {
                    return false;
                }
            }, onSortColumn: function (_9, _a) {
                _4.sortName = _9;
                _4.sortOrder = _a;
                if (_4.remoteSort) {
                    _15(_2);
                } else {
                    var _b = $(_2).treegrid("getData");
                    _4f(_2, null, _b);
                }
                _4.onSortColumn.call(_2, _9, _a);
            }, onClickCell: function (_c, _d) {
                _4.onClickCell.call(_2, _d, _30(_2, _c));
            }, onDblClickCell: function (_e, _f) {
                _4.onDblClickCell.call(_2, _f, _30(_2, _e));
            }, onRowContextMenu: function (e, _10) {
                _4.onContextMenu.call(_2, e, _30(_2, _10));
            }
        }));
        var _11 = $.data(_2, "datagrid").options;
        _4.columns = _11.columns;
        _4.frozenColumns = _11.frozenColumns;
        _3.dc = $.data(_2, "datagrid").dc;
        if (_4.pagination) {
            var _12 = $(_2).datagrid("getPager");
            _12.pagination({
                pageNumber: _4.pageNumber, pageSize: _4.pageSize, pageList: _4.pageList, onSelectPage: function (_13, _14) {
                    _4.pageNumber = _13;
                    _4.pageSize = _14;
                    _15(_2);
                }
            });
            _4.pageSize = _12.pagination("options").pageSize;
        }
    };
    function _16(_17, _18) {
        var _19 = $.data(_17, "datagrid").options;
        var dc = $.data(_17, "datagrid").dc;
        if (!dc.body1.is(":empty") && (!_19.nowrap || _19.autoRowHeight)) {
            if (_18 != undefined) {
                var _1a = _1b(_17, _18);
                for (var i = 0; i < _1a.length; i++) {
                    _1c(_1a[i][_19.idField]);
                }
            }
        }
        $(_17).datagrid("fixRowHeight", _18);
        function _1c(_1d) {
            var tr1 = _19.finder.getTr(_17, _1d, "body", 1);
            var tr2 = _19.finder.getTr(_17, _1d, "body", 2);
            tr1.css("height", "");
            tr2.css("height", "");
            var _1e = Math.max(tr1.height(), tr2.height());
            tr1.css("height", _1e);
            tr2.css("height", _1e);
        };
    };
    function _1f(_20) {
        var dc = $.data(_20, "datagrid").dc;
        var _21 = $.data(_20, "treegrid").options;
        if (!_21.rownumbers) {
            return;
        }
        dc.body1.find("div.datagrid-cell-rownumber").each(function (i) {
            $(this).html(i + 1);
        });
    };
    function _22(_23) {
        return function (e) {
            $.fn.datagrid.defaults.rowEvents[_23 ? "mouseover" : "mouseout"](e);
            var tt = $(e.target);
            var fn = _23 ? "addClass" : "removeClass";
            if (tt.hasClass("tree-hit")) {
                tt.hasClass("tree-expanded") ? tt[fn]("tree-expanded-hover") : tt[fn]("tree-collapsed-hover");
            }
        };
    };
    function _24(e) {
        var tt = $(e.target);
        if (tt.hasClass("tree-hit")) {
            _25(_26);
        } else {
            if (tt.hasClass("tree-checkbox")) {
                _25(_27);
            } else {
                $.fn.datagrid.defaults.rowEvents.click(e);
            }
        }
        function _25(fn) {
            var tr = tt.closest("tr.datagrid-row");
            var _28 = tr.closest("div.datagrid-view").children(".datagrid-f")[0];
            fn(_28, tr.attr("node-id"));
        };
    };
    function _27(_29, _2a, _2b, _2c) {
        var _2d = $.data(_29, "treegrid");
        var _2e = _2d.checkedRows;
        var _2f = _2d.options;
        if (!_2f.checkbox) {
            return;
        }
        var row = _30(_29, _2a);
        if (!row.checkState) {
            return;
        }
        var tr = _2f.finder.getTr(_29, _2a);
        var ck = tr.find(".tree-checkbox");
        if (_2b == undefined) {
            if (ck.hasClass("tree-checkbox1")) {
                _2b = false;
            } else {
                if (ck.hasClass("tree-checkbox0")) {
                    _2b = true;
                } else {
                    if (row._checked == undefined) {
                        row._checked = ck.hasClass("tree-checkbox1");
                    }
                    _2b = !row._checked;
                }
            }
        }
        row._checked = _2b;
        if (_2b) {
            if (ck.hasClass("tree-checkbox1")) {
                return;
            }
        } else {
            if (ck.hasClass("tree-checkbox0")) {
                return;
            }
        }
        if (!_2c) {
            if (_2f.onBeforeCheckNode.call(_29, row, _2b) == false) {
                return;
            }
        }
        if (_2f.cascadeCheck) {
            _31(_29, row, _2b);
            _32(_29, row);
        } else {
            _33(_29, row, _2b ? "1" : "0");
        }
        if (!_2c) {
            _2f.onCheckNode.call(_29, row, _2b);
        }
    };
    function _33(_34, row, _35) {
        var _36 = $.data(_34, "treegrid");
        var _37 = _36.checkedRows;
        var _38 = _36.options;
        if (!row.checkState || _35 == undefined) {
            return;
        }
        var tr = _38.finder.getTr(_34, row[_38.idField]);
        var ck = tr.find(".tree-checkbox");
        if (!ck.length) {
            return;
        }
        row.checkState = ["unchecked", "checked", "indeterminate"][_35];
        row.checked = (row.checkState == "checked");
        ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
        ck.addClass("tree-checkbox" + _35);
        if (_35 == 0) {
            $.easyui.removeArrayItem(_37, _38.idField, row[_38.idField]);
        } else {
            $.easyui.addArrayItem(_37, _38.idField, row);
        }
    };
    function _31(_39, row, _3a) {
        var _3b = _3a ? 1 : 0;
        _33(_39, row, _3b);
        $.easyui.forEach(row.children || [], true, function (r) {
            _33(_39, r, _3b);
        });
    };
    function _32(_3c, row) {
        var _3d = $.data(_3c, "treegrid").options;
        var _3e = _3f(_3c, row[_3d.idField]);
        if (_3e) {
            _33(_3c, _3e, _40(_3e));
            _32(_3c, _3e);
        }
    };
    function _40(row) {
        var len = 0;
        var c0 = 0;
        var c1 = 0;
        $.easyui.forEach(row.children || [], false, function (r) {
            if (r.checkState) {
                len++;
                if (r.checkState == "checked") {
                    c1++;
                } else {
                    if (r.checkState == "unchecked") {
                        c0++;
                    }
                }
            }
        });
        if (len == 0) {
            return undefined;
        }
        var _41 = 0;
        if (c0 == len) {
            _41 = 0;
        } else {
            if (c1 == len) {
                _41 = 1;
            } else {
                _41 = 2;
            }
        }
        return _41;
    };
    function _42(_43, _44) {
        var _45 = $.data(_43, "treegrid").options;
        if (!_45.checkbox) {
            return;
        }
        var row = _30(_43, _44);
        var tr = _45.finder.getTr(_43, _44);
        var ck = tr.find(".tree-checkbox");
        if (_45.view.hasCheckbox(_43, row)) {
            if (!ck.length) {
                row.checkState = row.checkState || "unchecked";
                $("<span class=\"tree-checkbox\"></span>").insertBefore(tr.find(".tree-title"));
            }
            if (row.checkState == "checked") {
                _27(_43, _44, true, true);
            } else {
                if (row.checkState == "unchecked") {
                    _27(_43, _44, false, true);
                } else {
                    var _46 = _40(row);
                    if (_46 === 0) {
                        _27(_43, _44, false, true);
                    } else {
                        if (_46 === 1) {
                            _27(_43, _44, true, true);
                        }
                    }
                }
            }
        } else {
            ck.remove();
            row.checkState = undefined;
            row.checked = undefined;
            _32(_43, row);
        }
    };
    function _47(_48, _49) {
        var _4a = $.data(_48, "treegrid").options;
        var tr1 = _4a.finder.getTr(_48, _49, "body", 1);
        var tr2 = _4a.finder.getTr(_48, _49, "body", 2);
        var _4b = $(_48).datagrid("getColumnFields", true).length + (_4a.rownumbers ? 1 : 0);
        var _4c = $(_48).datagrid("getColumnFields", false).length;
        _4d(tr1, _4b);
        _4d(tr2, _4c);
        function _4d(tr, _4e) {
            $("<tr class=\"treegrid-tr-tree\">" + "<td style=\"border:0px\" colspan=\"" + _4e + "\">" + "<div></div>" + "</td>" + "</tr>").insertAfter(tr);
        };
    };
    function _4f(_50, _51, _52, _53, _54) {
        var _55 = $.data(_50, "treegrid");
        var _56 = _55.options;
        var dc = _55.dc;
        _52 = _56.loadFilter.call(_50, _52, _51);
        var _57 = _30(_50, _51);
        if (_57) {
            var _58 = _56.finder.getTr(_50, _51, "body", 1);
            var _59 = _56.finder.getTr(_50, _51, "body", 2);
            var cc1 = _58.next("tr.treegrid-tr-tree").children("td").children("div");
            var cc2 = _59.next("tr.treegrid-tr-tree").children("td").children("div");
            if (!_53) {
                _57.children = [];
            }
        } else {
            var cc1 = dc.body1;
            var cc2 = dc.body2;
            if (!_53) {
                _55.data = [];
            }
        }
        if (!_53) {
            cc1.empty();
            cc2.empty();
        }
        if (_56.view.onBeforeRender) {
            _56.view.onBeforeRender.call(_56.view, _50, _51, _52);
        }
        _56.view.render.call(_56.view, _50, cc1, true);
        _56.view.render.call(_56.view, _50, cc2, false);
        if (_56.showFooter) {
            _56.view.renderFooter.call(_56.view, _50, dc.footer1, true);
            _56.view.renderFooter.call(_56.view, _50, dc.footer2, false);
        }
        if (_56.view.onAfterRender) {
            _56.view.onAfterRender.call(_56.view, _50);
        }
        if (!_51 && _56.pagination) {
            var _5a = $.data(_50, "treegrid").total;
            var _5b = $(_50).datagrid("getPager");
            if (_5b.pagination("options").total != _5a) {
                _5b.pagination({ total: _5a });
            }
        }
        _16(_50);
        _1f(_50);
        $(_50).treegrid("showLines");
        $(_50).treegrid("setSelectionState");
        $(_50).treegrid("autoSizeColumn");
        if (!_54) {
            _56.onLoadSuccess.call(_50, _57, _52);
        }
    };
    function _15(_5c, _5d, _5e, _5f, _60) {
        var _61 = $.data(_5c, "treegrid").options;
        var _62 = $(_5c).datagrid("getPanel").find("div.datagrid-body");
        if (_5d == undefined && _61.queryParams) {
            _61.queryParams.id = undefined;
        }
        if (_5e) {
            _61.queryParams = _5e;
        }
        var _63 = $.extend({}, _61.queryParams);
        if (_61.pagination) {
            $.extend(_63, { page: _61.pageNumber, rows: _61.pageSize });
        }
        if (_61.sortName) {
            $.extend(_63, { sort: _61.sortName, order: _61.sortOrder });
        }
        var row = _30(_5c, _5d);
        if (_61.onBeforeLoad.call(_5c, row, _63) == false) {
            return;
        }
        var _64 = _62.find("tr[node-id=\"" + _5d + "\"] span.tree-folder");
        _64.addClass("tree-loading");
        $(_5c).treegrid("loading");
        var _65 = _61.loader.call(_5c, _63, function (_66) {
            _64.removeClass("tree-loading");
            $(_5c).treegrid("loaded");
            _4f(_5c, _5d, _66, _5f);
            if (_60) {
                _60();
            }
        }, function () {
            _64.removeClass("tree-loading");
            $(_5c).treegrid("loaded");
            _61.onLoadError.apply(_5c, arguments);
            if (_60) {
                _60();
            }
        });
        if (_65 == false) {
            _64.removeClass("tree-loading");
            $(_5c).treegrid("loaded");
        }
    };
    function _67(_68) {
        var _69 = _6a(_68);
        return _69.length ? _69[0] : null;
    };
    function _6a(_6b) {
        return $.data(_6b, "treegrid").data;
    };
    function _3f(_6c, _6d) {
        var row = _30(_6c, _6d);
        if (row._parentId) {
            return _30(_6c, row._parentId);
        } else {
            return null;
        }
    };
    function _1b(_6e, _6f) {
        var _70 = $.data(_6e, "treegrid").data;
        if (_6f) {
            var _71 = _30(_6e, _6f);
            _70 = _71 ? (_71.children || []) : [];
        }
        var _72 = [];
        $.easyui.forEach(_70, true, function (_73) {
            _72.push(_73);
        });
        return _72;
    };
    function _74(_75, _76) {
        var _77 = $.data(_75, "treegrid").options;
        var tr = _77.finder.getTr(_75, _76);
        var _78 = tr.children("td[field=\"" + _77.treeField + "\"]");
        return _78.find("span.tree-indent,span.tree-hit").length;
    };
    function _30(_79, _7a) {
        var _7b = $.data(_79, "treegrid");
        var _7c = _7b.options;
        var _7d = null;
        $.easyui.forEach(_7b.data, true, function (_7e) {
            if (_7e[_7c.idField] == _7a) {
                _7d = _7e;
                return false;
            }
        });
        return _7d;
    };
    function _7f(_80, _81) {
        var _82 = $.data(_80, "treegrid").options;
        var row = _30(_80, _81);
        var tr = _82.finder.getTr(_80, _81);
        var hit = tr.find("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        if (_82.onBeforeCollapse.call(_80, row) == false) {
            return;
        }
        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        row.state = "closed";
        tr = tr.next("tr.treegrid-tr-tree");
        var cc = tr.children("td").children("div");
        if (_82.animate) {
            cc.slideUp("normal", function () {
                $(_80).treegrid("autoSizeColumn");
                _16(_80, _81);
                _82.onCollapse.call(_80, row);
            });
        } else {
            cc.hide();
            $(_80).treegrid("autoSizeColumn");
            _16(_80, _81);
            _82.onCollapse.call(_80, row);
        }
    };
    function _83(_84, _85) {
        var _86 = $.data(_84, "treegrid").options;
        var tr = _86.finder.getTr(_84, _85);
        var hit = tr.find("span.tree-hit");
        var row = _30(_84, _85);
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            return;
        }
        if (_86.onBeforeExpand.call(_84, row) == false) {
            return;
        }
        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var _87 = tr.next("tr.treegrid-tr-tree");
        if (_87.length) {
            var cc = _87.children("td").children("div");
            _88(cc);
        } else {
            _47(_84, row[_86.idField]);
            var _87 = tr.next("tr.treegrid-tr-tree");
            var cc = _87.children("td").children("div");
            cc.hide();
            var _89 = $.extend({}, _86.queryParams || {});
            _89.id = row[_86.idField];
            _15(_84, row[_86.idField], _89, true, function () {
                if (cc.is(":empty")) {
                    _87.remove();
                } else {
                    _88(cc);
                }
            });
        }
        function _88(cc) {
            row.state = "open";
            if (_86.animate) {
                cc.slideDown("normal", function () {
                    $(_84).treegrid("autoSizeColumn");
                    _16(_84, _85);
                    _86.onExpand.call(_84, row);
                });
            } else {
                cc.show();
                $(_84).treegrid("autoSizeColumn");
                _16(_84, _85);
                _86.onExpand.call(_84, row);
            }
        };
    };
    function _26(_8a, _8b) {
        var _8c = $.data(_8a, "treegrid").options;
        var tr = _8c.finder.getTr(_8a, _8b);
        var hit = tr.find("span.tree-hit");
        if (hit.hasClass("tree-expanded")) {
            _7f(_8a, _8b);
        } else {
            _83(_8a, _8b);
        }
    };
    function _8d(_8e, _8f) {
        var _90 = $.data(_8e, "treegrid").options;
        var _91 = _1b(_8e, _8f);
        if (_8f) {
            _91.unshift(_30(_8e, _8f));
        }
        for (var i = 0; i < _91.length; i++) {
            _7f(_8e, _91[i][_90.idField]);
        }
    };
    function _92(_93, _94) {
        var _95 = $.data(_93, "treegrid").options;
        var _96 = _1b(_93, _94);
        if (_94) {
            _96.unshift(_30(_93, _94));
        }
        for (var i = 0; i < _96.length; i++) {
            _83(_93, _96[i][_95.idField]);
        }
    };
    function _97(_98, _99) {
        var _9a = $.data(_98, "treegrid").options;
        var ids = [];
        var p = _3f(_98, _99);
        while (p) {
            var id = p[_9a.idField];
            ids.unshift(id);
            p = _3f(_98, id);
        }
        for (var i = 0; i < ids.length; i++) {
            _83(_98, ids[i]);
        }
    };
    function _9b(_9c, _9d) {
        var _9e = $.data(_9c, "treegrid").options;
        if (_9d.parent) {
            var tr = _9e.finder.getTr(_9c, _9d.parent);
            if (tr.next("tr.treegrid-tr-tree").length == 0) {
                _47(_9c, _9d.parent);
            }
            var _9f = tr.children("td[field=\"" + _9e.treeField + "\"]").children("div.datagrid-cell");
            var _a0 = _9f.children("span.tree-icon");
            if (_a0.hasClass("tree-file")) {
                _a0.removeClass("tree-file").addClass("tree-folder tree-folder-open");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_a0);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
        }
        _4f(_9c, _9d.parent, _9d.data, true, true);
    };
    function _a1(_a2, _a3) {
        var ref = _a3.before || _a3.after;
        var _a4 = $.data(_a2, "treegrid").options;
        var _a5 = _3f(_a2, ref);
        _9b(_a2, { parent: (_a5 ? _a5[_a4.idField] : null), data: [_a3.data] });
        var _a6 = _a5 ? _a5.children : $(_a2).treegrid("getRoots");
        for (var i = 0; i < _a6.length; i++) {
            if (_a6[i][_a4.idField] == ref) {
                var _a7 = _a6[_a6.length - 1];
                _a6.splice(_a3.before ? i : (i + 1), 0, _a7);
                _a6.splice(_a6.length - 1, 1);
                break;
            }
        }
        _a8(true);
        _a8(false);
        _1f(_a2);
        $(_a2).treegrid("showLines");
        function _a8(_a9) {
            var _aa = _a9 ? 1 : 2;
            var tr = _a4.finder.getTr(_a2, _a3.data[_a4.idField], "body", _aa);
            var _ab = tr.closest("table.datagrid-btable");
            tr = tr.parent().children();
            var _ac = _a4.finder.getTr(_a2, ref, "body", _aa);
            if (_a3.before) {
                tr.insertBefore(_ac);
            } else {
                var sub = _ac.next("tr.treegrid-tr-tree");
                tr.insertAfter(sub.length ? sub : _ac);
            }
            _ab.remove();
        };
    };
    function _ad(_ae, _af) {
        var _b0 = $.data(_ae, "treegrid");
        var _b1 = _b0.options;
        var _b2 = _3f(_ae, _af);
        $(_ae).datagrid("deleteRow", _af);
        $.easyui.removeArrayItem(_b0.checkedRows, _b1.idField, _af);
        _1f(_ae);
        if (_b2) {
            _42(_ae, _b2[_b1.idField]);
        }
        _b0.total -= 1;
        $(_ae).datagrid("getPager").pagination("refresh", { total: _b0.total });
        $(_ae).treegrid("showLines");
    };
    function _b3(_b4) {
        var t = $(_b4);
        var _b5 = t.treegrid("options");
        if (_b5.lines) {
            t.treegrid("getPanel").addClass("tree-lines");
        } else {
            t.treegrid("getPanel").removeClass("tree-lines");
            return;
        }
        t.treegrid("getPanel").find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
        t.treegrid("getPanel").find("div.datagrid-cell").removeClass("tree-node-last tree-root-first tree-root-one");
        var _b6 = t.treegrid("getRoots");
        if (_b6.length > 1) {
            _b7(_b6[0]).addClass("tree-root-first");
        } else {
            if (_b6.length == 1) {
                _b7(_b6[0]).addClass("tree-root-one");
            }
        }
        _b8(_b6);
        _b9(_b6);
        function _b8(_ba) {
            $.map(_ba, function (_bb) {
                if (_bb.children && _bb.children.length) {
                    _b8(_bb.children);
                } else {
                    var _bc = _b7(_bb);
                    _bc.find(".tree-icon").prev().addClass("tree-join");
                }
            });
            if (_ba.length) {
                var _bd = _b7(_ba[_ba.length - 1]);
                _bd.addClass("tree-node-last");
                _bd.find(".tree-join").removeClass("tree-join").addClass("tree-joinbottom");
            }
        };
        function _b9(_be) {
            $.map(_be, function (_bf) {
                if (_bf.children && _bf.children.length) {
                    _b9(_bf.children);
                }
            });
            for (var i = 0; i < _be.length - 1; i++) {
                var _c0 = _be[i];
                var _c1 = t.treegrid("getLevel", _c0[_b5.idField]);
                var tr = _b5.finder.getTr(_b4, _c0[_b5.idField]);
                var cc = tr.next().find("tr.datagrid-row td[field=\"" + _b5.treeField + "\"] div.datagrid-cell");
                cc.find("span:eq(" + (_c1 - 1) + ")").addClass("tree-line");
            }
        };
        function _b7(_c2) {
            var tr = _b5.finder.getTr(_b4, _c2[_b5.idField]);
            var _c3 = tr.find("td[field=\"" + _b5.treeField + "\"] div.datagrid-cell");
            return _c3;
        };
    };
    $.fn.treegrid = function (_c4, _c5) {
        if (typeof _c4 == "string") {
            var _c6 = $.fn.treegrid.methods[_c4];
            if (_c6) {
                return _c6(this, _c5);
            } else {
                return this.datagrid(_c4, _c5);
            }
        }
        _c4 = _c4 || {};
        return this.each(function () {
            var _c7 = $.data(this, "treegrid");
            if (_c7) {
                $.extend(_c7.options, _c4);
            } else {
                _c7 = $.data(this, "treegrid", { options: $.extend({}, $.fn.treegrid.defaults, $.fn.treegrid.parseOptions(this), _c4), data: [], checkedRows: [], tmpIds: [] });
            }
            _1(this);
            if (_c7.options.data) {
                $(this).treegrid("loadData", _c7.options.data);
            }
            _15(this);
        });
    };
    $.fn.treegrid.methods = {
        options: function (jq) {
            return $.data(jq[0], "treegrid").options;
        }, resize: function (jq, _c8) {
            return jq.each(function () {
                $(this).datagrid("resize", _c8);
            });
        }, fixRowHeight: function (jq, _c9) {
            return jq.each(function () {
                _16(this, _c9);
            });
        }, loadData: function (jq, _ca) {
            return jq.each(function () {
                _4f(this, _ca.parent, _ca);
            });
        }, load: function (jq, _cb) {
            return jq.each(function () {
                $(this).treegrid("options").pageNumber = 1;
                $(this).treegrid("getPager").pagination({ pageNumber: 1 });
                $(this).treegrid("reload", _cb);
            });
        }, reload: function (jq, id) {
            return jq.each(function () {
                var _cc = $(this).treegrid("options");
                var _cd = {};
                if (typeof id == "object") {
                    _cd = id;
                } else {
                    _cd = $.extend({}, _cc.queryParams);
                    _cd.id = id;
                }
                if (_cd.id) {
                    var _ce = $(this).treegrid("find", _cd.id);
                    if (_ce.children) {
                        _ce.children.splice(0, _ce.children.length);
                    }
                    _cc.queryParams = _cd;
                    var tr = _cc.finder.getTr(this, _cd.id);
                    tr.next("tr.treegrid-tr-tree").remove();
                    tr.find("span.tree-hit").removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                    _83(this, _cd.id);
                } else {
                    _15(this, null, _cd);
                }
            });
        }, reloadFooter: function (jq, _cf) {
            return jq.each(function () {
                var _d0 = $.data(this, "treegrid").options;
                var dc = $.data(this, "datagrid").dc;
                if (_cf) {
                    $.data(this, "treegrid").footer = _cf;
                }
                if (_d0.showFooter) {
                    _d0.view.renderFooter.call(_d0.view, this, dc.footer1, true);
                    _d0.view.renderFooter.call(_d0.view, this, dc.footer2, false);
                    if (_d0.view.onAfterRender) {
                        _d0.view.onAfterRender.call(_d0.view, this);
                    }
                    $(this).treegrid("fixRowHeight");
                }
            });
        }, getData: function (jq) {
            return $.data(jq[0], "treegrid").data;
        }, getFooterRows: function (jq) {
            return $.data(jq[0], "treegrid").footer;
        }, getRoot: function (jq) {
            return _67(jq[0]);
        }, getRoots: function (jq) {
            return _6a(jq[0]);
        }, getParent: function (jq, id) {
            return _3f(jq[0], id);
        }, getChildren: function (jq, id) {
            return _1b(jq[0], id);
        }, getLevel: function (jq, id) {
            return _74(jq[0], id);
        }, find: function (jq, id) {
            return _30(jq[0], id);
        }, isLeaf: function (jq, id) {
            var _d1 = $.data(jq[0], "treegrid").options;
            var tr = _d1.finder.getTr(jq[0], id);
            var hit = tr.find("span.tree-hit");
            return hit.length == 0;
        }, select: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("selectRow", id);
            });
        }, unselect: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("unselectRow", id);
            });
        }, collapse: function (jq, id) {
            return jq.each(function () {
                _7f(this, id);
            });
        }, expand: function (jq, id) {
            return jq.each(function () {
                _83(this, id);
            });
        }, toggle: function (jq, id) {
            return jq.each(function () {
                _26(this, id);
            });
        }, collapseAll: function (jq, id) {
            return jq.each(function () {
                _8d(this, id);
            });
        }, expandAll: function (jq, id) {
            return jq.each(function () {
                _92(this, id);
            });
        }, expandTo: function (jq, id) {
            return jq.each(function () {
                _97(this, id);
            });
        }, append: function (jq, _d2) {
            return jq.each(function () {
                _9b(this, _d2);
            });
        }, insert: function (jq, _d3) {
            return jq.each(function () {
                _a1(this, _d3);
            });
        }, remove: function (jq, id) {
            return jq.each(function () {
                _ad(this, id);
            });
        }, pop: function (jq, id) {
            var row = jq.treegrid("find", id);
            jq.treegrid("remove", id);
            return row;
        }, refresh: function (jq, id) {
            return jq.each(function () {
                var _d4 = $.data(this, "treegrid").options;
                _d4.view.refreshRow.call(_d4.view, this, id);
            });
        }, update: function (jq, _d5) {
            return jq.each(function () {
                var _d6 = $.data(this, "treegrid").options;
                var row = _d5.row;
                _d6.view.updateRow.call(_d6.view, this, _d5.id, row);
                if (row.checked != undefined) {
                    row = _30(this, _d5.id);
                    $.extend(row, { checkState: row.checked ? "checked" : (row.checked === false ? "unchecked" : undefined) });
                    _42(this, _d5.id);
                }
            });
        }, beginEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("beginEdit", id);
                $(this).treegrid("fixRowHeight", id);
            });
        }, endEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("endEdit", id);
            });
        }, cancelEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("cancelEdit", id);
            });
        }, showLines: function (jq) {
            return jq.each(function () {
                _b3(this);
            });
        }, setSelectionState: function (jq) {
            return jq.each(function () {
                $(this).datagrid("setSelectionState");
                var _d7 = $(this).data("treegrid");
                for (var i = 0; i < _d7.tmpIds.length; i++) {
                    _27(this, _d7.tmpIds[i], true, true);
                }
                _d7.tmpIds = [];
            });
        }, getCheckedNodes: function (jq, _d8) {
            _d8 = _d8 || "checked";
            var _d9 = [];
            $.easyui.forEach(jq.data("treegrid").checkedRows, false, function (row) {
                if (row.checkState == _d8) {
                    _d9.push(row);
                }
            });
            return _d9;
        }, checkNode: function (jq, id) {
            return jq.each(function () {
                _27(this, id, true);
            });
        }, uncheckNode: function (jq, id) {
            return jq.each(function () {
                _27(this, id, false);
            });
        }, clearChecked: function (jq) {
            return jq.each(function () {
                var _da = this;
                var _db = $(_da).treegrid("options");
                $(_da).datagrid("clearChecked");
                $.map($(_da).treegrid("getCheckedNodes"), function (row) {
                    _27(_da, row[_db.idField], false, true);
                });
            });
        }
    };
    $.fn.treegrid.parseOptions = function (_dc) {
        return $.extend({}, $.fn.datagrid.parseOptions(_dc), $.parser.parseOptions(_dc, ["treeField", { checkbox: "boolean", cascadeCheck: "boolean", onlyLeafCheck: "boolean" }, { animate: "boolean" }]));
    };
    var _dd = $.extend({}, $.fn.datagrid.defaults.view, {
        render: function (_de, _df, _e0) {
            var _e1 = $.data(_de, "treegrid").options;
            var _e2 = $(_de).datagrid("getColumnFields", _e0);
            var _e3 = $.data(_de, "datagrid").rowIdPrefix;
            if (_e0) {
                if (!(_e1.rownumbers || (_e1.frozenColumns && _e1.frozenColumns.length))) {
                    return;
                }
            }
            var _e4 = this;
            if (this.treeNodes && this.treeNodes.length) {
                var _e5 = _e6.call(this, _e0, this.treeLevel, this.treeNodes);
                $(_df).append(_e5.join(""));
            }
            function _e6(_e7, _e8, _e9) {
                var _ea = $(_de).treegrid("getParent", _e9[0][_e1.idField]);
                var _eb = (_ea ? _ea.children.length : $(_de).treegrid("getRoots").length) - _e9.length;
                var _ec = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
                for (var i = 0; i < _e9.length; i++) {
                    var row = _e9[i];
                    if (row.state != "open" && row.state != "closed") {
                        row.state = "open";
                    }
                    var css = _e1.rowStyler ? _e1.rowStyler.call(_de, row) : "";
                    var cs = this.getStyleValue(css);
                    var cls = "class=\"datagrid-row " + (_eb++ % 2 && _e1.striped ? "datagrid-row-alt " : " ") + cs.c + "\"";
                    var _ed = cs.s ? "style=\"" + cs.s + "\"" : "";
                    var _ee = _e3 + "-" + (_e7 ? 1 : 2) + "-" + row[_e1.idField];
                    _ec.push("<tr id=\"" + _ee + "\" node-id=\"" + row[_e1.idField] + "\" " + cls + " " + _ed + ">");
                    _ec = _ec.concat(_e4.renderRow.call(_e4, _de, _e2, _e7, _e8, row));
                    _ec.push("</tr>");
                    if (row.children && row.children.length) {
                        var tt = _e6.call(this, _e7, _e8 + 1, row.children);
                        var v = row.state == "closed" ? "none" : "block";
                        _ec.push("<tr class=\"treegrid-tr-tree\"><td style=\"border:0px\" colspan=" + (_e2.length + (_e1.rownumbers ? 1 : 0)) + "><div style=\"display:" + v + "\">");
                        _ec = _ec.concat(tt);
                        _ec.push("</div></td></tr>");
                    }
                }
                _ec.push("</tbody></table>");
                return _ec;
            };
        }, renderFooter: function (_ef, _f0, _f1) {
            var _f2 = $.data(_ef, "treegrid").options;
            var _f3 = $.data(_ef, "treegrid").footer || [];
            var _f4 = $(_ef).datagrid("getColumnFields", _f1);
            var _f5 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < _f3.length; i++) {
                var row = _f3[i];
                row[_f2.idField] = row[_f2.idField] || ("foot-row-id" + i);
                _f5.push("<tr class=\"datagrid-row\" node-id=\"" + row[_f2.idField] + "\">");
                _f5.push(this.renderRow.call(this, _ef, _f4, _f1, 0, row));
                _f5.push("</tr>");
            }
            _f5.push("</tbody></table>");
            $(_f0).html(_f5.join(""));
        }, renderRow: function (_f6, _f7, _f8, _f9, row) {
            var _fa = $.data(_f6, "treegrid");
            var _fb = _fa.options;
            var cc = [];
            if (_f8 && _fb.rownumbers) {
                cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">0</div></td>");
            }
            for (var i = 0; i < _f7.length; i++) {
                var _fc = _f7[i];
                var col = $(_f6).datagrid("getColumnOption", _fc);
                if (col) {
                    var css = col.styler ? (col.styler(row[_fc], row) || "") : "";
                    var cs = this.getStyleValue(css);
                    var cls = cs.c ? "class=\"" + cs.c + "\"" : "";
                    var _fd = col.hidden ? "style=\"display:none;" + cs.s + "\"" : (cs.s ? "style=\"" + cs.s + "\"" : "");
                    cc.push("<td field=\"" + _fc + "\" " + cls + " " + _fd + ">");
                    var _fd = "";
                    if (!col.checkbox) {
                        if (col.align) {
                            _fd += "text-align:" + col.align + ";";
                        }
                        if (!_fb.nowrap) {
                            _fd += "white-space:normal;height:auto;";
                        } else {
                            if (_fb.autoRowHeight) {
                                _fd += "height:auto;";
                            }
                        }
                    }
                    cc.push("<div style=\"" + _fd + "\" ");
                    if (col.checkbox) {
                        cc.push("class=\"datagrid-cell-check ");
                    } else {
                        cc.push("class=\"datagrid-cell " + col.cellClass);
                    }
                    cc.push("\">");
                    if (col.checkbox) {
                        if (row.checked) {
                            cc.push("<input type=\"checkbox\" checked=\"checked\"");
                        } else {
                            cc.push("<input type=\"checkbox\"");
                        }
                        cc.push(" name=\"" + _fc + "\" value=\"" + (row[_fc] != undefined ? row[_fc] : "") + "\">");
                    } else {
                        var val = null;
                        if (col.formatter) {
                            val = col.formatter(row[_fc], row);
                        } else {
                            val = row[_fc];
                        }
                        if (_fc == _fb.treeField) {
                            for (var j = 0; j < _f9; j++) {
                                cc.push("<span class=\"tree-indent\"></span>");
                            }
                            if (row.state == "closed") {
                                cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
                                cc.push("<span class=\"tree-icon tree-folder " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                            } else {
                                if (row.children && row.children.length) {
                                    cc.push("<span class=\"tree-hit tree-expanded\"></span>");
                                    cc.push("<span class=\"tree-icon tree-folder tree-folder-open " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                } else {
                                    cc.push("<span class=\"tree-indent\"></span>");
                                    cc.push("<span class=\"tree-icon tree-file " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                }
                            }
                            if (this.hasCheckbox(_f6, row)) {
                                var _fe = 0;
                                var _ff = $.easyui.getArrayItem(_fa.checkedRows, _fb.idField, row[_fb.idField]);
                                if (_ff) {
                                    _fe = _ff.checkState == "checked" ? 1 : 2;
                                } else {
                                    var prow = $.easyui.getArrayItem(_fa.checkedRows, _fb.idField, row._parentId);
                                    if (prow && prow.checkState == "checked" && _fb.cascadeCheck) {
                                        _fe = 1;
                                        row.checked = true;
                                        $.easyui.addArrayItem(_fa.checkedRows, _fb.idField, row);
                                    } else {
                                        if (row.checked) {
                                            $.easyui.addArrayItem(_fa.tmpIds, row[_fb.idField]);
                                        }
                                    }
                                    row.checkState = _fe ? "checked" : "unchecked";
                                }
                                cc.push("<span class=\"tree-checkbox tree-checkbox" + _fe + "\"></span>");
                            } else {
                                row.checkState = undefined;
                                row.checked = undefined;
                            }
                            cc.push("<span class=\"tree-title\">" + val + "</span>");
                        } else {
                            cc.push(val);
                        }
                    }
                    cc.push("</div>");
                    cc.push("</td>");
                }
            }
            return cc.join("");
        }, hasCheckbox: function (_100, row) {
            var opts = $.data(_100, "treegrid").options;
            if (opts.checkbox) {
                if ($.isFunction(opts.checkbox)) {
                    if (opts.checkbox.call(_100, row)) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (opts.onlyLeafCheck) {
                        if (row.state == "open" && !(row.children && row.children.length)) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
            }
            return false;
        }, refreshRow: function (_101, id) {
            this.updateRow.call(this, _101, id, {});
        }, updateRow: function (_102, id, row) {
            var opts = $.data(_102, "treegrid").options;
            var _103 = $(_102).treegrid("find", id);
            $.extend(_103, row);
            var _104 = $(_102).treegrid("getLevel", id) - 1;
            var _105 = opts.rowStyler ? opts.rowStyler.call(_102, _103) : "";
            var _106 = $.data(_102, "datagrid").rowIdPrefix;
            var _107 = _103[opts.idField];
            function _108(_109) {
                var _10a = $(_102).treegrid("getColumnFields", _109);
                var tr = opts.finder.getTr(_102, id, "body", (_109 ? 1 : 2));
                var _10b = tr.find("div.datagrid-cell-rownumber").html();
                var _10c = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow(_102, _10a, _109, _104, _103));
                tr.attr("style", _105 || "");
                tr.find("div.datagrid-cell-rownumber").html(_10b);
                if (_10c) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
                if (_107 != id) {
                    tr.attr("id", _106 + "-" + (_109 ? 1 : 2) + "-" + _107);
                    tr.attr("node-id", _107);
                }
            };
            _108.call(this, true);
            _108.call(this, false);
            $(_102).treegrid("fixRowHeight", id);
        }, deleteRow: function (_10d, id) {
            var opts = $.data(_10d, "treegrid").options;
            var tr = opts.finder.getTr(_10d, id);
            tr.next("tr.treegrid-tr-tree").remove();
            tr.remove();
            var _10e = del(id);
            if (_10e) {
                if (_10e.children.length == 0) {
                    tr = opts.finder.getTr(_10d, _10e[opts.idField]);
                    tr.next("tr.treegrid-tr-tree").remove();
                    var cell = tr.children("td[field=\"" + opts.treeField + "\"]").children("div.datagrid-cell");
                    cell.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
                    cell.find(".tree-hit").remove();
                    $("<span class=\"tree-indent\"></span>").prependTo(cell);
                }
            }
            function del(id) {
                var cc;
                var _10f = $(_10d).treegrid("getParent", id);
                if (_10f) {
                    cc = _10f.children;
                } else {
                    cc = $(_10d).treegrid("getData");
                }
                for (var i = 0; i < cc.length; i++) {
                    if (cc[i][opts.idField] == id) {
                        cc.splice(i, 1);
                        break;
                    }
                }
                return _10f;
            };
        }, onBeforeRender: function (_110, _111, data) {
            if ($.isArray(_111)) {
                data = { total: _111.length, rows: _111 };
                _111 = null;
            }
            if (!data) {
                return false;
            }
            var _112 = $.data(_110, "treegrid");
            var opts = _112.options;
            if (data.length == undefined) {
                if (data.footer) {
                    _112.footer = data.footer;
                }
                if (data.total) {
                    _112.total = data.total;
                }
                data = this.transfer(_110, _111, data.rows);
            } else {
                function _113(_114, _115) {
                    for (var i = 0; i < _114.length; i++) {
                        var row = _114[i];
                        row._parentId = _115;
                        if (row.children && row.children.length) {
                            _113(row.children, row[opts.idField]);
                        }
                    }
                };
                _113(data, _111);
            }
            var node = _30(_110, _111);
            if (node) {
                if (node.children) {
                    node.children = node.children.concat(data);
                } else {
                    node.children = data;
                }
            } else {
                _112.data = _112.data.concat(data);
            }
            this.sort(_110, data);
            this.treeNodes = data;
            this.treeLevel = $(_110).treegrid("getLevel", _111);
        }, sort: function (_116, data) {
            var opts = $.data(_116, "treegrid").options;
            if (!opts.remoteSort && opts.sortName) {
                var _117 = opts.sortName.split(",");
                var _118 = opts.sortOrder.split(",");
                _119(data);
            }
            function _119(rows) {
                rows.sort(function (r1, r2) {
                    var r = 0;
                    for (var i = 0; i < _117.length; i++) {
                        var sn = _117[i];
                        var so = _118[i];
                        var col = $(_116).treegrid("getColumnOption", sn);
                        var _11a = col.sorter || function (a, b) {
                            return a == b ? 0 : (a > b ? 1 : -1);
                        };
                        r = _11a(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                        if (r != 0) {
                            return r;
                        }
                    }
                    return r;
                });
                for (var i = 0; i < rows.length; i++) {
                    var _11b = rows[i].children;
                    if (_11b && _11b.length) {
                        _119(_11b);
                    }
                }
            };
        }, transfer: function (_11c, _11d, data) {
            var opts = $.data(_11c, "treegrid").options;
            var rows = $.extend([], data);
            var _11e = _11f(_11d, rows);
            var toDo = $.extend([], _11e);
            while (toDo.length) {
                var node = toDo.shift();
                var _120 = _11f(node[opts.idField], rows);
                if (_120.length) {
                    if (node.children) {
                        node.children = node.children.concat(_120);
                    } else {
                        node.children = _120;
                    }
                    toDo = toDo.concat(_120);
                }
            }
            return _11e;
            function _11f(_121, rows) {
                var rr = [];
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row._parentId == _121) {
                        rr.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                }
                return rr;
            };
        }
    });
    $.fn.treegrid.defaults = $.extend({}, $.fn.datagrid.defaults, {
        treeField: null, checkbox: false, cascadeCheck: true, onlyLeafCheck: false, lines: false, animate: false, singleSelect: true, view: _dd, rowEvents: $.extend({}, $.fn.datagrid.defaults.rowEvents, { mouseover: _22(true), mouseout: _22(false), click: _24 }), loader: function (_122, _123, _124) {
            var opts = $(this).treegrid("options");
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method, url: opts.url, data: _122, dataType: "json", success: function (data) {
                    _123(data);
                }, error: function () {
                    _124.apply(this, arguments);
                }
            });
        }, loadFilter: function (data, _125) {
            return data;
        }, finder: {
            getTr: function (_126, id, type, _127) {
                type = type || "body";
                _127 = _127 || 0;
                var dc = $.data(_126, "datagrid").dc;
                if (_127 == 0) {
                    var opts = $.data(_126, "treegrid").options;
                    var tr1 = opts.finder.getTr(_126, id, type, 1);
                    var tr2 = opts.finder.getTr(_126, id, type, 2);
                    return tr1.add(tr2);
                } else {
                    if (type == "body") {
                        var tr = $("#" + $.data(_126, "datagrid").rowIdPrefix + "-" + _127 + "-" + id);
                        if (!tr.length) {
                            tr = (_127 == 1 ? dc.body1 : dc.body2).find("tr[node-id=\"" + id + "\"]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (_127 == 1 ? dc.footer1 : dc.footer2).find("tr[node-id=\"" + id + "\"]");
                        } else {
                            if (type == "selected") {
                                return (_127 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (_127 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (_127 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-checked");
                                    } else {
                                        if (type == "last") {
                                            return (_127 == 1 ? dc.body1 : dc.body2).find("tr:last[node-id]");
                                        } else {
                                            if (type == "allbody") {
                                                return (_127 == 1 ? dc.body1 : dc.body2).find("tr[node-id]");
                                            } else {
                                                if (type == "allfooter") {
                                                    return (_127 == 1 ? dc.footer1 : dc.footer2).find("tr[node-id]");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, getRow: function (_128, p) {
                var id = (typeof p == "object") ? p.attr("node-id") : p;
                return $(_128).treegrid("find", id);
            }, getRows: function (_129) {
                return $(_129).treegrid("getChildren");
            }
        }, onBeforeLoad: function (row, _12a) {
        }, onLoadSuccess: function (row, data) {
        }, onLoadError: function () {
        }, onBeforeCollapse: function (row) {
        }, onCollapse: function (row) {
        }, onBeforeExpand: function (row) {
        }, onExpand: function (row) {
        }, onClickRow: function (row) {
        }, onDblClickRow: function (row) {
        }, onClickCell: function (_12b, row) {
        }, onDblClickCell: function (_12c, row) {
        }, onContextMenu: function (e, row) {
        }, onBeforeEdit: function (row) {
        }, onAfterEdit: function (row, _12d) {
        }, onCancelEdit: function (row) {
        }, onBeforeCheckNode: function (row, _12e) {
        }, onCheckNode: function (row, _12f) {
        },
    });
})(jQuery);


/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.6'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.6'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.6'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.6'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.6'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.6'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.6'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.6'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.6'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.6'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

/* ========================================================================
 * bootstrap-switch - v3.3.2
 * http://www.bootstrap-switch.org
 * ========================================================================
 * Copyright 2012-2013 Mattia Larentis
 *
 * ========================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================================
 */

(function() {
  var __slice = [].slice;

  (function($, window) {
    "use strict";
    var BootstrapSwitch;
    BootstrapSwitch = (function() {
      function BootstrapSwitch(element, options) {
        if (options == null) {
          options = {};
        }
        this.$element = $(element);
        this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, {
          state: this.$element.is(":checked"),
          size: this.$element.data("size"),
          animate: this.$element.data("animate"),
          disabled: this.$element.is(":disabled"),
          readonly: this.$element.is("[readonly]"),
          indeterminate: this.$element.data("indeterminate"),
          inverse: this.$element.data("inverse"),
          radioAllOff: this.$element.data("radio-all-off"),
          onColor: this.$element.data("on-color"),
          offColor: this.$element.data("off-color"),
          onText: this.$element.data("on-text"),
          offText: this.$element.data("off-text"),
          labelText: this.$element.data("label-text"),
          handleWidth: this.$element.data("handle-width"),
          labelWidth: this.$element.data("label-width"),
          baseClass: this.$element.data("base-class"),
          wrapperClass: this.$element.data("wrapper-class")
        }, options);
        this.$wrapper = $("<div>", {
          "class": (function(_this) {
            return function() {
              var classes;
              classes = ["" + _this.options.baseClass].concat(_this._getClasses(_this.options.wrapperClass));
              classes.push(_this.options.state ? "" + _this.options.baseClass + "-on" : "" + _this.options.baseClass + "-off");
              if (_this.options.size != null) {
                classes.push("" + _this.options.baseClass + "-" + _this.options.size);
              }
              if (_this.options.disabled) {
                classes.push("" + _this.options.baseClass + "-disabled");
              }
              if (_this.options.readonly) {
                classes.push("" + _this.options.baseClass + "-readonly");
              }
              if (_this.options.indeterminate) {
                classes.push("" + _this.options.baseClass + "-indeterminate");
              }
              if (_this.options.inverse) {
                classes.push("" + _this.options.baseClass + "-inverse");
              }
              if (_this.$element.attr("id")) {
                classes.push("" + _this.options.baseClass + "-id-" + (_this.$element.attr("id")));
              }
              return classes.join(" ");
            };
          })(this)()
        });
        this.$container = $("<div>", {
          "class": "" + this.options.baseClass + "-container"
        });
        this.$on = $("<span>", {
          html: this.options.onText,
          "class": "" + this.options.baseClass + "-handle-on " + this.options.baseClass + "-" + this.options.onColor
        });
        this.$off = $("<span>", {
          html: this.options.offText,
          "class": "" + this.options.baseClass + "-handle-off " + this.options.baseClass + "-" + this.options.offColor
        });
        this.$label = $("<span>", {
          html: this.options.labelText,
          "class": "" + this.options.baseClass + "-label"
        });
        this.$element.on("init.bootstrapSwitch", (function(_this) {
          return function() {
            return _this.options.onInit.apply(element, arguments);
          };
        })(this));
        this.$element.on("switchChange.bootstrapSwitch", (function(_this) {
          return function() {
            return _this.options.onSwitchChange.apply(element, arguments);
          };
        })(this));
        this.$container = this.$element.wrap(this.$container).parent();
        this.$wrapper = this.$container.wrap(this.$wrapper).parent();
        this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);
        if (this.options.indeterminate) {
          this.$element.prop("indeterminate", true);
        }
        this._init();
        this._elementHandlers();
        this._handleHandlers();
        this._labelHandlers();
        this._formHandler();
        this._externalLabelHandler();
        this.$element.trigger("init.bootstrapSwitch");
      }

      BootstrapSwitch.prototype._constructor = BootstrapSwitch;

      BootstrapSwitch.prototype.state = function(value, skip) {
        if (typeof value === "undefined") {
          return this.options.state;
        }
        if (this.options.disabled || this.options.readonly) {
          return this.$element;
        }
        if (this.options.state && !this.options.radioAllOff && this.$element.is(":radio")) {
          return this.$element;
        }
        if (this.options.indeterminate) {
          this.indeterminate(false);
        }
        value = !!value;
        this.$element.prop("checked", value).trigger("change.bootstrapSwitch", skip);
        return this.$element;
      };

      BootstrapSwitch.prototype.toggleState = function(skip) {
        if (this.options.disabled || this.options.readonly) {
          return this.$element;
        }
        if (this.options.indeterminate) {
          this.indeterminate(false);
          return this.state(true);
        } else {
          return this.$element.prop("checked", !this.options.state).trigger("change.bootstrapSwitch", skip);
        }
      };

      BootstrapSwitch.prototype.size = function(value) {
        if (typeof value === "undefined") {
          return this.options.size;
        }
        if (this.options.size != null) {
          this.$wrapper.removeClass("" + this.options.baseClass + "-" + this.options.size);
        }
        if (value) {
          this.$wrapper.addClass("" + this.options.baseClass + "-" + value);
        }
        this._width();
        this._containerPosition();
        this.options.size = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.animate = function(value) {
        if (typeof value === "undefined") {
          return this.options.animate;
        }
        value = !!value;
        if (value === this.options.animate) {
          return this.$element;
        }
        return this.toggleAnimate();
      };

      BootstrapSwitch.prototype.toggleAnimate = function() {
        this.options.animate = !this.options.animate;
        this.$wrapper.toggleClass("" + this.options.baseClass + "-animate");
        return this.$element;
      };

      BootstrapSwitch.prototype.disabled = function(value) {
        if (typeof value === "undefined") {
          return this.options.disabled;
        }
        value = !!value;
        if (value === this.options.disabled) {
          return this.$element;
        }
        return this.toggleDisabled();
      };

      BootstrapSwitch.prototype.toggleDisabled = function() {
        this.options.disabled = !this.options.disabled;
        this.$element.prop("disabled", this.options.disabled);
        this.$wrapper.toggleClass("" + this.options.baseClass + "-disabled");
        return this.$element;
      };

      BootstrapSwitch.prototype.readonly = function(value) {
        if (typeof value === "undefined") {
          return this.options.readonly;
        }
        value = !!value;
        if (value === this.options.readonly) {
          return this.$element;
        }
        return this.toggleReadonly();
      };

      BootstrapSwitch.prototype.toggleReadonly = function() {
        this.options.readonly = !this.options.readonly;
        this.$element.prop("readonly", this.options.readonly);
        this.$wrapper.toggleClass("" + this.options.baseClass + "-readonly");
        return this.$element;
      };

      BootstrapSwitch.prototype.indeterminate = function(value) {
        if (typeof value === "undefined") {
          return this.options.indeterminate;
        }
        value = !!value;
        if (value === this.options.indeterminate) {
          return this.$element;
        }
        return this.toggleIndeterminate();
      };

      BootstrapSwitch.prototype.toggleIndeterminate = function() {
        this.options.indeterminate = !this.options.indeterminate;
        this.$element.prop("indeterminate", this.options.indeterminate);
        this.$wrapper.toggleClass("" + this.options.baseClass + "-indeterminate");
        this._containerPosition();
        return this.$element;
      };

      BootstrapSwitch.prototype.inverse = function(value) {
        if (typeof value === "undefined") {
          return this.options.inverse;
        }
        value = !!value;
        if (value === this.options.inverse) {
          return this.$element;
        }
        return this.toggleInverse();
      };

      BootstrapSwitch.prototype.toggleInverse = function() {
        var $off, $on;
        this.$wrapper.toggleClass("" + this.options.baseClass + "-inverse");
        $on = this.$on.clone(true);
        $off = this.$off.clone(true);
        this.$on.replaceWith($off);
        this.$off.replaceWith($on);
        this.$on = $off;
        this.$off = $on;
        this.options.inverse = !this.options.inverse;
        return this.$element;
      };

      BootstrapSwitch.prototype.onColor = function(value) {
        var color;
        color = this.options.onColor;
        if (typeof value === "undefined") {
          return color;
        }
        if (color != null) {
          this.$on.removeClass("" + this.options.baseClass + "-" + color);
        }
        this.$on.addClass("" + this.options.baseClass + "-" + value);
        this.options.onColor = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.offColor = function(value) {
        var color;
        color = this.options.offColor;
        if (typeof value === "undefined") {
          return color;
        }
        if (color != null) {
          this.$off.removeClass("" + this.options.baseClass + "-" + color);
        }
        this.$off.addClass("" + this.options.baseClass + "-" + value);
        this.options.offColor = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.onText = function(value) {
        if (typeof value === "undefined") {
          return this.options.onText;
        }
        this.$on.html(value);
        this._width();
        this._containerPosition();
        this.options.onText = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.offText = function(value) {
        if (typeof value === "undefined") {
          return this.options.offText;
        }
        this.$off.html(value);
        this._width();
        this._containerPosition();
        this.options.offText = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.labelText = function(value) {
        if (typeof value === "undefined") {
          return this.options.labelText;
        }
        this.$label.html(value);
        this._width();
        this.options.labelText = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.handleWidth = function(value) {
        if (typeof value === "undefined") {
          return this.options.handleWidth;
        }
        this.options.handleWidth = value;
        this._width();
        this._containerPosition();
        return this.$element;
      };

      BootstrapSwitch.prototype.labelWidth = function(value) {
        if (typeof value === "undefined") {
          return this.options.labelWidth;
        }
        this.options.labelWidth = value;
        this._width();
        this._containerPosition();
        return this.$element;
      };

      BootstrapSwitch.prototype.baseClass = function(value) {
        return this.options.baseClass;
      };

      BootstrapSwitch.prototype.wrapperClass = function(value) {
        if (typeof value === "undefined") {
          return this.options.wrapperClass;
        }
        if (!value) {
          value = $.fn.bootstrapSwitch.defaults.wrapperClass;
        }
        this.$wrapper.removeClass(this._getClasses(this.options.wrapperClass).join(" "));
        this.$wrapper.addClass(this._getClasses(value).join(" "));
        this.options.wrapperClass = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.radioAllOff = function(value) {
        if (typeof value === "undefined") {
          return this.options.radioAllOff;
        }
        value = !!value;
        if (value === this.options.radioAllOff) {
          return this.$element;
        }
        this.options.radioAllOff = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.onInit = function(value) {
        if (typeof value === "undefined") {
          return this.options.onInit;
        }
        if (!value) {
          value = $.fn.bootstrapSwitch.defaults.onInit;
        }
        this.options.onInit = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.onSwitchChange = function(value) {
        if (typeof value === "undefined") {
          return this.options.onSwitchChange;
        }
        if (!value) {
          value = $.fn.bootstrapSwitch.defaults.onSwitchChange;
        }
        this.options.onSwitchChange = value;
        return this.$element;
      };

      BootstrapSwitch.prototype.destroy = function() {
        var $form;
        $form = this.$element.closest("form");
        if ($form.length) {
          $form.off("reset.bootstrapSwitch").removeData("bootstrap-switch");
        }
        this.$container.children().not(this.$element).remove();
        this.$element.unwrap().unwrap().off(".bootstrapSwitch").removeData("bootstrap-switch");
        return this.$element;
      };

      BootstrapSwitch.prototype._width = function() {
        var $handles, handleWidth;
        $handles = this.$on.add(this.$off);
        $handles.add(this.$label).css("width", "");
        handleWidth = this.options.handleWidth === "auto" ? Math.max(this.$on.width(), this.$off.width()) : this.options.handleWidth;
        $handles.width(handleWidth);
        this.$label.width((function(_this) {
          return function(index, width) {
            if (_this.options.labelWidth !== "auto") {
              return _this.options.labelWidth;
            }
            if (width < handleWidth) {
              return handleWidth;
            } else {
              return width;
            }
          };
        })(this));
        this._handleWidth = this.$on.outerWidth();
        this._labelWidth = this.$label.outerWidth();
        this.$container.width((this._handleWidth * 2) + this._labelWidth);
        return this.$wrapper.width(this._handleWidth + this._labelWidth);
      };

      BootstrapSwitch.prototype._containerPosition = function(state, callback) {
        if (state == null) {
          state = this.options.state;
        }
        this.$container.css("margin-left", (function(_this) {
          return function() {
            var values;
            values = [0, "-" + _this._handleWidth + "px"];
            if (_this.options.indeterminate) {
              return "-" + (_this._handleWidth / 2) + "px";
            }
            if (state) {
              if (_this.options.inverse) {
                return values[1];
              } else {
                return values[0];
              }
            } else {
              if (_this.options.inverse) {
                return values[0];
              } else {
                return values[1];
              }
            }
          };
        })(this));
        if (!callback) {
          return;
        }
        return setTimeout(function() {
          return callback();
        }, 50);
      };

      BootstrapSwitch.prototype._init = function() {
        var init, initInterval;
        init = (function(_this) {
          return function() {
            _this._width();
            return _this._containerPosition(null, function() {
              if (_this.options.animate) {
                return _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
              }
            });
          };
        })(this);
        if (this.$wrapper.is(":visible")) {
          return init();
        }
        return initInterval = window.setInterval((function(_this) {
          return function() {
            if (_this.$wrapper.is(":visible")) {
              init();
              return window.clearInterval(initInterval);
            }
          };
        })(this), 50);
      };

      BootstrapSwitch.prototype._elementHandlers = function() {
        return this.$element.on({
          "change.bootstrapSwitch": (function(_this) {
            return function(e, skip) {
              var state;
              e.preventDefault();
              e.stopImmediatePropagation();
              state = _this.$element.is(":checked");
              _this._containerPosition(state);
              if (state === _this.options.state) {
                return;
              }
              _this.options.state = state;
              _this.$wrapper.toggleClass("" + _this.options.baseClass + "-off").toggleClass("" + _this.options.baseClass + "-on");
              if (!skip) {
                if (_this.$element.is(":radio")) {
                  $("[name='" + (_this.$element.attr('name')) + "']").not(_this.$element).prop("checked", false).trigger("change.bootstrapSwitch", true);
                }
                return _this.$element.trigger("switchChange.bootstrapSwitch", [state]);
              }
            };
          })(this),
          "focus.bootstrapSwitch": (function(_this) {
            return function(e) {
              e.preventDefault();
              return _this.$wrapper.addClass("" + _this.options.baseClass + "-focused");
            };
          })(this),
          "blur.bootstrapSwitch": (function(_this) {
            return function(e) {
              e.preventDefault();
              return _this.$wrapper.removeClass("" + _this.options.baseClass + "-focused");
            };
          })(this),
          "keydown.bootstrapSwitch": (function(_this) {
            return function(e) {
              if (!e.which || _this.options.disabled || _this.options.readonly) {
                return;
              }
              switch (e.which) {
                case 37:
                  e.preventDefault();
                  e.stopImmediatePropagation();
                  return _this.state(false);
                case 39:
                  e.preventDefault();
                  e.stopImmediatePropagation();
                  return _this.state(true);
              }
            };
          })(this)
        });
      };

      BootstrapSwitch.prototype._handleHandlers = function() {
        this.$on.on("click.bootstrapSwitch", (function(_this) {
          return function(event) {
            event.preventDefault();
            event.stopPropagation();
            _this.state(false);
            return _this.$element.trigger("focus.bootstrapSwitch");
          };
        })(this));
        return this.$off.on("click.bootstrapSwitch", (function(_this) {
          return function(event) {
            event.preventDefault();
            event.stopPropagation();
            _this.state(true);
            return _this.$element.trigger("focus.bootstrapSwitch");
          };
        })(this));
      };

      BootstrapSwitch.prototype._labelHandlers = function() {
        return this.$label.on({
          "mousedown.bootstrapSwitch touchstart.bootstrapSwitch": (function(_this) {
            return function(e) {
              if (_this._dragStart || _this.options.disabled || _this.options.readonly) {
                return;
              }
              e.preventDefault();
              e.stopPropagation();
              _this._dragStart = (e.pageX || e.originalEvent.touches[0].pageX) - parseInt(_this.$container.css("margin-left"), 10);
              if (_this.options.animate) {
                _this.$wrapper.removeClass("" + _this.options.baseClass + "-animate");
              }
              return _this.$element.trigger("focus.bootstrapSwitch");
            };
          })(this),
          "mousemove.bootstrapSwitch touchmove.bootstrapSwitch": (function(_this) {
            return function(e) {
              var difference;
              if (_this._dragStart == null) {
                return;
              }
              e.preventDefault();
              difference = (e.pageX || e.originalEvent.touches[0].pageX) - _this._dragStart;
              if (difference < -_this._handleWidth || difference > 0) {
                return;
              }
              _this._dragEnd = difference;
              return _this.$container.css("margin-left", "" + _this._dragEnd + "px");
            };
          })(this),
          "mouseup.bootstrapSwitch touchend.bootstrapSwitch": (function(_this) {
            return function(e) {
              var state;
              if (!_this._dragStart) {
                return;
              }
              e.preventDefault();
              if (_this.options.animate) {
                _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
              }
              if (_this._dragEnd) {
                state = _this._dragEnd > -(_this._handleWidth / 2);
                _this._dragEnd = false;
                _this.state(_this.options.inverse ? !state : state);
              } else {
                _this.state(!_this.options.state);
              }
              return _this._dragStart = false;
            };
          })(this),
          "mouseleave.bootstrapSwitch": (function(_this) {
            return function(e) {
              return _this.$label.trigger("mouseup.bootstrapSwitch");
            };
          })(this)
        });
      };

      BootstrapSwitch.prototype._externalLabelHandler = function() {
        var $externalLabel;
        $externalLabel = this.$element.closest("label");
        return $externalLabel.on("click", (function(_this) {
          return function(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            if (event.target === $externalLabel[0]) {
              return _this.toggleState();
            }
          };
        })(this));
      };

      BootstrapSwitch.prototype._formHandler = function() {
        var $form;
        $form = this.$element.closest("form");
        if ($form.data("bootstrap-switch")) {
          return;
        }
        return $form.on("reset.bootstrapSwitch", function() {
          return window.setTimeout(function() {
            return $form.find("input").filter(function() {
              return $(this).data("bootstrap-switch");
            }).each(function() {
              return $(this).bootstrapSwitch("state", this.checked);
            });
          }, 1);
        }).data("bootstrap-switch", true);
      };

      BootstrapSwitch.prototype._getClasses = function(classes) {
        var c, cls, _i, _len;
        if (!$.isArray(classes)) {
          return ["" + this.options.baseClass + "-" + classes];
        }
        cls = [];
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          c = classes[_i];
          cls.push("" + this.options.baseClass + "-" + c);
        }
        return cls;
      };

      return BootstrapSwitch;

    })();
    $.fn.bootstrapSwitch = function() {
      var args, option, ret;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      ret = this;
      this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data("bootstrap-switch");
        if (!data) {
          $this.data("bootstrap-switch", data = new BootstrapSwitch(this, option));
        }
        if (typeof option === "string") {
          return ret = data[option].apply(data, args);
        }
      });
      return ret;
    };
    $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;
    return $.fn.bootstrapSwitch.defaults = {
      state: true,
      size: null,
      animate: true,
      disabled: false,
      readonly: false,
      indeterminate: false,
      inverse: false,
      radioAllOff: false,
      onColor: "primary",
      offColor: "default",
      onText: "ON",
      offText: "OFF",
      labelText: "&nbsp;",
      handleWidth: "auto",
      labelWidth: "auto",
      baseClass: "bootstrap-switch",
      wrapperClass: "wrapper",
      onInit: function() {},
      onSwitchChange: function() {}
    };
  })(window.jQuery, window);

}).call(this);

/*
 * jQuery MiniColors: A tiny color picker built on jQuery
 *
 * Copyright: Cory LaViska for A Beautiful Site, LLC
 *
 * Contributions and bug reports: https://github.com/claviska/jquery-minicolors
 *
 * @license: http://opensource.org/licenses/MIT
 *
 */
if(jQuery) (function($) {

    // Defaults
    $.minicolors = {
        defaults: {
            animationSpeed: 50,
            animationEasing: 'swing',
            change: null,
            changeDelay: 0,
            control: 'hue',
            dataUris: true,
            defaultValue: '',
            hide: null,
            hideSpeed: 100,
            inline: false,
            letterCase: 'lowercase',
            opacity: false,
            position: 'bottom left',
            show: null,
            showSpeed: 100,
            theme: 'default'
        }
    };

    // Public methods
    $.extend($.fn, {
        minicolors: function(method, data) {

            switch(method) {

                // Destroy the control
                case 'destroy':
                    $(this).each( function() {
                        destroy($(this));
                    });
                    return $(this);

                // Hide the color picker
                case 'hide':
                    hide();
                    return $(this);

                // Get/set opacity
                case 'opacity':
                    // Getter
                    if( data === undefined ) {
                        // Getter
                        return $(this).attr('data-opacity');
                    } else {
                        // Setter
                        $(this).each( function() {
                            updateFromInput($(this).attr('data-opacity', data));
                        });
                    }
                    return $(this);

                // Get an RGB(A) object based on the current color/opacity
                case 'rgbObject':
                    return rgbObject($(this), method === 'rgbaObject');

                // Get an RGB(A) string based on the current color/opacity
                case 'rgbString':
                case 'rgbaString':
                    return rgbString($(this), method === 'rgbaString');

                // Get/set settings on the fly
                case 'settings':
                    if( data === undefined ) {
                        return $(this).data('minicolors-settings');
                    } else {
                        // Setter
                        $(this).each( function() {
                            var settings = $(this).data('minicolors-settings') || {};
                            destroy($(this));
                            $(this).minicolors($.extend(true, settings, data));
                        });
                    }
                    return $(this);

                // Show the color picker
                case 'show':
                    show( $(this).eq(0) );
                    return $(this);

                // Get/set the hex color value
                case 'value':
                    if( data === undefined ) {
                        // Getter
                        return $(this).val();
                    } else {
                        // Setter
                        $(this).each( function() {
                            updateFromInput($(this).val(data));
                        });
                    }
                    return $(this);

                // Initializes the control
                default:
                    if( method !== 'create' ) data = method;
                    $(this).each( function() {
                        init($(this), data);
                    });
                    return $(this);

            }

        }
    });

    // Initialize input elements
    function init(input, settings) {

        var minicolors = $('<div class="minicolors" />'),
            defaults = $.minicolors.defaults;

        // Do nothing if already initialized
        if( input.data('minicolors-initialized') ) return;

        // Handle settings
        settings = $.extend(true, {}, defaults, settings);

        // The wrapper
        minicolors
            .addClass('minicolors-theme-' + settings.theme)
            .toggleClass('minicolors-with-opacity', settings.opacity)
            .toggleClass('minicolors-no-data-uris', settings.dataUris !== true);

        // Custom positioning
        if( settings.position !== undefined ) {
            $.each(settings.position.split(' '), function() {
                minicolors.addClass('minicolors-position-' + this);
            });
        }

        // The input
        input
            .addClass('minicolors-input')
            .data('minicolors-initialized', false)
            .data('minicolors-settings', settings)
            .prop('size', 7)
            .wrap(minicolors)
            .after(
                '<div class="minicolors-panel minicolors-slider-' + settings.control + '">' +
                    '<div class="minicolors-slider minicolors-sprite">' +
                        '<div class="minicolors-picker"></div>' +
                    '</div>' +
                    '<div class="minicolors-opacity-slider minicolors-sprite">' +
                        '<div class="minicolors-picker"></div>' +
                    '</div>' +
                    '<div class="minicolors-grid minicolors-sprite">' +
                        '<div class="minicolors-grid-inner"></div>' +
                        '<div class="minicolors-picker"><div></div></div>' +
                    '</div>' +
                '</div>'
            );

        // The swatch
        if( !settings.inline ) {
            input.after('<span class="minicolors-swatch minicolors-sprite"><span class="minicolors-swatch-color"></span></span>');
            input.next('.minicolors-swatch').on('click', function(event) {
                event.preventDefault();
                input.focus();
            });
        }

        // Prevent text selection in IE
        input.parent().find('.minicolors-panel').on('selectstart', function() { return false; }).end();

        // Inline controls
        if( settings.inline ) input.parent().addClass('minicolors-inline');

        updateFromInput(input, false);

        input.data('minicolors-initialized', true);

    }

    // Returns the input back to its original state
    function destroy(input) {

        var minicolors = input.parent();

        // Revert the input element
        input
            .removeData('minicolors-initialized')
            .removeData('minicolors-settings')
            .removeProp('size')
            .removeClass('minicolors-input');

        // Remove the wrap and destroy whatever remains
        minicolors.before(input).remove();

    }

    // Shows the specified dropdown panel
    function show(input) {

        var minicolors = input.parent(),
            panel = minicolors.find('.minicolors-panel'),
            settings = input.data('minicolors-settings');

        // Do nothing if uninitialized, disabled, inline, or already open
        if( !input.data('minicolors-initialized') ||
            input.prop('disabled') ||
            minicolors.hasClass('minicolors-inline') ||
            minicolors.hasClass('minicolors-focus')
        ) return;

        hide();

        minicolors.addClass('minicolors-focus');
        panel
            .stop(true, true)
            .fadeIn(settings.showSpeed, function() {
                if( settings.show ) settings.show.call(input.get(0));
            });

    }

    // Hides all dropdown panels
    function hide() {

        $('.minicolors-focus').each( function() {

            var minicolors = $(this),
                input = minicolors.find('.minicolors-input'),
                panel = minicolors.find('.minicolors-panel'),
                settings = input.data('minicolors-settings');

            panel.fadeOut(settings.hideSpeed, function() {
                if( settings.hide ) settings.hide.call(input.get(0));
                minicolors.removeClass('minicolors-focus');
            });

        });
    }

    // Moves the selected picker
    function move(target, event, animate) {

        var input = target.parents('.minicolors').find('.minicolors-input'),
            settings = input.data('minicolors-settings'),
            picker = target.find('[class$=-picker]'),
            offsetX = target.offset().left,
            offsetY = target.offset().top,
            x = Math.round(event.pageX - offsetX),
            y = Math.round(event.pageY - offsetY),
            duration = animate ? settings.animationSpeed : 0,
            wx, wy, r, phi;

        // Touch support
        if( event.originalEvent.changedTouches ) {
            x = event.originalEvent.changedTouches[0].pageX - offsetX;
            y = event.originalEvent.changedTouches[0].pageY - offsetY;
        }

        // Constrain picker to its container
        if( x < 0 ) x = 0;
        if( y < 0 ) y = 0;
        if( x > target.width() ) x = target.width();
        if( y > target.height() ) y = target.height();

        // Constrain color wheel values to the wheel
        if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {
            wx = 75 - x;
            wy = 75 - y;
            r = Math.sqrt(wx * wx + wy * wy);
            phi = Math.atan2(wy, wx);
            if( phi < 0 ) phi += Math.PI * 2;
            if( r > 75 ) {
                r = 75;
                x = 75 - (75 * Math.cos(phi));
                y = 75 - (75 * Math.sin(phi));
            }
            x = Math.round(x);
            y = Math.round(y);
        }

        // Move the picker
        if( target.is('.minicolors-grid') ) {
            picker
                .stop(true)
                .animate({
                    top: y + 'px',
                    left: x + 'px'
                }, duration, settings.animationEasing, function() {
                    updateFromControl(input, target);
                });
        } else {
            picker
                .stop(true)
                .animate({
                    top: y + 'px'
                }, duration, settings.animationEasing, function() {
                    updateFromControl(input, target);
                });
        }

    }

    // Sets the input based on the color picker values
    function updateFromControl(input, target) {

        function getCoords(picker, container) {

            var left, top;
            if( !picker.length || !container ) return null;
            left = picker.offset().left;
            top = picker.offset().top;

            return {
                x: left - container.offset().left + (picker.outerWidth() / 2),
                y: top - container.offset().top + (picker.outerHeight() / 2)
            };

        }

        var hue, saturation, brightness, x, y, r, phi,

            hex = input.val(),
            opacity = input.attr('data-opacity'),

            // Helpful references
            minicolors = input.parent(),
            settings = input.data('minicolors-settings'),
            swatch = minicolors.find('.minicolors-swatch'),

            // Panel objects
            grid = minicolors.find('.minicolors-grid'),
            slider = minicolors.find('.minicolors-slider'),
            opacitySlider = minicolors.find('.minicolors-opacity-slider'),

            // Picker objects
            gridPicker = grid.find('[class$=-picker]'),
            sliderPicker = slider.find('[class$=-picker]'),
            opacityPicker = opacitySlider.find('[class$=-picker]'),

            // Picker positions
            gridPos = getCoords(gridPicker, grid),
            sliderPos = getCoords(sliderPicker, slider),
            opacityPos = getCoords(opacityPicker, opacitySlider);

        // Handle colors
        if( target.is('.minicolors-grid, .minicolors-slider') ) {

            // Determine HSB values
            switch(settings.control) {

                case 'wheel':
                    // Calculate hue, saturation, and brightness
                    x = (grid.width() / 2) - gridPos.x;
                    y = (grid.height() / 2) - gridPos.y;
                    r = Math.sqrt(x * x + y * y);
                    phi = Math.atan2(y, x);
                    if( phi < 0 ) phi += Math.PI * 2;
                    if( r > 75 ) {
                        r = 75;
                        gridPos.x = 69 - (75 * Math.cos(phi));
                        gridPos.y = 69 - (75 * Math.sin(phi));
                    }
                    saturation = keepWithin(r / 0.75, 0, 100);
                    hue = keepWithin(phi * 180 / Math.PI, 0, 360);
                    brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
                    hex = hsb2hex({
                        h: hue,
                        s: saturation,
                        b: brightness
                    });

                    // Update UI
                    slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
                    break;

                case 'saturation':
                    // Calculate hue, saturation, and brightness
                    hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
                    saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
                    brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
                    hex = hsb2hex({
                        h: hue,
                        s: saturation,
                        b: brightness
                    });

                    // Update UI
                    slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));
                    minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);
                    break;

                case 'brightness':
                    // Calculate hue, saturation, and brightness
                    hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
                    saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
                    brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
                    hex = hsb2hex({
                        h: hue,
                        s: saturation,
                        b: brightness
                    });

                    // Update UI
                    slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
                    minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));
                    break;

                default:
                    // Calculate hue, saturation, and brightness
                    hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);
                    saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);
                    brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
                    hex = hsb2hex({
                        h: hue,
                        s: saturation,
                        b: brightness
                    });

                    // Update UI
                    grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));
                    break;

            }

            // Adjust case
            input.val( convertCase(hex, settings.letterCase) );

        }

        // Handle opacity
        if( target.is('.minicolors-opacity-slider') ) {
            if( settings.opacity ) {
                opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);
            } else {
                opacity = 1;
            }
            if( settings.opacity ) input.attr('data-opacity', opacity);
        }

        // Set swatch color
        swatch.find('SPAN').css({
            backgroundColor: hex,
            opacity: opacity
        });

        // Handle change event
        doChange(input, hex, opacity);

    }

    // Sets the color picker values from the input
    function updateFromInput(input, preserveInputValue) {

        var hex,
            hsb,
            opacity,
            x, y, r, phi,

            // Helpful references
            minicolors = input.parent(),
            settings = input.data('minicolors-settings'),
            swatch = minicolors.find('.minicolors-swatch'),

            // Panel objects
            grid = minicolors.find('.minicolors-grid'),
            slider = minicolors.find('.minicolors-slider'),
            opacitySlider = minicolors.find('.minicolors-opacity-slider'),

            // Picker objects
            gridPicker = grid.find('[class$=-picker]'),
            sliderPicker = slider.find('[class$=-picker]'),
            opacityPicker = opacitySlider.find('[class$=-picker]');

        // Determine hex/HSB values
        hex = convertCase(parseHex(input.val(), true), settings.letterCase);
        if( !hex ){
            hex = convertCase(parseHex(settings.defaultValue, true), settings.letterCase);
        }
        hsb = hex2hsb(hex);

        // Update input value
        if( !preserveInputValue ) input.val(hex);

        // Determine opacity value
        if( settings.opacity ) {
            // Get from data-opacity attribute and keep within 0-1 range
            opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);
            if( isNaN(opacity) ) opacity = 1;
            input.attr('data-opacity', opacity);
            swatch.find('SPAN').css('opacity', opacity);

            // Set opacity picker position
            y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());
            opacityPicker.css('top', y + 'px');
        }

        // Update swatch
        swatch.find('SPAN').css('backgroundColor', hex);

        // Determine picker locations
        switch(settings.control) {

            case 'wheel':
                // Set grid position
                r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);
                phi = hsb.h * Math.PI / 180;
                x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());
                y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());
                gridPicker.css({
                    top: y + 'px',
                    left: x + 'px'
                });

                // Set slider position
                y = 150 - (hsb.b / (100 / grid.height()));
                if( hex === '' ) y = 0;
                sliderPicker.css('top', y + 'px');

                // Update panel color
                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
                break;

            case 'saturation':
                // Set grid position
                x = keepWithin((5 * hsb.h) / 12, 0, 150);
                y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
                gridPicker.css({
                    top: y + 'px',
                    left: x + 'px'
                });

                // Set slider position
                y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());
                sliderPicker.css('top', y + 'px');

                // Update UI
                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));
                minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);
                break;

            case 'brightness':
                // Set grid position
                x = keepWithin((5 * hsb.h) / 12, 0, 150);
                y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());
                gridPicker.css({
                    top: y + 'px',
                    left: x + 'px'
                });

                // Set slider position
                y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());
                sliderPicker.css('top', y + 'px');

                // Update UI
                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
                minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));
                break;

            default:
                // Set grid position
                x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());
                y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
                gridPicker.css({
                    top: y + 'px',
                    left: x + 'px'
                });

                // Set slider position
                y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());
                sliderPicker.css('top', y + 'px');

                // Update panel color
                grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));
                break;

        }

        // Fire change event, but only if minicolors is fully initialized
        if( input.data('minicolors-initialized') ) {
            doChange(input, hex, opacity);
        }

    }

    // Runs the change and changeDelay callbacks
    function doChange(input, hex, opacity) {

        var settings = input.data('minicolors-settings'),
            lastChange = input.data('minicolors-lastChange');

        // Only run if it actually changed
        if( !lastChange || lastChange.hex !== hex || lastChange.opacity !== opacity ) {

            // Remember last-changed value
            input.data('minicolors-lastChange', {
                hex: hex,
                opacity: opacity
            });

            // Fire change event
            if( settings.change ) {
                if( settings.changeDelay ) {
                    // Call after a delay
                    clearTimeout(input.data('minicolors-changeTimeout'));
                    input.data('minicolors-changeTimeout', setTimeout( function() {
                        settings.change.call(input.get(0), hex, opacity);
                    }, settings.changeDelay));
                } else {
                    // Call immediately
                    settings.change.call(input.get(0), hex, opacity);
                }
            }
            input.trigger('change').trigger('input');
        }

    }

    // Generates an RGB(A) object based on the input's value
    function rgbObject(input) {
        var hex = parseHex($(input).val(), true),
            rgb = hex2rgb(hex),
            opacity = $(input).attr('data-opacity');
        if( !rgb ) return null;
        if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });
        return rgb;
    }

    // Genearates an RGB(A) string based on the input's value
    function rgbString(input, alpha) {
        var hex = parseHex($(input).val(), true),
            rgb = hex2rgb(hex),
            opacity = $(input).attr('data-opacity');
        if( !rgb ) return null;
        if( opacity === undefined ) opacity = 1;
        if( alpha ) {
            return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';
        } else {
            return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
        }
    }

    // Converts to the letter case specified in settings
    function convertCase(string, letterCase) {
        return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();
    }

    // Parses a string and returns a valid hex string when possible
    function parseHex(string, expand) {
        string = string.replace(/[^A-F0-9]/ig, '');
        if( string.length !== 3 && string.length !== 6 ) return '';
        if( string.length === 3 && expand ) {
            string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
        }
        return '#' + string;
    }

    // Keeps value within min and max
    function keepWithin(value, min, max) {
        if( value < min ) value = min;
        if( value > max ) value = max;
        return value;
    }

    // Converts an HSB object to an RGB object
    function hsb2rgb(hsb) {
        var rgb = {};
        var h = Math.round(hsb.h);
        var s = Math.round(hsb.s * 255 / 100);
        var v = Math.round(hsb.b * 255 / 100);
        if(s === 0) {
            rgb.r = rgb.g = rgb.b = v;
        } else {
            var t1 = v;
            var t2 = (255 - s) * v / 255;
            var t3 = (t1 - t2) * (h % 60) / 60;
            if( h === 360 ) h = 0;
            if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }
            else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }
            else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }
            else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }
            else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }
            else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }
            else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }
        }
        return {
            r: Math.round(rgb.r),
            g: Math.round(rgb.g),
            b: Math.round(rgb.b)
        };
    }

    // Converts an RGB object to a hex string
    function rgb2hex(rgb) {
        var hex = [
            rgb.r.toString(16),
            rgb.g.toString(16),
            rgb.b.toString(16)
        ];
        $.each(hex, function(nr, val) {
            if (val.length === 1) hex[nr] = '0' + val;
        });
        return '#' + hex.join('');
    }

    // Converts an HSB object to a hex string
    function hsb2hex(hsb) {
        return rgb2hex(hsb2rgb(hsb));
    }

    // Converts a hex string to an HSB object
    function hex2hsb(hex) {
        var hsb = rgb2hsb(hex2rgb(hex));
        if( hsb.s === 0 ) hsb.h = 360;
        return hsb;
    }

    // Converts an RGB object to an HSB object
    function rgb2hsb(rgb) {
        var hsb = { h: 0, s: 0, b: 0 };
        var min = Math.min(rgb.r, rgb.g, rgb.b);
        var max = Math.max(rgb.r, rgb.g, rgb.b);
        var delta = max - min;
        hsb.b = max;
        hsb.s = max !== 0 ? 255 * delta / max : 0;
        if( hsb.s !== 0 ) {
            if( rgb.r === max ) {
                hsb.h = (rgb.g - rgb.b) / delta;
            } else if( rgb.g === max ) {
                hsb.h = 2 + (rgb.b - rgb.r) / delta;
            } else {
                hsb.h = 4 + (rgb.r - rgb.g) / delta;
            }
        } else {
            hsb.h = -1;
        }
        hsb.h *= 60;
        if( hsb.h < 0 ) {
            hsb.h += 360;
        }
        hsb.s *= 100/255;
        hsb.b *= 100/255;
        return hsb;
    }

    // Converts a hex string to an RGB object
    function hex2rgb(hex) {
        hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
        return {
            /* jshint ignore:start */
            r: hex >> 16,
            g: (hex & 0x00FF00) >> 8,
            b: (hex & 0x0000FF)
            /* jshint ignore:end */
        };
    }

    // Handle events
    $(document)
        // Hide on clicks outside of the control
        .on('mousedown.minicolors touchstart.minicolors', function(event) {
            if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {
                hide();
            }
        })
        // Start moving
        .on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {
            var target = $(this);
            event.preventDefault();
            $(document).data('minicolors-target', target);
            move(target, event, true);
        })
        // Move pickers
        .on('mousemove.minicolors touchmove.minicolors', function(event) {
            var target = $(document).data('minicolors-target');
            if( target ) move(target, event);
        })
        // Stop moving
        .on('mouseup.minicolors touchend.minicolors', function() {
            $(this).removeData('minicolors-target');
        })
        // Show panel when swatch is clicked
        .on('mousedown.minicolors touchstart.minicolors', '.minicolors-swatch', function(event) {
            var input = $(this).parent().find('.minicolors-input');
            event.preventDefault();
            show(input);
        })
        // Show on focus
        .on('focus.minicolors', '.minicolors-input', function() {
            var input = $(this);
            if( !input.data('minicolors-initialized') ) return;
            show(input);
        })
        // Fix hex on blur
        .on('blur.minicolors', '.minicolors-input', function() {
            var input = $(this),
                settings = input.data('minicolors-settings');
            if( !input.data('minicolors-initialized') ) return;

            // Parse Hex
            input.val(parseHex(input.val(), true));

            // Is it blank?
            if( input.val() === '' ) input.val(parseHex(settings.defaultValue, true));

            // Adjust case
            input.val( convertCase(input.val(), settings.letterCase) );

        })
        // Handle keypresses
        .on('keydown.minicolors', '.minicolors-input', function(event) {
            var input = $(this);
            if( !input.data('minicolors-initialized') ) return;
            switch(event.keyCode) {
                case 9: // tab
                    hide();
                    break;
                case 13: // enter
                case 27: // esc
                    hide();
                    input.blur();
                    break;
            }
        })
        // Update on keyup
        .on('keyup.minicolors', '.minicolors-input', function() {
            var input = $(this);
            if( !input.data('minicolors-initialized') ) return;
            updateFromInput(input, true);
        })
        // Update on paste
        .on('paste.minicolors', '.minicolors-input', function() {
            var input = $(this);
            if( !input.data('minicolors-initialized') ) return;
            setTimeout( function() {
                updateFromInput(input, true);
            }, 1);
        });

})(jQuery);
(function ($) {
  'use strict';
  /**
   * We need an event when the elements are destroyed
   * because if an input is removed, we have to remove the
   * maxlength object associated (if any).
   * From:
   * http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom
   */
  if (!$.event.special.destroyed) {
    $.event.special.destroyed = {
      remove: function (o) {
        if (o.handler) {
          o.handler();
        }
      }
    };
  }


  $.fn.extend({
    maxlength: function (options, callback) {
      var documentBody = $('body'),
        defaults = {
          showOnReady: false, // true to always show when indicator is ready
          alwaysShow: false, // if true the indicator it's always shown.
          threshold: 10, // Represents how many chars left are needed to show up the counter
          warningClass: 'label label-success',
          limitReachedClass: 'label label-important label-danger',
          separator: ' / ',
          preText: '',
          postText: '',
          showMaxLength: true,
          placement: 'bottom',
          message: null, // an alternative way to provide the message text
          showCharsTyped: true, // show the number of characters typed and not the number of characters remaining
          validate: false, // if the browser doesn't support the maxlength attribute, attempt to type more than
          // the indicated chars, will be prevented.
          utf8: false, // counts using bytesize rather than length. eg: '£' is counted as 2 characters.
          appendToParent: false, // append the indicator to the input field's parent instead of body
          twoCharLinebreak: true,  // count linebreak as 2 characters to match IE/Chrome textarea validation. As well as DB storage.
          customMaxAttribute: null  // null = use maxlength attribute and browser functionality, string = use specified attribute instead.
          // Form submit validation is handled on your own.  when maxlength has been exceeded 'overmax' class added to element
        };

      if ($.isFunction(options) && !callback) {
        callback = options;
        options = {};
      }
      options = $.extend(defaults, options);

      /**
      * Return the length of the specified input.
      *
      * @param input
      * @return {number}
      */
      function inputLength(input) {
        var text = input.val();

        if (options.twoCharLinebreak) {
          // Count all line breaks as 2 characters
          text = text.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n');
        } else {
          // Remove all double-character (\r\n) linebreaks, so they're counted only once.
          text = text.replace(new RegExp('\r?\n', 'g'), '\n');
        }

        var currentLength = 0;

        if (options.utf8) {
          currentLength = utf8Length(text);
        } else {
          currentLength = text.length;
        }
        return currentLength;
      }

      /**
      * Truncate the text of the specified input.
      *
      * @param input
      * @param limit
      */
      function truncateChars(input, maxlength) {
        var text = input.val();
        var newlines = 0;

        if (options.twoCharLinebreak) {
          text = text.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n');

          if (text.substr(text.length - 1) === '\n' && text.length % 2 === 1) {
            newlines = 1;
          }
        }

        input.val(text.substr(0, maxlength - newlines));
      }

      /**
      * Return the length of the specified input in UTF8 encoding.
      *
      * @param input
      * @return {number}
      */
      function utf8Length(string) {
        var utf8length = 0;
        for (var n = 0; n < string.length; n++) {
          var c = string.charCodeAt(n);
          if (c < 128) {
            utf8length++;
          }
          else if ((c > 127) && (c < 2048)) {
            utf8length = utf8length + 2;
          }
          else {
            utf8length = utf8length + 3;
          }
        }
        return utf8length;
      }

      /**
       * Return true if the indicator should be showing up.
       *
       * @param input
       * @param thereshold
       * @param maxlength
       * @return {number}
       */
      function charsLeftThreshold(input, thereshold, maxlength) {
        var output = true;
        if (!options.alwaysShow && (maxlength - inputLength(input) > thereshold)) {
          output = false;
        }
        return output;
      }

      /**
       * Returns how many chars are left to complete the fill up of the form.
       *
       * @param input
       * @param maxlength
       * @return {number}
       */
      function remainingChars(input, maxlength) {
        var length = maxlength - inputLength(input);
        return length;
      }

      /**
       * When called displays the indicator.
       *
       * @param indicator
       */
      function showRemaining(currentInput, indicator) {
        indicator.css({
          display: 'block'
        });
        currentInput.trigger('maxlength.shown');
      }

      /**
       * When called shows the indicator.
       *
       * @param indicator
       */
      function hideRemaining(currentInput, indicator) {
        indicator.css({
          display: 'none'
        });
        currentInput.trigger('maxlength.hidden');
      }

      /**
      * This function updates the value in the indicator
      *
      * @param maxLengthThisInput
      * @param typedChars
      * @return String
      */
      function updateMaxLengthHTML(currentInputText, maxLengthThisInput, typedChars) {
        var output = '';
        if (options.message) {
          if (typeof options.message === 'function') {
            output = options.message(currentInputText, maxLengthThisInput);
          } else {
            output = options.message.replace('%charsTyped%', typedChars)
              .replace('%charsRemaining%', maxLengthThisInput - typedChars)
              .replace('%charsTotal%', maxLengthThisInput);
          }
        } else {
          if (options.preText) {
            output += options.preText;
          }
          if (!options.showCharsTyped) {
            output += maxLengthThisInput - typedChars;
          }
          else {
            output += typedChars;
          }
          if (options.showMaxLength) {
            output += options.separator + maxLengthThisInput;
          }
          if (options.postText) {
            output += options.postText;
          }
        }
        return output;
      }

      /**
       * This function updates the value of the counter in the indicator.
       * Wants as parameters: the number of remaining chars, the element currently managed,
       * the maxLength for the current input and the indicator generated for it.
       *
       * @param remaining
       * @param currentInput
       * @param maxLengthCurrentInput
       * @param maxLengthIndicator
       */
      function manageRemainingVisibility(remaining, currentInput, maxLengthCurrentInput, maxLengthIndicator) {
        if (maxLengthIndicator) {
          maxLengthIndicator.html(updateMaxLengthHTML(currentInput.val(), maxLengthCurrentInput, (maxLengthCurrentInput - remaining)));

          if (remaining > 0) {
            if (charsLeftThreshold(currentInput, options.threshold, maxLengthCurrentInput)) {
              showRemaining(currentInput, maxLengthIndicator.removeClass(options.limitReachedClass).addClass(options.warningClass));
            } else {
              hideRemaining(currentInput, maxLengthIndicator);
            }
          } else {
            showRemaining(currentInput, maxLengthIndicator.removeClass(options.warningClass).addClass(options.limitReachedClass));
          }
        }

        if (options.customMaxAttribute) {
          // class to use for form validation on custom maxlength attribute
          if (remaining < 0) {
            currentInput.addClass('overmax');
          } else {
            currentInput.removeClass('overmax');
          }
        }
      }

      /**
       * This function returns an object containing all the
       * informations about the position of the current input
       *
       * @param currentInput
       * @return object {bottom height left right top width}
       *
       */
      function getPosition(currentInput) {
        var el = currentInput[0];
        return $.extend({}, (typeof el.getBoundingClientRect === 'function') ? el.getBoundingClientRect() : {
          width: el.offsetWidth,
          height: el.offsetHeight
        }, currentInput.offset());
      }

      /**
       * This function places the maxLengthIndicator at the
       * top / bottom / left / right of the currentInput
       *
       * @param currentInput
       * @param maxLengthIndicator
       * @return null
       *
       */
      function place(currentInput, maxLengthIndicator) {
        var pos = getPosition(currentInput);

        // Supports custom placement handler
        if ($.type(options.placement) === 'function'){
          options.placement(currentInput, maxLengthIndicator, pos);
          return;
        }

        // Supports custom placement via css positional properties
        if ($.isPlainObject(options.placement)){
          placeWithCSS(options.placement, maxLengthIndicator);
          return;
        }

        var inputOuter = currentInput.outerWidth(),
          outerWidth = maxLengthIndicator.outerWidth(),
          actualWidth = maxLengthIndicator.width(),
          actualHeight = maxLengthIndicator.height();

        // get the right position if the indicator is appended to the input's parent
        if (options.appendToParent) {
          pos.top -= currentInput.parent().offset().top;
          pos.left -= currentInput.parent().offset().left;
        }

        switch (options.placement) {
          case 'bottom':
            maxLengthIndicator.css({ top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 });
            break;
          case 'top':
            maxLengthIndicator.css({ top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 });
            break;
          case 'left':
            maxLengthIndicator.css({ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth });
            break;
          case 'right':
            maxLengthIndicator.css({ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width });
            break;
          case 'bottom-right':
            maxLengthIndicator.css({ top: pos.top + pos.height, left: pos.left + pos.width });
            break;
          case 'top-right':
            maxLengthIndicator.css({ top: pos.top - actualHeight, left: pos.left + inputOuter });
            break;
          case 'top-left':
            maxLengthIndicator.css({ top: pos.top - actualHeight, left: pos.left - outerWidth });
            break;
          case 'bottom-left':
            maxLengthIndicator.css({ top: pos.top + currentInput.outerHeight(), left: pos.left - outerWidth });
            break;
          case 'centered-right':
            maxLengthIndicator.css({ top: pos.top + (actualHeight / 2), left: pos.left + inputOuter - outerWidth - 3 });
            break;

            // Some more options for placements
          case 'bottom-right-inside':
            maxLengthIndicator.css({ top: pos.top + pos.height, left: pos.left + pos.width - outerWidth });
            break;
          case 'top-right-inside':
            maxLengthIndicator.css({ top: pos.top - actualHeight, left: pos.left + inputOuter - outerWidth });
            break;
          case 'top-left-inside':
            maxLengthIndicator.css({ top: pos.top - actualHeight, left: pos.left });
            break;
          case 'bottom-left-inside':
            maxLengthIndicator.css({ top: pos.top + currentInput.outerHeight(), left: pos.left });
            break;
        }
      }

      /**
       * This function places the maxLengthIndicator based on placement config object.
       *
       * @param {object} placement
       * @param {$} maxLengthIndicator
       * @return null
       *
       */
      function placeWithCSS(placement, maxLengthIndicator) {
        if (!placement || !maxLengthIndicator){
          return;
        }

        var POSITION_KEYS = [
          'top',
          'bottom',
          'left',
          'right',
          'position'
        ];

        var cssPos = {};

        // filter css properties to position
        $.each(POSITION_KEYS, function (i, key) {
          var val = options.placement[key];
          if (typeof val !== 'undefined'){
            cssPos[key] = val;
          }
        });

        maxLengthIndicator.css(cssPos);

        return;
      }

      /**
       * This function returns true if the indicator position needs to
       * be recalculated when the currentInput changes
       *
       * @return {boolean}
       *
       */
      function isPlacementMutable() {
        return options.placement === 'bottom-right-inside' || options.placement === 'top-right-inside' || typeof options.placement === 'function' || (options.message && typeof options.message === 'function');
      }

      /**
       * This function retrieves the maximum length of currentInput
       *
       * @param currentInput
       * @return {number}
       *
       */
      function getMaxLength(currentInput) {
        var max = currentInput.attr('maxlength');

        if (options.customMaxAttribute) {
          var custom = currentInput.attr(options.customMaxAttribute);
          if (!max || custom < max) {
            max = custom;
          }
        }

        if (!max) {
          max = currentInput.attr('size');
        }
        return max;
      }

      return this.each(function () {

        var currentInput = $(this),
          maxLengthCurrentInput,
          maxLengthIndicator;

        $(window).resize(function () {
          if (maxLengthIndicator) {
            place(currentInput, maxLengthIndicator);
          }
        });

        function firstInit() {
          var maxlengthContent = updateMaxLengthHTML(currentInput.val(), maxLengthCurrentInput, '0');
          maxLengthCurrentInput = getMaxLength(currentInput);

          if (!maxLengthIndicator) {
            maxLengthIndicator = $('<span class="bootstrap-maxlength"></span>').css({
              display: 'none',
              position: 'absolute',
              whiteSpace: 'nowrap',
              zIndex: 1099
            }).html(maxlengthContent);
          }

          // We need to detect resizes if we are dealing with a textarea:
          if (currentInput.is('textarea')) {
            currentInput.data('maxlenghtsizex', currentInput.outerWidth());
            currentInput.data('maxlenghtsizey', currentInput.outerHeight());

            currentInput.mouseup(function () {
              if (currentInput.outerWidth() !== currentInput.data('maxlenghtsizex') || currentInput.outerHeight() !== currentInput.data('maxlenghtsizey')) {
                place(currentInput, maxLengthIndicator);
              }

              currentInput.data('maxlenghtsizex', currentInput.outerWidth());
              currentInput.data('maxlenghtsizey', currentInput.outerHeight());
            });
          }

          if (options.appendToParent) {
            currentInput.parent().append(maxLengthIndicator);
            currentInput.parent().css('position', 'relative');
          } else {
            documentBody.append(maxLengthIndicator);
          }

          var remaining = remainingChars(currentInput, getMaxLength(currentInput));
          manageRemainingVisibility(remaining, currentInput, maxLengthCurrentInput, maxLengthIndicator);
          place(currentInput, maxLengthIndicator);
        }

        if (options.showOnReady) {
          currentInput.ready(function () {
            firstInit();
          });
        } else {
          currentInput.focus(function () {
            firstInit();
          });
        }

        currentInput.on('maxlength.reposition', function () {
          place(currentInput, maxLengthIndicator);
        });


        currentInput.on('destroyed', function () {
          if (maxLengthIndicator) {
            maxLengthIndicator.remove();
          }
        });

        currentInput.on('blur', function () {
          if (maxLengthIndicator && !options.showOnReady) {
            maxLengthIndicator.remove();
          }
        });

        currentInput.on('input', function () {
          var maxlength = getMaxLength(currentInput),
            remaining = remainingChars(currentInput, maxlength),
            output = true;

          if (options.validate && remaining < 0) {
            truncateChars(currentInput, maxlength);
            output = false;
          } else {
            manageRemainingVisibility(remaining, currentInput, maxLengthCurrentInput, maxLengthIndicator);
          }

          if (isPlacementMutable()) {
            place(currentInput, maxLengthIndicator);
          }

          return output;
        });
      });
    }
  });
}(jQuery));

/*
 *  Bootstrap TouchSpin - v3.0.1
 *  A mobile and touch friendly input spinner component for Bootstrap 3.
 *  http://www.virtuosoft.eu/code/bootstrap-touchspin/
 *
 *  Made by István Ujj-Mészáros
 *  Under Apache License v2.0 License
 */
(function($) {
  'use strict';

  var _currentSpinnerId = 0;

  function _scopedEventName(name, id) {
    return name + '.touchspin_' + id;
  }

  function _scopeEventNames(names, id) {
    return $.map(names, function(name) {
      return _scopedEventName(name, id);
    });
  }

  $.fn.TouchSpin = function(options) {

    if (options === 'destroy') {
      this.each(function() {
        var originalinput = $(this),
            originalinput_data = originalinput.data();
        $(document).off(_scopeEventNames([
          'mouseup',
          'touchend',
          'touchcancel',
          'mousemove',
          'touchmove',
          'scroll',
          'scrollstart'], originalinput_data.spinnerid).join(' '));
      });
      return;
    }

    var defaults = {
      min: 0,
      max: 100,
      initval: '',
      step: 1,
      decimals: 0,
      stepinterval: 100,
      forcestepdivisibility: 'round', // none | floor | round | ceil
      stepintervaldelay: 500,
      verticalbuttons: false,
      verticalupclass: 'glyphicon glyphicon-chevron-up',
      verticaldownclass: 'glyphicon glyphicon-chevron-down',
      prefix: '',
      postfix: '',
      prefix_extraclass: '',
      postfix_extraclass: '',
      booster: true,
      boostat: 10,
      maxboostedstep: false,
      mousewheel: true,
      buttondown_class: 'btn btn-default',
      buttonup_class: 'btn btn-default',
	  buttondown_txt: '-',
	  buttonup_txt: '+'
    };

    var attributeMap = {
      min: 'min',
      max: 'max',
      initval: 'init-val',
      step: 'step',
      decimals: 'decimals',
      stepinterval: 'step-interval',
      verticalbuttons: 'vertical-buttons',
      verticalupclass: 'vertical-up-class',
      verticaldownclass: 'vertical-down-class',
      forcestepdivisibility: 'force-step-divisibility',
      stepintervaldelay: 'step-interval-delay',
      prefix: 'prefix',
      postfix: 'postfix',
      prefix_extraclass: 'prefix-extra-class',
      postfix_extraclass: 'postfix-extra-class',
      booster: 'booster',
      boostat: 'boostat',
      maxboostedstep: 'max-boosted-step',
      mousewheel: 'mouse-wheel',
      buttondown_class: 'button-down-class',
      buttonup_class: 'button-up-class',
	  buttondown_txt: 'button-down-txt',
	  buttonup_txt: 'button-up-txt'
    };

    return this.each(function() {

      var settings,
          originalinput = $(this),
          originalinput_data = originalinput.data(),
          container,
          elements,
          value,
          downSpinTimer,
          upSpinTimer,
          downDelayTimeout,
          upDelayTimeout,
          spincount = 0,
          spinning = false;

      init();


      function init() {
        if (originalinput.data('alreadyinitialized')) {
          return;
        }

        originalinput.data('alreadyinitialized', true);
        _currentSpinnerId += 1;
        originalinput.data('spinnerid', _currentSpinnerId);


        if (!originalinput.is('input')) {
          console.log('Must be an input.');
          return;
        }

        _initSettings();
        _setInitval();
        _checkValue();
        _buildHtml();
        _initElements();
        _hideEmptyPrefixPostfix();
        _bindEvents();
        _bindEventsInterface();
        elements.input.css('display', 'block');
      }

      function _setInitval() {
        if (settings.initval !== '' && originalinput.val() === '') {
          originalinput.val(settings.initval);
        }
      }

      function changeSettings(newsettings) {
        _updateSettings(newsettings);
        _checkValue();

        var value = elements.input.val();

        if (value !== '') {
          value = Number(elements.input.val());
          elements.input.val(value.toFixed(settings.decimals));
        }
      }

      function _initSettings() {
        settings = $.extend({}, defaults, originalinput_data, _parseAttributes(), options);
      }

      function _parseAttributes() {
        var data = {};
        $.each(attributeMap, function(key, value) {
          var attrName = 'bts-' + value + '';
          if (originalinput.is('[data-' + attrName + ']')) {
            data[key] = originalinput.data(attrName);
          }
        });
        return data;
      }

      function _updateSettings(newsettings) {
        settings = $.extend({}, settings, newsettings);
      }

      function _buildHtml() {
        var initval = originalinput.val(),
            parentelement = originalinput.parent();

        if (initval !== '') {
          initval = Number(initval).toFixed(settings.decimals);
        }

        originalinput.data('initvalue', initval).val(initval);
        originalinput.addClass('form-control');

        if (parentelement.hasClass('input-group')) {
          _advanceInputGroup(parentelement);
        }
        else {
          _buildInputGroup();
        }
      }

      function _advanceInputGroup(parentelement) {
        parentelement.addClass('bootstrap-touchspin');

        var prev = originalinput.prev(),
            next = originalinput.next();

        var downhtml,
            uphtml,
            prefixhtml = '<span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span>',
            postfixhtml = '<span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span>';

        if (prev.hasClass('input-group-btn')) {
          downhtml = '<button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button>';
          prev.append(downhtml);
        }
        else {
          downhtml = '<span class="input-group-btn"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button></span>';
          $(downhtml).insertBefore(originalinput);
        }

        if (next.hasClass('input-group-btn')) {
          uphtml = '<button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button>';
          next.prepend(uphtml);
        }
        else {
          uphtml = '<span class="input-group-btn"><button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button></span>';
          $(uphtml).insertAfter(originalinput);
        }

        $(prefixhtml).insertBefore(originalinput);
        $(postfixhtml).insertAfter(originalinput);

        container = parentelement;
      }

      function _buildInputGroup() {
        var html;

        if (settings.verticalbuttons) {
          html = '<div class="input-group bootstrap-touchspin"><span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span><span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span><span class="input-group-btn-vertical"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-up" type="button"><i class="' + settings.verticalupclass + '"></i></button><button class="' + settings.buttonup_class + ' bootstrap-touchspin-down" type="button"><i class="' + settings.verticaldownclass + '"></i></button></span></div>';
        }
        else {
          html = '<div class="input-group bootstrap-touchspin"><span class="input-group-btn"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button></span><span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span><span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span><span class="input-group-btn"><button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button></span></div>';
        }

        container = $(html).insertBefore(originalinput);

        $('.bootstrap-touchspin-prefix', container).after(originalinput);

        if (originalinput.hasClass('input-sm')) {
          container.addClass('input-group-sm');
        }
        else if (originalinput.hasClass('input-lg')) {
          container.addClass('input-group-lg');
        }
      }

      function _initElements() {
        elements = {
          down: $('.bootstrap-touchspin-down', container),
          up: $('.bootstrap-touchspin-up', container),
          input: $('input', container),
          prefix: $('.bootstrap-touchspin-prefix', container).addClass(settings.prefix_extraclass),
          postfix: $('.bootstrap-touchspin-postfix', container).addClass(settings.postfix_extraclass)
        };
      }

      function _hideEmptyPrefixPostfix() {
        if (settings.prefix === '') {
          elements.prefix.hide();
        }

        if (settings.postfix === '') {
          elements.postfix.hide();
        }
      }

      function _bindEvents() {
        originalinput.on('keydown', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 38) {
            if (spinning !== 'up') {
              upOnce();
              startUpSpin();
            }
            ev.preventDefault();
          }
          else if (code === 40) {
            if (spinning !== 'down') {
              downOnce();
              startDownSpin();
            }
            ev.preventDefault();
          }
        });

        originalinput.on('keyup', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 38) {
            stopSpin();
          }
          else if (code === 40) {
            stopSpin();
          }
        });

        originalinput.on('blur', function() {
          _checkValue();
        });

        elements.down.on('keydown', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 32 || code === 13) {
            if (spinning !== 'down') {
              downOnce();
              startDownSpin();
            }
            ev.preventDefault();
          }
        });

        elements.down.on('keyup', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 32 || code === 13) {
            stopSpin();
          }
        });

        elements.up.on('keydown', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 32 || code === 13) {
            if (spinning !== 'up') {
              upOnce();
              startUpSpin();
            }
            ev.preventDefault();
          }
        });

        elements.up.on('keyup', function(ev) {
          var code = ev.keyCode || ev.which;

          if (code === 32 || code === 13) {
            stopSpin();
          }
        });

        elements.down.on('mousedown.touchspin', function(ev) {
          elements.down.off('touchstart.touchspin');  // android 4 workaround

          if (originalinput.is(':disabled')) {
            return;
          }

          downOnce();
          startDownSpin();

          ev.preventDefault();
          ev.stopPropagation();
        });

        elements.down.on('touchstart.touchspin', function(ev) {
          elements.down.off('mousedown.touchspin');  // android 4 workaround

          if (originalinput.is(':disabled')) {
            return;
          }

          downOnce();
          startDownSpin();

          ev.preventDefault();
          ev.stopPropagation();
        });

        elements.up.on('mousedown.touchspin', function(ev) {
          elements.up.off('touchstart.touchspin');  // android 4 workaround

          if (originalinput.is(':disabled')) {
            return;
          }

          upOnce();
          startUpSpin();

          ev.preventDefault();
          ev.stopPropagation();
        });

        elements.up.on('touchstart.touchspin', function(ev) {
          elements.up.off('mousedown.touchspin');  // android 4 workaround

          if (originalinput.is(':disabled')) {
            return;
          }

          upOnce();
          startUpSpin();

          ev.preventDefault();
          ev.stopPropagation();
        });

        elements.up.on('mouseout touchleave touchend touchcancel', function(ev) {
          if (!spinning) {
            return;
          }

          ev.stopPropagation();
          stopSpin();
        });

        elements.down.on('mouseout touchleave touchend touchcancel', function(ev) {
          if (!spinning) {
            return;
          }

          ev.stopPropagation();
          stopSpin();
        });

        elements.down.on('mousemove touchmove', function(ev) {
          if (!spinning) {
            return;
          }

          ev.stopPropagation();
          ev.preventDefault();
        });

        elements.up.on('mousemove touchmove', function(ev) {
          if (!spinning) {
            return;
          }

          ev.stopPropagation();
          ev.preventDefault();
        });

        $(document).on(_scopeEventNames(['mouseup', 'touchend', 'touchcancel'], _currentSpinnerId).join(' '), function(ev) {
          if (!spinning) {
            return;
          }

          ev.preventDefault();
          stopSpin();
        });

        $(document).on(_scopeEventNames(['mousemove', 'touchmove', 'scroll', 'scrollstart'], _currentSpinnerId).join(' '), function(ev) {
          if (!spinning) {
            return;
          }

          ev.preventDefault();
          stopSpin();
        });

        originalinput.on('mousewheel DOMMouseScroll', function(ev) {
          if (!settings.mousewheel || !originalinput.is(':focus')) {
            return;
          }

          var delta = ev.originalEvent.wheelDelta || -ev.originalEvent.deltaY || -ev.originalEvent.detail;

          ev.stopPropagation();
          ev.preventDefault();

          if (delta < 0) {
            downOnce();
          }
          else {
            upOnce();
          }
        });
      }

      function _bindEventsInterface() {
        originalinput.on('touchspin.uponce', function() {
          stopSpin();
          upOnce();
        });

        originalinput.on('touchspin.downonce', function() {
          stopSpin();
          downOnce();
        });

        originalinput.on('touchspin.startupspin', function() {
          startUpSpin();
        });

        originalinput.on('touchspin.startdownspin', function() {
          startDownSpin();
        });

        originalinput.on('touchspin.stopspin', function() {
          stopSpin();
        });

        originalinput.on('touchspin.updatesettings', function(e, newsettings) {
          changeSettings(newsettings);
        });
      }

      function _forcestepdivisibility(value) {
        switch (settings.forcestepdivisibility) {
          case 'round':
            return (Math.round(value / settings.step) * settings.step).toFixed(settings.decimals);
          case 'floor':
            return (Math.floor(value / settings.step) * settings.step).toFixed(settings.decimals);
          case 'ceil':
            return (Math.ceil(value / settings.step) * settings.step).toFixed(settings.decimals);
          default:
            return value;
        }
      }

      function _checkValue() {
        var val, parsedval, returnval;

        val = originalinput.val();

        if (val === '') {
          return;
        }

        if (settings.decimals > 0 && val === '.') {
          return;
        }

        parsedval = parseFloat(val);

        if (isNaN(parsedval)) {
          parsedval = 0;
        }

        returnval = parsedval;

        if (parsedval.toString() !== val) {
          returnval = parsedval;
        }

        if (parsedval < settings.min) {
          returnval = settings.min;
        }

        if (parsedval > settings.max) {
          returnval = settings.max;
        }

        returnval = _forcestepdivisibility(returnval);

        if (Number(val).toString() !== returnval.toString()) {
          originalinput.val(returnval);
          originalinput.trigger('change');
        }
      }

      function _getBoostedStep() {
        if (!settings.booster) {
          return settings.step;
        }
        else {
          var boosted = Math.pow(2, Math.floor(spincount / settings.boostat)) * settings.step;

          if (settings.maxboostedstep) {
            if (boosted > settings.maxboostedstep) {
              boosted = settings.maxboostedstep;
              value = Math.round((value / boosted)) * boosted;
            }
          }

          return Math.max(settings.step, boosted);
        }
      }

      function upOnce() {
        _checkValue();

        value = parseFloat(elements.input.val());
        if (isNaN(value)) {
          value = 0;
        }

        var initvalue = value,
            boostedstep = _getBoostedStep();

        value = value + boostedstep;

        if (value > settings.max) {
          value = settings.max;
          originalinput.trigger('touchspin.on.max');
          stopSpin();
        }

        elements.input.val(Number(value).toFixed(settings.decimals));

        if (initvalue !== value) {
          originalinput.trigger('change');
        }
      }

      function downOnce() {
        _checkValue();

        value = parseFloat(elements.input.val());
        if (isNaN(value)) {
          value = 0;
        }

        var initvalue = value,
            boostedstep = _getBoostedStep();

        value = value - boostedstep;

        if (value < settings.min) {
          value = settings.min;
          originalinput.trigger('touchspin.on.min');
          stopSpin();
        }

        elements.input.val(value.toFixed(settings.decimals));

        if (initvalue !== value) {
          originalinput.trigger('change');
        }
      }

      function startDownSpin() {
        stopSpin();

        spincount = 0;
        spinning = 'down';

        originalinput.trigger('touchspin.on.startspin');
        originalinput.trigger('touchspin.on.startdownspin');

        downDelayTimeout = setTimeout(function() {
          downSpinTimer = setInterval(function() {
            spincount++;
            downOnce();
          }, settings.stepinterval);
        }, settings.stepintervaldelay);
      }

      function startUpSpin() {
        stopSpin();

        spincount = 0;
        spinning = 'up';

        originalinput.trigger('touchspin.on.startspin');
        originalinput.trigger('touchspin.on.startupspin');

        upDelayTimeout = setTimeout(function() {
          upSpinTimer = setInterval(function() {
            spincount++;
            upOnce();
          }, settings.stepinterval);
        }, settings.stepintervaldelay);
      }

      function stopSpin() {
        clearTimeout(downDelayTimeout);
        clearTimeout(upDelayTimeout);
        clearInterval(downSpinTimer);
        clearInterval(upSpinTimer);

        switch (spinning) {
          case 'up':
            originalinput.trigger('touchspin.on.stopupspin');
            originalinput.trigger('touchspin.on.stopspin');
            break;
          case 'down':
            originalinput.trigger('touchspin.on.stopdownspin');
            originalinput.trigger('touchspin.on.stopspin');
            break;
        }

        spincount = 0;
        spinning = false;
      }

    });

  };

})(jQuery);

/*!
 * Timepicker Component for Twitter Bootstrap
 *
 * Copyright 2013 Joris de Wit
 *
 * Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function($, window, document, undefined) {
  'use strict';

  // TIMEPICKER PUBLIC CLASS DEFINITION
  var Timepicker = function(element, options) {
    this.widget = '';
    this.$element = $(element);
    this.defaultTime = options.defaultTime;
    this.disableFocus = options.disableFocus;
    this.disableMousewheel = options.disableMousewheel;
    this.isOpen = options.isOpen;
    this.minuteStep = options.minuteStep;
    this.modalBackdrop = options.modalBackdrop;
    this.orientation = options.orientation;
    this.secondStep = options.secondStep;
    this.showInputs = options.showInputs;
    this.showMeridian = options.showMeridian;
    this.showSeconds = options.showSeconds;
    this.template = options.template;
    this.appendWidgetTo = options.appendWidgetTo;
    this.showWidgetOnAddonClick = options.showWidgetOnAddonClick;

    this._init();
  };

  Timepicker.prototype = {

    constructor: Timepicker,
    _init: function() {
      var self = this;

      if (this.showWidgetOnAddonClick && (this.$element.parent().hasClass('input-append') || this.$element.parent().hasClass('input-prepend'))) {
        this.$element.parent('.input-append, .input-prepend').find('.add-on').on({
          'click.timepicker': $.proxy(this.showWidget, this)
        });
        this.$element.on({
          'focus.timepicker': $.proxy(this.highlightUnit, this),
          'click.timepicker': $.proxy(this.highlightUnit, this),
          'keydown.timepicker': $.proxy(this.elementKeydown, this),
          'blur.timepicker': $.proxy(this.blurElement, this),
          'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)
        });
      } else {
        if (this.template) {
          this.$element.on({
            'focus.timepicker': $.proxy(this.showWidget, this),
            'click.timepicker': $.proxy(this.showWidget, this),
            'blur.timepicker': $.proxy(this.blurElement, this),
            'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)
          });
        } else {
          this.$element.on({
            'focus.timepicker': $.proxy(this.highlightUnit, this),
            'click.timepicker': $.proxy(this.highlightUnit, this),
            'keydown.timepicker': $.proxy(this.elementKeydown, this),
            'blur.timepicker': $.proxy(this.blurElement, this),
            'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)
          });
        }
      }

      if (this.template !== false) {
        this.$widget = $(this.getTemplate()).on('click', $.proxy(this.widgetClick, this));
      } else {
        this.$widget = false;
      }

      if (this.showInputs && this.$widget !== false) {
        this.$widget.find('input').each(function() {
          $(this).on({
            'click.timepicker': function() { $(this).select(); },
            'keydown.timepicker': $.proxy(self.widgetKeydown, self),
            'keyup.timepicker': $.proxy(self.widgetKeyup, self)
          });
        });
      }

      this.setDefaultTime(this.defaultTime);
    },

    blurElement: function() {
      this.highlightedUnit = null;
      this.updateFromElementVal();
    },

    clear: function() {
      this.hour = '';
      this.minute = '';
      this.second = '';
      this.meridian = '';

      this.$element.val('');
    },

    decrementHour: function() {
      if (this.showMeridian) {
        if (this.hour === 1) {
          this.hour = 12;
        } else if (this.hour === 12) {
          this.hour--;

          return this.toggleMeridian();
        } else if (this.hour === 0) {
          this.hour = 11;

          return this.toggleMeridian();
        } else {
          this.hour--;
        }
      } else {
        if (this.hour <= 0) {
          this.hour = 23;
        } else {
          this.hour--;
        }
      }
    },

    decrementMinute: function(step) {
      var newVal;

      if (step) {
        newVal = this.minute - step;
      } else {
        newVal = this.minute - this.minuteStep;
      }

      if (newVal < 0) {
        this.decrementHour();
        this.minute = newVal + 60;
      } else {
        this.minute = newVal;
      }
    },

    decrementSecond: function() {
      var newVal = this.second - this.secondStep;

      if (newVal < 0) {
        this.decrementMinute(true);
        this.second = newVal + 60;
      } else {
        this.second = newVal;
      }
    },

    elementKeydown: function(e) {
      switch (e.keyCode) {
      case 9: //tab
      case 27: // escape
        this.updateFromElementVal();
        break;
      case 37: // left arrow
        e.preventDefault();
        this.highlightPrevUnit();
        break;
      case 38: // up arrow
        e.preventDefault();
        switch (this.highlightedUnit) {
        case 'hour':
          this.incrementHour();
          this.highlightHour();
          break;
        case 'minute':
          this.incrementMinute();
          this.highlightMinute();
          break;
        case 'second':
          this.incrementSecond();
          this.highlightSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          this.highlightMeridian();
          break;
        }
        this.update();
        break;
      case 39: // right arrow
        e.preventDefault();
        this.highlightNextUnit();
        break;
      case 40: // down arrow
        e.preventDefault();
        switch (this.highlightedUnit) {
        case 'hour':
          this.decrementHour();
          this.highlightHour();
          break;
        case 'minute':
          this.decrementMinute();
          this.highlightMinute();
          break;
        case 'second':
          this.decrementSecond();
          this.highlightSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          this.highlightMeridian();
          break;
        }

        this.update();
        break;
      }
    },

    getCursorPosition: function() {
      var input = this.$element.get(0);

      if ('selectionStart' in input) {// Standard-compliant browsers

        return input.selectionStart;
      } else if (document.selection) {// IE fix
        input.focus();
        var sel = document.selection.createRange(),
          selLen = document.selection.createRange().text.length;

        sel.moveStart('character', - input.value.length);

        return sel.text.length - selLen;
      }
    },

    getTemplate: function() {
      var template,
        hourTemplate,
        minuteTemplate,
        secondTemplate,
        meridianTemplate,
        templateContent;

      if (this.showInputs) {
        hourTemplate = '<input type="text" class="bootstrap-timepicker-hour" maxlength="2"/>';
        minuteTemplate = '<input type="text" class="bootstrap-timepicker-minute" maxlength="2"/>';
        secondTemplate = '<input type="text" class="bootstrap-timepicker-second" maxlength="2"/>';
        meridianTemplate = '<input type="text" class="bootstrap-timepicker-meridian" maxlength="2"/>';
      } else {
        hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
        minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
        secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
        meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
      }

      templateContent = '<table>'+
         '<tr>'+
           '<td><a href="#" data-action="incrementHour"><i class="fa fa-angle-up"></i></a></td>'+
           '<td class="separator">&nbsp;</td>'+
           '<td><a href="#" data-action="incrementMinute"><i class="fa fa-angle-up"></i></a></td>'+
           (this.showSeconds ?
             '<td class="separator">&nbsp;</td>'+
             '<td><a href="#" data-action="incrementSecond"><i class="fa fa-angle-up"></i></a></td>'
           : '') +
           (this.showMeridian ?
             '<td class="separator">&nbsp;</td>'+
             '<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="fa fa-angle-up"></i></a></td>'
           : '') +
         '</tr>'+
         '<tr>'+
           '<td>'+ hourTemplate +'</td> '+
           '<td class="separator">:</td>'+
           '<td>'+ minuteTemplate +'</td> '+
           (this.showSeconds ?
            '<td class="separator">:</td>'+
            '<td>'+ secondTemplate +'</td>'
           : '') +
           (this.showMeridian ?
            '<td class="separator">&nbsp;</td>'+
            '<td>'+ meridianTemplate +'</td>'
           : '') +
         '</tr>'+
         '<tr>'+
           '<td><a href="#" data-action="decrementHour"><i class="fa fa-angle-down"></i></a></td>'+
           '<td class="separator"></td>'+
           '<td><a href="#" data-action="decrementMinute"><i class="fa fa-angle-down"></i></a></td>'+
           (this.showSeconds ?
            '<td class="separator">&nbsp;</td>'+
            '<td><a href="#" data-action="decrementSecond"><i class="fa fa-angle-down"></i></a></td>'
           : '') +
           (this.showMeridian ?
            '<td class="separator">&nbsp;</td>'+
            '<td><a href="#" data-action="toggleMeridian"><i class="fa fa-angle-down"></i></a></td>'
           : '') +
         '</tr>'+
       '</table>';

      switch(this.template) {
      case 'modal':
        template = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="'+ (this.modalBackdrop ? 'true' : 'false') +'">'+
          '<div class="modal-header">'+
            '<a href="#" class="close" data-dismiss="modal">×</a>'+
            '<h3>Pick a Time</h3>'+
          '</div>'+
          '<div class="modal-content">'+
            templateContent +
          '</div>'+
          '<div class="modal-footer">'+
            '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>'+
          '</div>'+
        '</div>';
        break;
      case 'dropdown':
        template = '<div class="bootstrap-timepicker-widget dropdown-menu">'+ templateContent +'</div>';
        break;
      }

      return template;
    },

    getTime: function() {
      if (this.hour === '') {
        return '';
      }

      return this.hour + ':' + (this.minute.toString().length === 1 ? '0' + this.minute : this.minute) + (this.showSeconds ? ':' + (this.second.toString().length === 1 ? '0' + this.second : this.second) : '') + (this.showMeridian ? ' ' + this.meridian : '');
    },

    hideWidget: function() {
      if (this.isOpen === false) {
        return;
      }

      this.$element.trigger({
        'type': 'hide.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });

      if (this.template === 'modal' && this.$widget.modal) {
        this.$widget.modal('hide');
      } else {
        this.$widget.removeClass('open');
      }

      $(document).off('mousedown.timepicker, touchend.timepicker');

      this.isOpen = false;
      // show/hide approach taken by datepicker
      this.$widget.detach();
    },

    highlightUnit: function() {
      this.position = this.getCursorPosition();
      if (this.position >= 0 && this.position <= 2) {
        this.highlightHour();
      } else if (this.position >= 3 && this.position <= 5) {
        this.highlightMinute();
      } else if (this.position >= 6 && this.position <= 8) {
        if (this.showSeconds) {
          this.highlightSecond();
        } else {
          this.highlightMeridian();
        }
      } else if (this.position >= 9 && this.position <= 11) {
        this.highlightMeridian();
      }
    },

    highlightNextUnit: function() {
      switch (this.highlightedUnit) {
      case 'hour':
        this.highlightMinute();
        break;
      case 'minute':
        if (this.showSeconds) {
          this.highlightSecond();
        } else if (this.showMeridian){
          this.highlightMeridian();
        } else {
          this.highlightHour();
        }
        break;
      case 'second':
        if (this.showMeridian) {
          this.highlightMeridian();
        } else {
          this.highlightHour();
        }
        break;
      case 'meridian':
        this.highlightHour();
        break;
      }
    },

    highlightPrevUnit: function() {
      switch (this.highlightedUnit) {
      case 'hour':
        if(this.showMeridian){
          this.highlightMeridian();
        } else if (this.showSeconds) {
          this.highlightSecond();
        } else {
          this.highlightMinute();
        }
        break;
      case 'minute':
        this.highlightHour();
        break;
      case 'second':
        this.highlightMinute();
        break;
      case 'meridian':
        if (this.showSeconds) {
          this.highlightSecond();
        } else {
          this.highlightMinute();
        }
        break;
      }
    },

    highlightHour: function() {
      var $element = this.$element.get(0),
          self = this;

      this.highlightedUnit = 'hour';

			if ($element.setSelectionRange) {
				setTimeout(function() {
          if (self.hour < 10) {
            $element.setSelectionRange(0,1);
          } else {
            $element.setSelectionRange(0,2);
          }
				}, 0);
			}
    },

    highlightMinute: function() {
      var $element = this.$element.get(0),
          self = this;

      this.highlightedUnit = 'minute';

			if ($element.setSelectionRange) {
				setTimeout(function() {
          if (self.hour < 10) {
            $element.setSelectionRange(2,4);
          } else {
            $element.setSelectionRange(3,5);
          }
				}, 0);
			}
    },

    highlightSecond: function() {
      var $element = this.$element.get(0),
          self = this;

      this.highlightedUnit = 'second';

			if ($element.setSelectionRange) {
				setTimeout(function() {
          if (self.hour < 10) {
            $element.setSelectionRange(5,7);
          } else {
            $element.setSelectionRange(6,8);
          }
				}, 0);
			}
    },

    highlightMeridian: function() {
      var $element = this.$element.get(0),
          self = this;

      this.highlightedUnit = 'meridian';

			if ($element.setSelectionRange) {
				if (this.showSeconds) {
					setTimeout(function() {
            if (self.hour < 10) {
              $element.setSelectionRange(8,10);
            } else {
              $element.setSelectionRange(9,11);
            }
					}, 0);
				} else {
					setTimeout(function() {
            if (self.hour < 10) {
              $element.setSelectionRange(5,7);
            } else {
              $element.setSelectionRange(6,8);
            }
					}, 0);
				}
			}
    },

    incrementHour: function() {
      if (this.showMeridian) {
        if (this.hour === 11) {
          this.hour++;
          return this.toggleMeridian();
        } else if (this.hour === 12) {
          this.hour = 0;
        }
      }
      if (this.hour === 23) {
        this.hour = 0;

        return;
      }
      this.hour++;
    },

    incrementMinute: function(step) {
      var newVal;

      if (step) {
        newVal = this.minute + step;
      } else {
        newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
      }

      if (newVal > 59) {
        this.incrementHour();
        this.minute = newVal - 60;
      } else {
        this.minute = newVal;
      }
    },

    incrementSecond: function() {
      var newVal = this.second + this.secondStep - (this.second % this.secondStep);

      if (newVal > 59) {
        this.incrementMinute(true);
        this.second = newVal - 60;
      } else {
        this.second = newVal;
      }
    },

    mousewheel: function(e) {
      if (this.disableMousewheel) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();

      var delta = e.originalEvent.wheelDelta || -e.originalEvent.detail,
          scrollTo = null;

      if (e.type === 'mousewheel') {
        scrollTo = (e.originalEvent.wheelDelta * -1);
      }
      else if (e.type === 'DOMMouseScroll') {
        scrollTo = 40 * e.originalEvent.detail;
      }

      if (scrollTo) {
        e.preventDefault();
        $(this).scrollTop(scrollTo + $(this).scrollTop());
      }

      switch (this.highlightedUnit) {
      case 'minute':
        if (delta > 0) {
          this.incrementMinute();
        } else {
          this.decrementMinute();
        }
        this.highlightMinute();
        break;
      case 'second':
        if (delta > 0) {
          this.incrementSecond();
        } else {
          this.decrementSecond();
        }
        this.highlightSecond();
        break;
      case 'meridian':
        this.toggleMeridian();
        this.highlightMeridian();
        break;
      default:
        if (delta > 0) {
          this.incrementHour();
        } else {
          this.decrementHour();
        }
        this.highlightHour();
        break;
      }

      return false;
    },

    // This method was adapted from bootstrap-datepicker.
    place : function() {
      if (this.isInline) {
        return;
      }
      var widgetWidth = this.$widget.outerWidth(), widgetHeight = this.$widget.outerHeight(), visualPadding = 10, windowWidth =
        $(window).width(), windowHeight = $(window).height(), scrollTop = $(window).scrollTop();

      var zIndex = parseInt(this.$element.parents().filter(function() {}).first().css('z-index'), 10) + 10;
      var offset = this.component ? this.component.parent().offset() : this.$element.offset();
      var height = this.component ? this.component.outerHeight(true) : this.$element.outerHeight(false);
      var width = this.component ? this.component.outerWidth(true) : this.$element.outerWidth(false);
      var left = offset.left, top = offset.top;

      this.$widget.removeClass('timepicker-orient-top timepicker-orient-bottom timepicker-orient-right timepicker-orient-left');

      if (this.orientation.x !== 'auto') {
        this.picker.addClass('datepicker-orient-' + this.orientation.x);
        if (this.orientation.x === 'right') {
          left -= widgetWidth - width;
        }
      } else{
        // auto x orientation is best-placement: if it crosses a window edge, fudge it sideways
        // Default to left
        this.$widget.addClass('timepicker-orient-left');
        if (offset.left < 0) {
          left -= offset.left - visualPadding;
        } else if (offset.left + widgetWidth > windowWidth) {
          left = windowWidth - widgetWidth - visualPadding;
        }
      }
      // auto y orientation is best-situation: top or bottom, no fudging, decision based on which shows more of the widget
      var yorient = this.orientation.y, topOverflow, bottomOverflow;
      if (yorient === 'auto') {
        topOverflow = -scrollTop + offset.top - widgetHeight;
        bottomOverflow = scrollTop + windowHeight - (offset.top + height + widgetHeight);
        if (Math.max(topOverflow, bottomOverflow) === bottomOverflow) {
          yorient = 'top';
        } else {
          yorient = 'bottom';
        }
      }
      this.$widget.addClass('timepicker-orient-' + yorient);
      if (yorient === 'top'){
        top += height;
      } else{
        top -= widgetHeight + parseInt(this.$widget.css('padding-top'), 10);
      }

      this.$widget.css({
        top : top,
        left : left,
        zIndex : zIndex
      });
    },

    remove: function() {
      $('document').off('.timepicker');
      if (this.$widget) {
        this.$widget.remove();
      }
      delete this.$element.data().timepicker;
    },

    setDefaultTime: function(defaultTime) {
      if (!this.$element.val()) {
        if (defaultTime === 'current') {
          var dTime = new Date(),
            hours = dTime.getHours(),
            minutes = dTime.getMinutes(),
            seconds = dTime.getSeconds(),
            meridian = 'AM';

          if (seconds !== 0) {
            seconds = Math.ceil(dTime.getSeconds() / this.secondStep) * this.secondStep;
            if (seconds === 60) {
              minutes += 1;
              seconds = 0;
            }
          }

          if (minutes !== 0) {
            minutes = Math.ceil(dTime.getMinutes() / this.minuteStep) * this.minuteStep;
            if (minutes === 60) {
              hours += 1;
              minutes = 0;
            }
          }

          if (this.showMeridian) {
            if (hours === 0) {
              hours = 12;
            } else if (hours >= 12) {
              if (hours > 12) {
                hours = hours - 12;
              }
              meridian = 'PM';
            } else {
              meridian = 'AM';
            }
          }

          this.hour = hours;
          this.minute = minutes;
          this.second = seconds;
          this.meridian = meridian;

          this.update();

        } else if (defaultTime === false) {
          this.hour = 0;
          this.minute = 0;
          this.second = 0;
          this.meridian = 'AM';
        } else {
          this.setTime(defaultTime);
        }
      } else {
        this.updateFromElementVal();
      }
    },

    setTime: function(time, ignoreWidget) {
      if (!time) {
        this.clear();
        return;
      }

      var timeArray,
          hour,
          minute,
          second,
          meridian;

      if (typeof time === 'object' && time.getMonth){
        // this is a date object
        hour    = time.getHours();
        minute  = time.getMinutes();
        second  = time.getSeconds();

        if (this.showMeridian){
          meridian = 'AM';
          if (hour > 12){
            meridian = 'PM';
            hour = hour % 12;
          }

          if (hour === 12){
            meridian = 'PM';
          }
        }
      } else {
        if (time.match(/p/i) !== null) {
          meridian = 'PM';
        } else {
          meridian = 'AM';
        }

        time = time.replace(/[^0-9\:]/g, '');

        timeArray = time.split(':');

        hour = timeArray[0] ? timeArray[0].toString() : timeArray.toString();
        minute = timeArray[1] ? timeArray[1].toString() : '';
        second = timeArray[2] ? timeArray[2].toString() : '';

        // idiot proofing
        if (hour.length > 4) {
          second = hour.substr(4, 2);
        }
        if (hour.length > 2) {
          minute = hour.substr(2, 2);
          hour = hour.substr(0, 2);
        }
        if (minute.length > 2) {
          second = minute.substr(2, 2);
          minute = minute.substr(0, 2);
        }
        if (second.length > 2) {
          second = second.substr(2, 2);
        }

        hour = parseInt(hour, 10);
        minute = parseInt(minute, 10);
        second = parseInt(second, 10);

        if (isNaN(hour)) {
          hour = 0;
        }
        if (isNaN(minute)) {
          minute = 0;
        }
        if (isNaN(second)) {
          second = 0;
        }

        if (this.showMeridian) {
          if (hour < 1) {
            hour = 1;
          } else if (hour > 12) {
            hour = 12;
          }
        } else {
          if (hour >= 24) {
            hour = 23;
          } else if (hour < 0) {
            hour = 0;
          }
          if (hour < 13 && meridian === 'PM') {
            hour = hour + 12;
          }
        }

        if (minute < 0) {
          minute = 0;
        } else if (minute >= 60) {
          minute = 59;
        }

        if (this.showSeconds) {
          if (isNaN(second)) {
            second = 0;
          } else if (second < 0) {
            second = 0;
          } else if (second >= 60) {
            second = 59;
          }
        }
      }

      this.hour = hour;
      this.minute = minute;
      this.second = second;
      this.meridian = meridian;

      this.update(ignoreWidget);
    },

    showWidget: function() {
      if (this.isOpen) {
        return;
      }

      if (this.$element.is(':disabled')) {
        return;
      }

      // show/hide approach taken by datepicker
      this.$widget.appendTo(this.appendWidgetTo);
      var self = this;
      $(document).on('mousedown.timepicker, touchend.timepicker', function (e) {
        // This condition was inspired by bootstrap-datepicker.
        // The element the timepicker is invoked on is the input but it has a sibling for addon/button.
        if (!(self.$element.parent().find(e.target).length ||
            self.$widget.is(e.target) ||
            self.$widget.find(e.target).length)) {
          self.hideWidget();
        }
      });

      this.$element.trigger({
        'type': 'show.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });

      this.place();
      if (this.disableFocus) {
        this.$element.blur();
      }

      // widget shouldn't be empty on open
      if (this.hour === '') {
        if (this.defaultTime) {
          this.setDefaultTime(this.defaultTime);
        } else {
          this.setTime('0:0:0');
        }
      }

      if (this.template === 'modal' && this.$widget.modal) {
        this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
      } else {
        if (this.isOpen === false) {
          this.$widget.addClass('open');
        }
      }

      this.isOpen = true;
    },

    toggleMeridian: function() {
      this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';
    },

    update: function(ignoreWidget) {
      this.updateElement();
      if (!ignoreWidget) {
        this.updateWidget();
      }

      this.$element.trigger({
        'type': 'changeTime.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });
    },

    updateElement: function() {
      this.$element.val(this.getTime()).change();
    },

    updateFromElementVal: function() {
      this.setTime(this.$element.val());
    },

    updateWidget: function() {
      if (this.$widget === false) {
        return;
      }

      var hour = this.hour,
          minute = this.minute.toString().length === 1 ? '0' + this.minute : this.minute,
          second = this.second.toString().length === 1 ? '0' + this.second : this.second;

      if (this.showInputs) {
        this.$widget.find('input.bootstrap-timepicker-hour').val(hour);
        this.$widget.find('input.bootstrap-timepicker-minute').val(minute);

        if (this.showSeconds) {
          this.$widget.find('input.bootstrap-timepicker-second').val(second);
        }
        if (this.showMeridian) {
          this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
        }
      } else {
        this.$widget.find('span.bootstrap-timepicker-hour').text(hour);
        this.$widget.find('span.bootstrap-timepicker-minute').text(minute);

        if (this.showSeconds) {
          this.$widget.find('span.bootstrap-timepicker-second').text(second);
        }
        if (this.showMeridian) {
          this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
        }
      }
    },

    updateFromWidgetInputs: function() {
      if (this.$widget === false) {
        return;
      }

      var t = this.$widget.find('input.bootstrap-timepicker-hour').val() + ':' +
              this.$widget.find('input.bootstrap-timepicker-minute').val() +
              (this.showSeconds ? ':' + this.$widget.find('input.bootstrap-timepicker-second').val() : '') +
              (this.showMeridian ? this.$widget.find('input.bootstrap-timepicker-meridian').val() : '')
      ;

      this.setTime(t, true);
    },

    widgetClick: function(e) {
      e.stopPropagation();
      e.preventDefault();

      var $input = $(e.target),
          action = $input.closest('a').data('action');

      if (action) {
        this[action]();
      }
      this.update();

      if ($input.is('input')) {
        $input.get(0).setSelectionRange(0,2);
      }
    },

    widgetKeydown: function(e) {
      var $input = $(e.target),
          name = $input.attr('class').replace('bootstrap-timepicker-', '');

      switch (e.keyCode) {
      case 9: //tab
        if ((this.showMeridian && name === 'meridian') || (this.showSeconds && name === 'second') || (!this.showMeridian && !this.showSeconds && name === 'minute')) {
          return this.hideWidget();
        }
        break;
      case 27: // escape
        this.hideWidget();
        break;
      case 38: // up arrow
        e.preventDefault();
        switch (name) {
        case 'hour':
          this.incrementHour();
          break;
        case 'minute':
          this.incrementMinute();
          break;
        case 'second':
          this.incrementSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          break;
        }
        this.setTime(this.getTime());
        $input.get(0).setSelectionRange(0,2);
        break;
      case 40: // down arrow
        e.preventDefault();
        switch (name) {
        case 'hour':
          this.decrementHour();
          break;
        case 'minute':
          this.decrementMinute();
          break;
        case 'second':
          this.decrementSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          break;
        }
        this.setTime(this.getTime());
        $input.get(0).setSelectionRange(0,2);
        break;
      }
    },

    widgetKeyup: function(e) {
      if ((e.keyCode === 65) || (e.keyCode === 77) || (e.keyCode === 80) || (e.keyCode === 46) || (e.keyCode === 8) || (e.keyCode >= 46 && e.keyCode <= 57)) {
        this.updateFromWidgetInputs();
      }
    }
  };

  //TIMEPICKER PLUGIN DEFINITION
  $.fn.timepicker = function(option) {
    var args = Array.apply(null, arguments);
    args.shift();
    return this.each(function() {
      var $this = $(this),
        data = $this.data('timepicker'),
        options = typeof option === 'object' && option;

      if (!data) {
        $this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data()))));
      }

      if (typeof option === 'string') {
        data[option].apply(data, args);
      }
    });
  };

  $.fn.timepicker.defaults = {
    defaultTime: 'current',
    disableFocus: false,
    disableMousewheel: false,
    isOpen: false,
    minuteStep: 15,
    modalBackdrop: false,
    orientation: { x: 'auto', y: 'auto'},
    secondStep: 15,
    showSeconds: false,
    showInputs: true,
    showMeridian: true,
    template: 'dropdown',
    appendWidgetTo: 'body',
    showWidgetOnAddonClick: true
  };

  $.fn.timepicker.Constructor = Timepicker;

})(jQuery, window, document);

/*!
 * Datepicker for Bootstrap v1.6.1 (https://github.com/eternicode/bootstrap-datepicker)
 *
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */(function(factory){
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof exports === 'object') {
        factory(require('jquery'));
    } else {
        factory(jQuery);
    }
}(function($, undefined){

	function UTCDate(){
		return new Date(Date.UTC.apply(Date, arguments));
	}
	function UTCToday(){
		var today = new Date();
		return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
	}
	function isUTCEquals(date1, date2) {
		return (
			date1.getUTCFullYear() === date2.getUTCFullYear() &&
			date1.getUTCMonth() === date2.getUTCMonth() &&
			date1.getUTCDate() === date2.getUTCDate()
		);
	}
	function alias(method){
		return function(){
			return this[method].apply(this, arguments);
		};
	}
	function isValidDate(d) {
		return d && !isNaN(d.getTime());
	}

	var DateArray = (function(){
		var extras = {
			get: function(i){
				return this.slice(i)[0];
			},
			contains: function(d){
				// Array.indexOf is not cross-browser;
				// $.inArray doesn't work with Dates
				var val = d && d.valueOf();
				for (var i=0, l=this.length; i < l; i++)
					if (this[i].valueOf() === val)
						return i;
				return -1;
			},
			remove: function(i){
				this.splice(i,1);
			},
			replace: function(new_array){
				if (!new_array)
					return;
				if (!$.isArray(new_array))
					new_array = [new_array];
				this.clear();
				this.push.apply(this, new_array);
			},
			clear: function(){
				this.length = 0;
			},
			copy: function(){
				var a = new DateArray();
				a.replace(this);
				return a;
			}
		};

		return function(){
			var a = [];
			a.push.apply(a, arguments);
			$.extend(a, extras);
			return a;
		};
	})();


	// Picker object

	var Datepicker = function(element, options){
		$(element).data('datepicker', this);
		this._process_options(options);

		this.dates = new DateArray();
		this.viewDate = this.o.defaultViewDate;
		this.focusDate = null;

		this.element = $(element);
		this.isInput = this.element.is('input');
		this.inputField = this.isInput ? this.element : this.element.find('input');
		this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
		this.hasInput = this.component && this.inputField.length;
		if (this.component && this.component.length === 0)
			this.component = false;
		this.isInline = !this.component && this.element.is('div');

		this.picker = $(DPGlobal.template);

		// Checking templates and inserting
		if (this._check_template(this.o.templates.leftArrow)) {
			this.picker.find('.prev').html(this.o.templates.leftArrow);
		}
		if (this._check_template(this.o.templates.rightArrow)) {
			this.picker.find('.next').html(this.o.templates.rightArrow);
		}

		this._buildEvents();
		this._attachEvents();

		if (this.isInline){
			this.picker.addClass('datepicker-inline').appendTo(this.element);
		}
		else {
			this.picker.addClass('datepicker-dropdown dropdown-menu');
		}

		if (this.o.rtl){
			this.picker.addClass('datepicker-rtl');
		}

		this.viewMode = this.o.startView;

		if (this.o.calendarWeeks)
			this.picker.find('thead .datepicker-title, tfoot .today, tfoot .clear')
						.attr('colspan', function(i, val){
							return parseInt(val) + 1;
						});

		this._allow_update = false;

		this.setStartDate(this._o.startDate);
		this.setEndDate(this._o.endDate);
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);
		this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted);
		this.setDatesDisabled(this.o.datesDisabled);

		this.fillDow();
		this.fillMonths();

		this._allow_update = true;

		this.update();
		this.showMode();

		if (this.isInline){
			this.show();
		}
	};

	Datepicker.prototype = {
		constructor: Datepicker,

		_resolveViewName: function(view, default_value){
			if (view === 0 || view === 'days' || view === 'month') {
				return 0;
			}
			if (view === 1 || view === 'months' || view === 'year') {
				return 1;
			}
			if (view === 2 || view === 'years' || view === 'decade') {
				return 2;
			}
			if (view === 3 || view === 'decades' || view === 'century') {
				return 3;
			}
			if (view === 4 || view === 'centuries' || view === 'millennium') {
				return 4;
			}
			return default_value === undefined ? false : default_value;
		},

		_check_template: function(tmp){
			try {
				// If empty
				if (tmp === undefined || tmp === "") {
					return false;
				}
				// If no html, everything ok
				if ((tmp.match(/[<>]/g) || []).length <= 0) {
					return true;
				}
				// Checking if html is fine
				var jDom = $(tmp);
				return jDom.length > 0;
			}
			catch (ex) {
				return false;
			}
		},

		_process_options: function(opts){
			// Store raw options for reference
			this._o = $.extend({}, this._o, opts);
			// Processed options
			var o = this.o = $.extend({}, this._o);

			// Check if "de-DE" style date is available, if not language should
			// fallback to 2 letter code eg "de"
			var lang = o.language;
			if (!dates[lang]){
				lang = lang.split('-')[0];
				if (!dates[lang])
					lang = defaults.language;
			}
			o.language = lang;

			// Retrieve view index from any aliases
			o.startView = this._resolveViewName(o.startView, 0);
			o.minViewMode = this._resolveViewName(o.minViewMode, 0);
			o.maxViewMode = this._resolveViewName(o.maxViewMode, 4);

			// Check that the start view is between min and max
			o.startView = Math.min(o.startView, o.maxViewMode);
			o.startView = Math.max(o.startView, o.minViewMode);

			// true, false, or Number > 0
			if (o.multidate !== true){
				o.multidate = Number(o.multidate) || false;
				if (o.multidate !== false)
					o.multidate = Math.max(0, o.multidate);
			}
			o.multidateSeparator = String(o.multidateSeparator);

			o.weekStart %= 7;
			o.weekEnd = (o.weekStart + 6) % 7;

			var format = DPGlobal.parseFormat(o.format);
			if (o.startDate !== -Infinity){
				if (!!o.startDate){
					if (o.startDate instanceof Date)
						o.startDate = this._local_to_utc(this._zero_time(o.startDate));
					else
						o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
				}
				else {
					o.startDate = -Infinity;
				}
			}
			if (o.endDate !== Infinity){
				if (!!o.endDate){
					if (o.endDate instanceof Date)
						o.endDate = this._local_to_utc(this._zero_time(o.endDate));
					else
						o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
				}
				else {
					o.endDate = Infinity;
				}
			}

			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
			if (!$.isArray(o.daysOfWeekDisabled))
				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d){
				return parseInt(d, 10);
			});

			o.daysOfWeekHighlighted = o.daysOfWeekHighlighted||[];
			if (!$.isArray(o.daysOfWeekHighlighted))
				o.daysOfWeekHighlighted = o.daysOfWeekHighlighted.split(/[,\s]*/);
			o.daysOfWeekHighlighted = $.map(o.daysOfWeekHighlighted, function(d){
				return parseInt(d, 10);
			});

			o.datesDisabled = o.datesDisabled||[];
			if (!$.isArray(o.datesDisabled)) {
				o.datesDisabled = [
					o.datesDisabled
				];
			}
			o.datesDisabled = $.map(o.datesDisabled,function(d){
				return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);
			});

			var plc = String(o.orientation).toLowerCase().split(/\s+/g),
				_plc = o.orientation.toLowerCase();
			plc = $.grep(plc, function(word){
				return /^auto|left|right|top|bottom$/.test(word);
			});
			o.orientation = {x: 'auto', y: 'auto'};
			if (!_plc || _plc === 'auto')
				; // no action
			else if (plc.length === 1){
				switch (plc[0]){
					case 'top':
					case 'bottom':
						o.orientation.y = plc[0];
						break;
					case 'left':
					case 'right':
						o.orientation.x = plc[0];
						break;
				}
			}
			else {
				_plc = $.grep(plc, function(word){
					return /^left|right$/.test(word);
				});
				o.orientation.x = _plc[0] || 'auto';

				_plc = $.grep(plc, function(word){
					return /^top|bottom$/.test(word);
				});
				o.orientation.y = _plc[0] || 'auto';
			}
			if (o.defaultViewDate) {
				var year = o.defaultViewDate.year || new Date().getFullYear();
				var month = o.defaultViewDate.month || 0;
				var day = o.defaultViewDate.day || 1;
				o.defaultViewDate = UTCDate(year, month, day);
			} else {
				o.defaultViewDate = UTCToday();
			}
		},
		_events: [],
		_secondaryEvents: [],
		_applyEvents: function(evs){
			for (var i=0, el, ch, ev; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.on(ev, ch);
			}
		},
		_unapplyEvents: function(evs){
			for (var i=0, el, ev, ch; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.off(ev, ch);
			}
		},
		_buildEvents: function(){
            var events = {
                keyup: $.proxy(function(e){
                    if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                        this.update();
                }, this),
                keydown: $.proxy(this.keydown, this),
                paste: $.proxy(this.paste, this)
            };

            if (this.o.showOnFocus === true) {
                events.focus = $.proxy(this.show, this);
            }

            if (this.isInput) { // single input
                this._events = [
                    [this.element, events]
                ];
            }
            else if (this.component && this.hasInput) { // component: input + button
                this._events = [
                    // For components that are not readonly, allow keyboard nav
                    [this.inputField, events],
                    [this.component, {
                        click: $.proxy(this.show, this)
                    }]
                ];
            }
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			this._events.push(
				// Component: listen for blur on element descendants
				[this.element, '*', {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}],
				// Input: listen for blur on element
				[this.element, {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}]
			);

			if (this.o.immediateUpdates) {
				// Trigger input updates immediately on changed year/month
				this._events.push([this.element, {
					'changeYear changeMonth': $.proxy(function(e){
						this.update(e.date);
					}, this)
				}]);
			}

			this._secondaryEvents = [
				[this.picker, {
					click: $.proxy(this.click, this)
				}],
				[$(window), {
					resize: $.proxy(this.place, this)
				}],
				[$(document), {
					mousedown: $.proxy(function(e){
						// Clicked outside the datepicker, hide it
						if (!(
							this.element.is(e.target) ||
							this.element.find(e.target).length ||
							this.picker.is(e.target) ||
							this.picker.find(e.target).length ||
							this.isInline
						)){
							this.hide();
						}
					}, this)
				}]
			];
		},
		_attachEvents: function(){
			this._detachEvents();
			this._applyEvents(this._events);
		},
		_detachEvents: function(){
			this._unapplyEvents(this._events);
		},
		_attachSecondaryEvents: function(){
			this._detachSecondaryEvents();
			this._applyEvents(this._secondaryEvents);
		},
		_detachSecondaryEvents: function(){
			this._unapplyEvents(this._secondaryEvents);
		},
		_trigger: function(event, altdate){
			var date = altdate || this.dates.get(-1),
				local_date = this._utc_to_local(date);

			this.element.trigger({
				type: event,
				date: local_date,
				dates: $.map(this.dates, this._utc_to_local),
				format: $.proxy(function(ix, format){
					if (arguments.length === 0){
						ix = this.dates.length - 1;
						format = this.o.format;
					}
					else if (typeof ix === 'string'){
						format = ix;
						ix = this.dates.length - 1;
					}
					format = format || this.o.format;
					var date = this.dates.get(ix);
					return DPGlobal.formatDate(date, format, this.o.language);
				}, this)
			});
		},

		show: function(){
			if (this.inputField.prop('disabled') || (this.inputField.prop('readonly') && this.o.enableOnReadonly === false))
				return;
			if (!this.isInline)
				this.picker.appendTo(this.o.container);
			this.place();
			this.picker.show();
			this._attachSecondaryEvents();
			this._trigger('show');
			if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {
				$(this.element).blur();
			}
			return this;
		},

		hide: function(){
			if (this.isInline || !this.picker.is(':visible'))
				return this;
			this.focusDate = null;
			this.picker.hide().detach();
			this._detachSecondaryEvents();
			this.viewMode = this.o.startView;
			this.showMode();

			if (this.o.forceParse && this.inputField.val())
				this.setValue();
			this._trigger('hide');
			return this;
		},

		destroy: function(){
			this.hide();
			this._detachEvents();
			this._detachSecondaryEvents();
			this.picker.remove();
			delete this.element.data().datepicker;
			if (!this.isInput){
				delete this.element.data().date;
			}
			return this;
		},

		paste: function(evt){
			var dateString;
			if (evt.originalEvent.clipboardData && evt.originalEvent.clipboardData.types
				&& $.inArray('text/plain', evt.originalEvent.clipboardData.types) !== -1) {
				dateString = evt.originalEvent.clipboardData.getData('text/plain');
			}
			else if (window.clipboardData) {
				dateString = window.clipboardData.getData('Text');
			}
			else {
				return;
			}
			this.setDate(dateString);
			this.update();
			evt.preventDefault();
		},

		_utc_to_local: function(utc){
			return utc && new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));
		},
		_local_to_utc: function(local){
			return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));
		},
		_zero_time: function(local){
			return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
		},
		_zero_utc_time: function(utc){
			return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
		},

		getDates: function(){
			return $.map(this.dates, this._utc_to_local);
		},

		getUTCDates: function(){
			return $.map(this.dates, function(d){
				return new Date(d);
			});
		},

		getDate: function(){
			return this._utc_to_local(this.getUTCDate());
		},

		getUTCDate: function(){
			var selected_date = this.dates.get(-1);
			if (typeof selected_date !== 'undefined') {
				return new Date(selected_date);
			} else {
				return null;
			}
		},

		clearDates: function(){
			if (this.inputField) {
				this.inputField.val('');
			}

			this.update();
			this._trigger('changeDate');

			if (this.o.autoclose) {
				this.hide();
			}
		},
		setDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, args);
			this._trigger('changeDate');
			this.setValue();
			return this;
		},

		setUTCDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, $.map(args, this._utc_to_local));
			this._trigger('changeDate');
			this.setValue();
			return this;
		},

		setDate: alias('setDates'),
		setUTCDate: alias('setUTCDates'),
		remove: alias('destroy'),

		setValue: function(){
			var formatted = this.getFormattedDate();
			this.inputField.val(formatted);
			return this;
		},

		getFormattedDate: function(format){
			if (format === undefined)
				format = this.o.format;

			var lang = this.o.language;
			return $.map(this.dates, function(d){
				return DPGlobal.formatDate(d, format, lang);
			}).join(this.o.multidateSeparator);
		},

		getStartDate: function(){
			return this.o.startDate;
		},

		setStartDate: function(startDate){
			this._process_options({startDate: startDate});
			this.update();
			this.updateNavArrows();
			return this;
		},

		getEndDate: function(){
			return this.o.endDate;
		},

		setEndDate: function(endDate){
			this._process_options({endDate: endDate});
			this.update();
			this.updateNavArrows();
			return this;
		},

		setDaysOfWeekDisabled: function(daysOfWeekDisabled){
			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
			this.update();
			this.updateNavArrows();
			return this;
		},

		setDaysOfWeekHighlighted: function(daysOfWeekHighlighted){
			this._process_options({daysOfWeekHighlighted: daysOfWeekHighlighted});
			this.update();
			return this;
		},

		setDatesDisabled: function(datesDisabled){
			this._process_options({datesDisabled: datesDisabled});
			this.update();
			this.updateNavArrows();
		},

		place: function(){
			if (this.isInline)
				return this;
			var calendarWidth = this.picker.outerWidth(),
				calendarHeight = this.picker.outerHeight(),
				visualPadding = 10,
				container = $(this.o.container),
				windowWidth = container.width(),
				scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(),
				appendOffset = container.offset();

			var parentsZindex = [];
			this.element.parents().each(function(){
				var itemZIndex = $(this).css('z-index');
				if (itemZIndex !== 'auto' && itemZIndex !== 0) parentsZindex.push(parseInt(itemZIndex));
			});
			var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;
			var offset = this.component ? this.component.parent().offset() : this.element.offset();
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
			var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
			var left = offset.left - appendOffset.left,
				top = offset.top - appendOffset.top;

			if (this.o.container !== 'body') {
				top += scrollTop;
			}

			this.picker.removeClass(
				'datepicker-orient-top datepicker-orient-bottom '+
				'datepicker-orient-right datepicker-orient-left'
			);

			if (this.o.orientation.x !== 'auto'){
				this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
				if (this.o.orientation.x === 'right')
					left -= calendarWidth - width;
			}
			// auto x orientation is best-placement: if it crosses a window
			// edge, fudge it sideways
			else {
				if (offset.left < 0) {
					// component is outside the window on the left side. Move it into visible range
					this.picker.addClass('datepicker-orient-left');
					left -= offset.left - visualPadding;
				} else if (left + calendarWidth > windowWidth) {
					// the calendar passes the widow right edge. Align it to component right side
					this.picker.addClass('datepicker-orient-right');
					left += width - calendarWidth;
				} else {
					// Default to left
					this.picker.addClass('datepicker-orient-left');
				}
			}

			// auto y orientation is best-situation: top or bottom, no fudging,
			// decision based on which shows more of the calendar
			var yorient = this.o.orientation.y,
				top_overflow;
			if (yorient === 'auto'){
				top_overflow = -scrollTop + top - calendarHeight;
				yorient = top_overflow < 0 ? 'bottom' : 'top';
			}

			this.picker.addClass('datepicker-orient-' + yorient);
			if (yorient === 'top')
				top -= calendarHeight + parseInt(this.picker.css('padding-top'));
			else
				top += height;

			if (this.o.rtl) {
				var right = windowWidth - (left + width);
				this.picker.css({
					top: top,
					right: right,
					zIndex: zIndex
				});
			} else {
				this.picker.css({
					top: top,
					left: left,
					zIndex: zIndex
				});
			}
			return this;
		},

		_allow_update: true,
		update: function(){
			if (!this._allow_update)
				return this;

			var oldDates = this.dates.copy(),
				dates = [],
				fromArgs = false;
			if (arguments.length){
				$.each(arguments, $.proxy(function(i, date){
					if (date instanceof Date)
						date = this._local_to_utc(date);
					dates.push(date);
				}, this));
				fromArgs = true;
			}
			else {
				dates = this.isInput
						? this.element.val()
						: this.element.data('date') || this.inputField.val();
				if (dates && this.o.multidate)
					dates = dates.split(this.o.multidateSeparator);
				else
					dates = [dates];
				delete this.element.data().date;
			}

			dates = $.map(dates, $.proxy(function(date){
				return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);
			}, this));
			dates = $.grep(dates, $.proxy(function(date){
				return (
					!this.dateWithinRange(date) ||
					!date
				);
			}, this), true);
			this.dates.replace(dates);

			if (this.dates.length)
				this.viewDate = new Date(this.dates.get(-1));
			else if (this.viewDate < this.o.startDate)
				this.viewDate = new Date(this.o.startDate);
			else if (this.viewDate > this.o.endDate)
				this.viewDate = new Date(this.o.endDate);
			else
				this.viewDate = this.o.defaultViewDate;

			if (fromArgs){
				// setting date by clicking
				this.setValue();
			}
			else if (dates.length){
				// setting date by typing
				if (String(oldDates) !== String(this.dates))
					this._trigger('changeDate');
			}
			if (!this.dates.length && oldDates.length)
				this._trigger('clearDate');

			this.fill();
			this.element.change();
			return this;
		},

		fillDow: function(){
			var dowCnt = this.o.weekStart,
				html = '<tr>';
			if (this.o.calendarWeeks){
				this.picker.find('.datepicker-days .datepicker-switch')
					.attr('colspan', function(i, val){
						return parseInt(val) + 1;
					});
				html += '<th class="cw">&#160;</th>';
			}
			while (dowCnt < this.o.weekStart + 7){
				html += '<th class="dow';
        if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) > -1)
          html += ' disabled';
        html += '">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
			}
			html += '</tr>';
			this.picker.find('.datepicker-days thead').append(html);
		},

		fillMonths: function(){
      var localDate = this._utc_to_local(this.viewDate);
			var html = '',
			i = 0;
			while (i < 12){
        var focused = localDate && localDate.getMonth() === i ? ' focused' : '';
				html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i++]+'</span>';
			}
			this.picker.find('.datepicker-months td').html(html);
		},

		setRange: function(range){
			if (!range || !range.length)
				delete this.range;
			else
				this.range = $.map(range, function(d){
					return d.valueOf();
				});
			this.fill();
		},

		getClassNames: function(date){
			var cls = [],
				year = this.viewDate.getUTCFullYear(),
				month = this.viewDate.getUTCMonth(),
				today = new Date();
			if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){
				cls.push('old');
			}
			else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){
				cls.push('new');
			}
			if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
				cls.push('focused');
			// Compare internal UTC date with local today, not UTC today
			if (this.o.todayHighlight &&
				date.getUTCFullYear() === today.getFullYear() &&
				date.getUTCMonth() === today.getMonth() &&
				date.getUTCDate() === today.getDate()){
				cls.push('today');
			}
			if (this.dates.contains(date) !== -1)
				cls.push('active');
			if (!this.dateWithinRange(date)){
				cls.push('disabled');
			}
			if (this.dateIsDisabled(date)){
				cls.push('disabled', 'disabled-date');	
			} 
			if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1){
				cls.push('highlighted');
			}

			if (this.range){
				if (date > this.range[0] && date < this.range[this.range.length-1]){
					cls.push('range');
				}
				if ($.inArray(date.valueOf(), this.range) !== -1){
					cls.push('selected');
				}
				if (date.valueOf() === this.range[0]){
          cls.push('range-start');
        }
        if (date.valueOf() === this.range[this.range.length-1]){
          cls.push('range-end');
        }
			}
			return cls;
		},

		_fill_yearsView: function(selector, cssClass, factor, step, currentYear, startYear, endYear, callback){
			var html, view, year, steps, startStep, endStep, thisYear, i, classes, tooltip, before;

			html      = '';
			view      = this.picker.find(selector);
			year      = parseInt(currentYear / factor, 10) * factor;
			startStep = parseInt(startYear / step, 10) * step;
			endStep   = parseInt(endYear / step, 10) * step;
			steps     = $.map(this.dates, function(d){
				return parseInt(d.getUTCFullYear() / step, 10) * step;
			});

			view.find('.datepicker-switch').text(year + '-' + (year + step * 9));

			thisYear = year - step;
			for (i = -1; i < 11; i += 1) {
				classes = [cssClass];
				tooltip = null;

				if (i === -1) {
					classes.push('old');
				} else if (i === 10) {
					classes.push('new');
				}
				if ($.inArray(thisYear, steps) !== -1) {
					classes.push('active');
				}
				if (thisYear < startStep || thisYear > endStep) {
					classes.push('disabled');
				}
        if (thisYear === this.viewDate.getFullYear()) {
				  classes.push('focused');
        }

				if (callback !== $.noop) {
					before = callback(new Date(thisYear, 0, 1));
					if (before === undefined) {
						before = {};
					} else if (typeof(before) === 'boolean') {
						before = {enabled: before};
					} else if (typeof(before) === 'string') {
						before = {classes: before};
					}
					if (before.enabled === false) {
						classes.push('disabled');
					}
					if (before.classes) {
						classes = classes.concat(before.classes.split(/\s+/));
					}
					if (before.tooltip) {
						tooltip = before.tooltip;
					}
				}

				html += '<span class="' + classes.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + thisYear + '</span>';
				thisYear += step;
			}
			view.find('td').html(html);
		},

		fill: function(){
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
				todaytxt = dates[this.o.language].today || dates['en'].today || '',
				cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
				titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat,
				tooltip,
				before;
			if (isNaN(year) || isNaN(month))
				return;
			this.picker.find('.datepicker-days .datepicker-switch')
						.text(DPGlobal.formatDate(d, titleFormat, this.o.language));
			this.picker.find('tfoot .today')
						.text(todaytxt)
						.toggle(this.o.todayBtn !== false);
			this.picker.find('tfoot .clear')
						.text(cleartxt)
						.toggle(this.o.clearBtn !== false);
			this.picker.find('thead .datepicker-title')
						.text(this.o.title)
						.toggle(this.o.title !== '');
			this.updateNavArrows();
			this.fillMonths();
			var prevMonth = UTCDate(year, month-1, 28),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
			var nextMonth = new Date(prevMonth);
			if (prevMonth.getUTCFullYear() < 100){
        nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());
      }
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth){
				if (prevMonth.getUTCDay() === this.o.weekStart){
					html.push('<tr>');
					if (this.o.calendarWeeks){
						// ISO 8601: First week contains first thursday.
						// ISO also states week starts on Monday, but we can be more abstract here.
						var
							// Start of current week: based on weekstart/current date
							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
							// Thursday of this week
							th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
							// First Thursday of year, year from thursday
							yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
							// Calendar week: ms between thursdays, div ms per day, div 7 days
							calWeek =  (th - yth) / 864e5 / 7 + 1;
						html.push('<td class="cw">'+ calWeek +'</td>');
					}
				}
				clsName = this.getClassNames(prevMonth);
				clsName.push('day');

				if (this.o.beforeShowDay !== $.noop){
					before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
					if (before === undefined)
						before = {};
					else if (typeof(before) === 'boolean')
						before = {enabled: before};
					else if (typeof(before) === 'string')
						before = {classes: before};
					if (before.enabled === false)
						clsName.push('disabled');
					if (before.classes)
						clsName = clsName.concat(before.classes.split(/\s+/));
					if (before.tooltip)
						tooltip = before.tooltip;
				}

				clsName = $.unique(clsName);
				html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
				tooltip = null;
				if (prevMonth.getUTCDay() === this.o.weekEnd){
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
			}
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

			var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months';
			var months = this.picker.find('.datepicker-months')
						.find('.datepicker-switch')
							.text(this.o.maxViewMode < 2 ? monthsTitle : year)
							.end()
						.find('span').removeClass('active');

			$.each(this.dates, function(i, d){
				if (d.getUTCFullYear() === year)
					months.eq(d.getUTCMonth()).addClass('active');
			});

			if (year < startYear || year > endYear){
				months.addClass('disabled');
			}
			if (year === startYear){
				months.slice(0, startMonth).addClass('disabled');
			}
			if (year === endYear){
				months.slice(endMonth+1).addClass('disabled');
			}

			if (this.o.beforeShowMonth !== $.noop){
				var that = this;
				$.each(months, function(i, month){
          var moDate = new Date(year, i, 1);
          var before = that.o.beforeShowMonth(moDate);
					if (before === undefined)
						before = {};
					else if (typeof(before) === 'boolean')
						before = {enabled: before};
					else if (typeof(before) === 'string')
						before = {classes: before};
					if (before.enabled === false && !$(month).hasClass('disabled'))
					    $(month).addClass('disabled');
					if (before.classes)
					    $(month).addClass(before.classes);
					if (before.tooltip)
					    $(month).prop('title', before.tooltip);
				});
			}

			// Generating decade/years picker
			this._fill_yearsView(
				'.datepicker-years',
				'year',
				10,
				1,
				year,
				startYear,
				endYear,
				this.o.beforeShowYear
			);

			// Generating century/decades picker
			this._fill_yearsView(
				'.datepicker-decades',
				'decade',
				100,
				10,
				year,
				startYear,
				endYear,
				this.o.beforeShowDecade
			);

			// Generating millennium/centuries picker
			this._fill_yearsView(
				'.datepicker-centuries',
				'century',
				1000,
				100,
				year,
				startYear,
				endYear,
				this.o.beforeShowCentury
			);
		},

		updateNavArrows: function(){
			if (!this._allow_update)
				return;

			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth();
			switch (this.viewMode){
				case 0:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
				case 2:
				case 3:
				case 4:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() || this.o.maxViewMode < 2){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() || this.o.maxViewMode < 2){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		click: function(e){
			e.preventDefault();
			e.stopPropagation();

			var target, dir, day, year, month, monthChanged, yearChanged;
			target = $(e.target);

			// Clicked on the switch
			if (target.hasClass('datepicker-switch')){
				this.showMode(1);
			}

			// Clicked on prev or next
			var navArrow = target.closest('.prev, .next');
			if (navArrow.length > 0) {
				dir = DPGlobal.modes[this.viewMode].navStep * (navArrow.hasClass('prev') ? -1 : 1);
				if (this.viewMode === 0){
					this.viewDate = this.moveMonth(this.viewDate, dir);
					this._trigger('changeMonth', this.viewDate);
				} else {
					this.viewDate = this.moveYear(this.viewDate, dir);
					if (this.viewMode === 1){
						this._trigger('changeYear', this.viewDate);
					}
				}
				this.fill();
			}

			// Clicked on today button
			if (target.hasClass('today') && !target.hasClass('day')){
				this.showMode(-2);
				this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view');
			}

			// Clicked on clear button
			if (target.hasClass('clear')){
				this.clearDates();
			}

			if (!target.hasClass('disabled')){
				// Clicked on a day
				if (target.hasClass('day')){
					day = parseInt(target.text(), 10) || 1;
					year = this.viewDate.getUTCFullYear();
					month = this.viewDate.getUTCMonth();

					// From last month
					if (target.hasClass('old')){
						if (month === 0) {
							month = 11;
							year = year - 1;
							monthChanged = true;
							yearChanged = true;
						} else {
							month = month - 1;
							monthChanged = true;
 						}
 					}

					// From next month
					if (target.hasClass('new')) {
						if (month === 11){
							month = 0;
							year = year + 1;
							monthChanged = true;
							yearChanged = true;
 						} else {
							month = month + 1;
							monthChanged = true;
 						}
					}
					this._setDate(UTCDate(year, month, day));
					if (yearChanged) {
						this._trigger('changeYear', this.viewDate);
					}
					if (monthChanged) {
						this._trigger('changeMonth', this.viewDate);
					}
				}

				// Clicked on a month
				if (target.hasClass('month')) {
					this.viewDate.setUTCDate(1);
					day = 1;
					month = target.parent().find('span').index(target);
					year = this.viewDate.getUTCFullYear();
					this.viewDate.setUTCMonth(month);
					this._trigger('changeMonth', this.viewDate);
					if (this.o.minViewMode === 1){
						this._setDate(UTCDate(year, month, day));
						this.showMode();
					} else {
						this.showMode(-1);
					}
					this.fill();
				}

				// Clicked on a year
				if (target.hasClass('year')
						|| target.hasClass('decade')
						|| target.hasClass('century')) {
					this.viewDate.setUTCDate(1);

					day = 1;
					month = 0;
					year = parseInt(target.text(), 10)||0;
					this.viewDate.setUTCFullYear(year);

					if (target.hasClass('year')){
						this._trigger('changeYear', this.viewDate);
						if (this.o.minViewMode === 2){
							this._setDate(UTCDate(year, month, day));
						}
					}
					if (target.hasClass('decade')){
						this._trigger('changeDecade', this.viewDate);
						if (this.o.minViewMode === 3){
							this._setDate(UTCDate(year, month, day));
						}
					}
					if (target.hasClass('century')){
						this._trigger('changeCentury', this.viewDate);
						if (this.o.minViewMode === 4){
							this._setDate(UTCDate(year, month, day));
						}
					}

					this.showMode(-1);
					this.fill();
				}
			}

			if (this.picker.is(':visible') && this._focused_from){
				$(this._focused_from).focus();
			}
			delete this._focused_from;
		},

		_toggle_multidate: function(date){
			var ix = this.dates.contains(date);
			if (!date){
				this.dates.clear();
			}

			if (ix !== -1){
				if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive){
					this.dates.remove(ix);
				}
			} else if (this.o.multidate === false) {
				this.dates.clear();
				this.dates.push(date);
			}
			else {
				this.dates.push(date);
			}

			if (typeof this.o.multidate === 'number')
				while (this.dates.length > this.o.multidate)
					this.dates.remove(0);
		},

		_setDate: function(date, which){
			if (!which || which === 'date')
				this._toggle_multidate(date && new Date(date));
			if (!which || which === 'view')
				this.viewDate = date && new Date(date);

			this.fill();
			this.setValue();
			if (!which || which !== 'view') {
				this._trigger('changeDate');
			}
			if (this.inputField){
				this.inputField.change();
			}
			if (this.o.autoclose && (!which || which === 'date')){
				this.hide();
			}
		},

		moveDay: function(date, dir){
			var newDate = new Date(date);
			newDate.setUTCDate(date.getUTCDate() + dir);

			return newDate;
		},

		moveWeek: function(date, dir){
			return this.moveDay(date, dir * 7);
		},

		moveMonth: function(date, dir){
			if (!isValidDate(date))
				return this.o.defaultViewDate;
			if (!dir)
				return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag === 1){
				test = dir === -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function(){
						return new_date.getUTCMonth() === month;
					}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function(){
						return new_date.getUTCMonth() !== new_month;
					};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			}
			else {
				// For magnitudes >1, move one month at a time...
				for (var i=0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function(){
					return new_month !== new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()){
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function(date, dir){
			return this.moveMonth(date, dir*12);
		},

		moveAvailableDate: function(date, dir, fn){
			do {
				date = this[fn](date, dir);

				if (!this.dateWithinRange(date))
					return false;

				fn = 'moveDay';
			}
			while (this.dateIsDisabled(date));

			return date;
		},

		weekOfDateIsDisabled: function(date){
			return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
		},

		dateIsDisabled: function(date){
			return (
				this.weekOfDateIsDisabled(date) ||
				$.grep(this.o.datesDisabled, function(d){
					return isUTCEquals(date, d);
				}).length > 0
			);
		},

		dateWithinRange: function(date){
			return date >= this.o.startDate && date <= this.o.endDate;
		},

		keydown: function(e){
			if (!this.picker.is(':visible')){
				if (e.keyCode === 40 || e.keyCode === 27) { // allow down to re-show picker
					this.show();
					e.stopPropagation();
        }
				return;
			}
			var dateChanged = false,
				dir, newViewDate,
				focusDate = this.focusDate || this.viewDate;
			switch (e.keyCode){
				case 27: // escape
					if (this.focusDate){
						this.focusDate = null;
						this.viewDate = this.dates.get(-1) || this.viewDate;
						this.fill();
					}
					else
						this.hide();
					e.preventDefault();
					e.stopPropagation();
					break;
				case 37: // left
				case 38: // up
				case 39: // right
				case 40: // down
					if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
						break;
					dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;
          if (this.viewMode === 0) {
  					if (e.ctrlKey){
  						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');

  						if (newViewDate)
  							this._trigger('changeYear', this.viewDate);
  					}
  					else if (e.shiftKey){
  						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');

  						if (newViewDate)
  							this._trigger('changeMonth', this.viewDate);
  					}
  					else if (e.keyCode === 37 || e.keyCode === 39){
  						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay');
  					}
  					else if (!this.weekOfDateIsDisabled(focusDate)){
  						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek');
  					}
          } else if (this.viewMode === 1) {
            if (e.keyCode === 38 || e.keyCode === 40) {
              dir = dir * 4;
            }
            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');
          } else if (this.viewMode === 2) {
            if (e.keyCode === 38 || e.keyCode === 40) {
              dir = dir * 4;
            }
            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');
          }
					if (newViewDate){
						this.focusDate = this.viewDate = newViewDate;
						this.setValue();
						this.fill();
						e.preventDefault();
					}
					break;
				case 13: // enter
					if (!this.o.forceParse)
						break;
					focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
					if (this.o.keyboardNavigation) {
						this._toggle_multidate(focusDate);
						dateChanged = true;
					}
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.setValue();
					this.fill();
					if (this.picker.is(':visible')){
						e.preventDefault();
						e.stopPropagation();
						if (this.o.autoclose)
							this.hide();
					}
					break;
				case 9: // tab
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.fill();
					this.hide();
					break;
			}
			if (dateChanged){
				if (this.dates.length)
					this._trigger('changeDate');
				else
					this._trigger('clearDate');
				if (this.inputField){
					this.inputField.change();
				}
			}
		},

		showMode: function(dir){
			if (dir){
				this.viewMode = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, this.viewMode + dir));
			}
			this.picker
				.children('div')
				.hide()
				.filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName)
					.show();
			this.updateNavArrows();
		}
	};

	var DateRangePicker = function(element, options){
		$(element).data('datepicker', this);
		this.element = $(element);
		this.inputs = $.map(options.inputs, function(i){
			return i.jquery ? i[0] : i;
		});
		delete options.inputs;

		datepickerPlugin.call($(this.inputs), options)
			.on('changeDate', $.proxy(this.dateUpdated, this));

		this.pickers = $.map(this.inputs, function(i){
			return $(i).data('datepicker');
		});
		this.updateDates();
	};
	DateRangePicker.prototype = {
		updateDates: function(){
			this.dates = $.map(this.pickers, function(i){
				return i.getUTCDate();
			});
			this.updateRanges();
		},
		updateRanges: function(){
			var range = $.map(this.dates, function(d){
				return d.valueOf();
			});
			$.each(this.pickers, function(i, p){
				p.setRange(range);
			});
		},
		dateUpdated: function(e){
			// `this.updating` is a workaround for preventing infinite recursion
			// between `changeDate` triggering and `setUTCDate` calling.  Until
			// there is a better mechanism.
			if (this.updating)
				return;
			this.updating = true;

			var dp = $(e.target).data('datepicker');

			if (typeof(dp) === "undefined") {
				return;
			}

			var new_date = dp.getUTCDate(),
				i = $.inArray(e.target, this.inputs),
				j = i - 1,
				k = i + 1,
				l = this.inputs.length;
			if (i === -1)
				return;

			$.each(this.pickers, function(i, p){
				if (!p.getUTCDate())
					p.setUTCDate(new_date);
			});

			if (new_date < this.dates[j]){
				// Date being moved earlier/left
				while (j >= 0 && new_date < this.dates[j]){
					this.pickers[j--].setUTCDate(new_date);
				}
			}
			else if (new_date > this.dates[k]){
				// Date being moved later/right
				while (k < l && new_date > this.dates[k]){
					this.pickers[k++].setUTCDate(new_date);
				}
			}
			this.updateDates();

			delete this.updating;
		},
		remove: function(){
			$.map(this.pickers, function(p){ p.remove(); });
			delete this.element.data().datepicker;
		}
	};

	function opts_from_el(el, prefix){
		// Derive options from element data-attrs
		var data = $(el).data(),
			out = {}, inkey,
			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
		prefix = new RegExp('^' + prefix.toLowerCase());
		function re_lower(_,a){
			return a.toLowerCase();
		}
		for (var key in data)
			if (prefix.test(key)){
				inkey = key.replace(replace, re_lower);
				out[inkey] = data[key];
			}
		return out;
	}

	function opts_from_locale(lang){
		// Derive options from locale plugins
		var out = {};
		// Check if "de-DE" style date is available, if not language should
		// fallback to 2 letter code eg "de"
		if (!dates[lang]){
			lang = lang.split('-')[0];
			if (!dates[lang])
				return;
		}
		var d = dates[lang];
		$.each(locale_opts, function(i,k){
			if (k in d)
				out[k] = d[k];
		});
		return out;
	}

	var old = $.fn.datepicker;
	var datepickerPlugin = function(option){
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return;
		this.each(function(){
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option === 'object' && option;
			if (!data){
				var elopts = opts_from_el(this, 'date'),
					// Preliminary otions
					xopts = $.extend({}, defaults, elopts, options),
					locopts = opts_from_locale(xopts.language),
					// Options priority: js args, data-attrs, locales, defaults
					opts = $.extend({}, defaults, locopts, elopts, options);
				if ($this.hasClass('input-daterange') || opts.inputs){
					$.extend(opts, {
						inputs: opts.inputs || $this.find('input').toArray()
					});
					data = new DateRangePicker(this, opts);
				}
				else {
					data = new Datepicker(this, opts);
				}
				$this.data('datepicker', data);
			}
			if (typeof option === 'string' && typeof data[option] === 'function'){
				internal_return = data[option].apply(data, args);
			}
		});

		if (
			internal_return === undefined ||
			internal_return instanceof Datepicker ||
			internal_return instanceof DateRangePicker
		)
			return this;

		if (this.length > 1)
			throw new Error('Using only allowed for the collection of a single element (' + option + ' function)');
		else
			return internal_return;
	};
	$.fn.datepicker = datepickerPlugin;

	var defaults = $.fn.datepicker.defaults = {
		assumeNearbyYear: false,
		autoclose: false,
		beforeShowDay: $.noop,
		beforeShowMonth: $.noop,
		beforeShowYear: $.noop,
		beforeShowDecade: $.noop,
		beforeShowCentury: $.noop,
		calendarWeeks: false,
		clearBtn: false,
		toggleActive: false,
		daysOfWeekDisabled: [],
		daysOfWeekHighlighted: [],
		datesDisabled: [],
		endDate: Infinity,
		forceParse: true,
		format: 'mm/dd/yyyy',
		keyboardNavigation: true,
		language: 'en',
		minViewMode: 0,
		maxViewMode: 4,
		multidate: false,
		multidateSeparator: ',',
		orientation: "auto",
		rtl: false,
		startDate: -Infinity,
		startView: 0,
		todayBtn: false,
		todayHighlight: false,
		weekStart: 0,
		disableTouchKeyboard: false,
		enableOnReadonly: true,
		showOnFocus: true,
		zIndexOffset: 10,
		container: 'body',
		immediateUpdates: false,
		title: '',
		templates: {
			leftArrow: '&laquo;',
			rightArrow: '&raquo;'
		}
	};
	var locale_opts = $.fn.datepicker.locale_opts = [
		'format',
		'rtl',
		'weekStart'
	];
	$.fn.datepicker.Constructor = Datepicker;
	var dates = $.fn.datepicker.dates = {
		en: {
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			today: "Today",
			clear: "Clear",
			titleFormat: "MM yyyy"
		}
	};

	var DPGlobal = {
		modes: [
			{
				clsName: 'days',
				navFnc: 'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc: 'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc: 'FullYear',
				navStep: 10
			},
			{
				clsName: 'decades',
				navFnc: 'FullDecade',
				navStep: 100
			},
			{
				clsName: 'centuries',
				navFnc: 'FullCentury',
				navStep: 1000
		}],
		isLeapYear: function(year){
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
		},
		getDaysInMonth: function(year, month){
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		},
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
		nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
		parseFormat: function(format){
			if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function')
                return format;
            // IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts, '\0').split('\0'),
				parts = format.match(this.validParts);
			if (!separators || !separators.length || !parts || parts.length === 0){
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate: function(date, format, language, assumeNearby){
			if (!date)
				return undefined;
			if (date instanceof Date)
				return date;
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			if (format.toValue)
                return format.toValue(date, format, language);
            var part_re = /([\-+]\d+)([dmwy])/,
				parts = date.match(/([\-+]\d+)([dmwy])/g),
				fn_map = {
					d: 'moveDay',
					m: 'moveMonth',
					w: 'moveWeek',
					y: 'moveYear'
				},
				dateAliases = {
					yesterday: '-1d',
					today: '+0d',
					tomorrow: '+1d'
				},
				part, dir, i, fn;
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
				date = new Date();
				for (i=0; i < parts.length; i++){
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					fn = fn_map[part[2]];
					date = Datepicker.prototype[fn](date, dir);
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
			}

			if (typeof dateAliases[date] !== 'undefined') {
				date = dateAliases[date];
				parts = date.match(/([\-+]\d+)([dmwy])/g);

				if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
					date = new Date();
				  	for (i=0; i < parts.length; i++){
						part = part_re.exec(parts[i]);
						dir = parseInt(part[1]);
						fn = fn_map[part[2]];
						date = Datepicker.prototype[fn](date, dir);
				  	}

			  		return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
				}
			}

			parts = date && date.match(this.nonpunctuation) || [];
			date = new Date();

			function applyNearbyYear(year, threshold){
				if (threshold === true)
					threshold = 10;

				// if year is 2 digits or less, than the user most likely is trying to get a recent century
				if (year < 100){
					year += 2000;
					// if the new year is more than threshold years in advance, use last century
					if (year > ((new Date()).getFullYear()+threshold)){
						year -= 100;
					}
				}

				return year;
			}

			var parsed = {},
				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
				setters_map = {
					yyyy: function(d,v){
						return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
					},
					yy: function(d,v){
						return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
					},
					m: function(d,v){
						if (isNaN(d))
							return d;
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() !== v)
							d.setUTCDate(d.getUTCDate()-1);
						return d;
					},
					d: function(d,v){
						return d.setUTCDate(v);
					}
				},
				val, filtered;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			date = UTCToday();
			var fparts = format.parts.slice();
			// Remove noop parts
			if (parts.length !== fparts.length){
				fparts = $(fparts).filter(function(i,p){
					return $.inArray(p, setters_order) !== -1;
				}).toArray();
			}
			// Process remainder
			function match_part(){
				var m = this.slice(0, parts[i].length),
					p = parts[i].slice(0, m.length);
				return m.toLowerCase() === p.toLowerCase();
			}
			if (parts.length === fparts.length){
				var cnt;
				for (i=0, cnt = fparts.length; i < cnt; i++){
					val = parseInt(parts[i], 10);
					part = fparts[i];
					if (isNaN(val)){
						switch (part){
							case 'MM':
								filtered = $(dates[language].months).filter(match_part);
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(match_part);
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
						}
					}
					parsed[part] = val;
				}
				var _date, s;
				for (i=0; i < setters_order.length; i++){
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s])){
						_date = new Date(date);
						setters_map[s](_date, parsed[s]);
						if (!isNaN(_date))
							date = _date;
					}
				}
			}
			return date;
		},
		formatDate: function(date, format, language){
			if (!date)
				return '';
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			if (format.toDisplay)
                return format.toDisplay(date, format, language);
            var val = {
				d: date.getUTCDate(),
				D: dates[language].daysShort[date.getUTCDay()],
				DD: dates[language].days[date.getUTCDay()],
				m: date.getUTCMonth() + 1,
				M: dates[language].monthsShort[date.getUTCMonth()],
				MM: dates[language].months[date.getUTCMonth()],
				yy: date.getUTCFullYear().toString().substring(2),
				yyyy: date.getUTCFullYear()
			};
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			date = [];
			var seps = $.extend([], format.separators);
			for (var i=0, cnt = format.parts.length; i <= cnt; i++){
				if (seps.length)
					date.push(seps.shift());
				date.push(val[format.parts[i]]);
			}
			return date.join('');
		},
		headTemplate: '<thead>'+
			              '<tr>'+
			                '<th colspan="7" class="datepicker-title"></th>'+
			              '</tr>'+
							'<tr>'+
								'<th class="prev">&laquo;</th>'+
								'<th colspan="5" class="datepicker-switch"></th>'+
								'<th class="next">&raquo;</th>'+
							'</tr>'+
						'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate: '<tfoot>'+
							'<tr>'+
								'<th colspan="7" class="today"></th>'+
							'</tr>'+
							'<tr>'+
								'<th colspan="7" class="clear"></th>'+
							'</tr>'+
						'</tfoot>'
	};
	DPGlobal.template = '<div class="datepicker">'+
							'<div class="datepicker-days">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									'<tbody></tbody>'+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-months">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-years">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-decades">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-centuries">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
						'</div>';

	$.fn.datepicker.DPGlobal = DPGlobal;


	/* DATEPICKER NO CONFLICT
	* =================== */

	$.fn.datepicker.noConflict = function(){
		$.fn.datepicker = old;
		return this;
	};

	/* DATEPICKER VERSION
	 * =================== */
	$.fn.datepicker.version = '1.6.1';

	/* DATEPICKER DATA-API
	* ================== */

	$(document).on(
		'focus.datepicker.data-api click.datepicker.data-api',
		'[data-provide="datepicker"]',
		function(e){
			var $this = $(this);
			if ($this.data('datepicker'))
				return;
			e.preventDefault();
			// component click requires us to explicitly show it
			datepickerPlugin.call($this, 'show');
		}
	);
	$(function(){
		datepickerPlugin.call($('[data-provide="datepicker-inline"]'));
	});

}));

/**
 * Simplified Chinese translation for bootstrap-datepicker
 * Yuan Cheung <advanimal@gmail.com>
 */
;(function($){
	$.fn.datepicker.dates['zh-CN'] = {
		days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
		daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
		daysMin:  ["日", "一", "二", "三", "四", "五", "六"],
		months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
		monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
		today: "今日",
		clear: "清除",
		format: "yyyy年mm月dd日",
		titleFormat: "yyyy年mm月",
		weekStart: 1
	};
}(jQuery));
/* =========================================================
 * bootstrap-datetimepicker.js
 * =========================================================
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Improvements by Sébastien Malot
 * Improvements by Yun Lai
 * Improvements by Kenneth Henderick
 * Project URL : http://www.malot.fr/bootstrap-datetimepicker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

/*
 * Improvement by CuGBabyBeaR @ 2013-09-12
 *
 * Make it work in bootstrap v3
 */

!function ($) {

	function UTCDate() {
		return new Date(Date.UTC.apply(Date, arguments));
	}

	function UTCToday() {
		var today = new Date();
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), today.getUTCHours(), today.getUTCMinutes(), today.getUTCSeconds(), 0);
	}

	// Picker object

	var Datetimepicker = function (element, options) {
		var that = this;

		this.element = $(element);

		// add container for single page application
		// when page switch the datetimepicker div will be removed also.
		this.container = options.container || 'body';

		this.language = options.language || this.element.data('date-language') || "en";
		this.language = this.language in dates ? this.language : "en";
		this.isRTL = dates[this.language].rtl || false;
		this.formatType = options.formatType || this.element.data('format-type') || 'standard';
		this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);
		this.isInline = false;
		this.isVisible = false;
		this.isInput = this.element.is('input');
		this.fontAwesome = options.fontAwesome || this.element.data('font-awesome') || false;

		this.bootcssVer = options.bootcssVer || (this.isInput ? (this.element.is('.form-control') ? 3 : 2) : ( this.bootcssVer = this.element.is('.input-group') ? 3 : 2 ));

		this.component = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-calendar, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o').parent() : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar .fa-calendar .fa-clock-o').parent()) : false;
		this.componentReset = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find(".input-group-addon .glyphicon-remove, .input-group-addon .fa-times").parent():this.element.find(".add-on .icon-remove, .add-on .fa-times").parent()) : false;
		this.hasInput = this.component && this.element.find('input').length;
		if (this.component && this.component.length === 0) {
			this.component = false;
		}
		this.linkField = options.linkField || this.element.data('link-field') || false;
		this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);
		this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
		this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
		this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;
		this.initialDate = options.initialDate || new Date();
		this.zIndex = options.zIndex || this.element.data('z-index') || undefined;

		this.icons = {
			leftArrow: this.fontAwesome ? 'fa-arrow-left' : (this.bootcssVer === 3 ? 'glyphicon-arrow-left' : 'icon-arrow-left'),
			rightArrow: this.fontAwesome ? 'fa-arrow-right' : (this.bootcssVer === 3 ? 'glyphicon-arrow-right' : 'icon-arrow-right')
		};
		this.icontype = this.fontAwesome ? 'fa' : 'glyphicon';

		this._attachEvents();

		this.formatViewType = "datetime";
		if ('formatViewType' in options) {
			this.formatViewType = options.formatViewType;
		} else if ('formatViewType' in this.element.data()) {
			this.formatViewType = this.element.data('formatViewType');
		}

		this.minView = 0;
		if ('minView' in options) {
			this.minView = options.minView;
		} else if ('minView' in this.element.data()) {
			this.minView = this.element.data('min-view');
		}
		this.minView = DPGlobal.convertViewMode(this.minView);

		this.maxView = DPGlobal.modes.length - 1;
		if ('maxView' in options) {
			this.maxView = options.maxView;
		} else if ('maxView' in this.element.data()) {
			this.maxView = this.element.data('max-view');
		}
		this.maxView = DPGlobal.convertViewMode(this.maxView);

		this.wheelViewModeNavigation = false;
		if ('wheelViewModeNavigation' in options) {
			this.wheelViewModeNavigation = options.wheelViewModeNavigation;
		} else if ('wheelViewModeNavigation' in this.element.data()) {
			this.wheelViewModeNavigation = this.element.data('view-mode-wheel-navigation');
		}

		this.wheelViewModeNavigationInverseDirection = false;

		if ('wheelViewModeNavigationInverseDirection' in options) {
			this.wheelViewModeNavigationInverseDirection = options.wheelViewModeNavigationInverseDirection;
		} else if ('wheelViewModeNavigationInverseDirection' in this.element.data()) {
			this.wheelViewModeNavigationInverseDirection = this.element.data('view-mode-wheel-navigation-inverse-dir');
		}

		this.wheelViewModeNavigationDelay = 100;
		if ('wheelViewModeNavigationDelay' in options) {
			this.wheelViewModeNavigationDelay = options.wheelViewModeNavigationDelay;
		} else if ('wheelViewModeNavigationDelay' in this.element.data()) {
			this.wheelViewModeNavigationDelay = this.element.data('view-mode-wheel-navigation-delay');
		}

		this.startViewMode = 2;
		if ('startView' in options) {
			this.startViewMode = options.startView;
		} else if ('startView' in this.element.data()) {
			this.startViewMode = this.element.data('start-view');
		}
		this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
		this.viewMode = this.startViewMode;

		this.viewSelect = this.minView;
		if ('viewSelect' in options) {
			this.viewSelect = options.viewSelect;
		} else if ('viewSelect' in this.element.data()) {
			this.viewSelect = this.element.data('view-select');
		}
		this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);

		this.forceParse = true;
		if ('forceParse' in options) {
			this.forceParse = options.forceParse;
		} else if ('dateForceParse' in this.element.data()) {
			this.forceParse = this.element.data('date-force-parse');
		}
		var template = this.bootcssVer === 3 ? DPGlobal.templateV3 : DPGlobal.template;
		while (template.indexOf('{iconType}') !== -1) {
			template = template.replace('{iconType}', this.icontype);
		}
		while (template.indexOf('{leftArrow}') !== -1) {
			template = template.replace('{leftArrow}', this.icons.leftArrow);
		}
		while (template.indexOf('{rightArrow}') !== -1) {
			template = template.replace('{rightArrow}', this.icons.rightArrow);
		}
		this.picker = $(template)
			.appendTo(this.isInline ? this.element : this.container) // 'body')
			.on({
				click:     $.proxy(this.click, this),
				mousedown: $.proxy(this.mousedown, this)
			});

		if (this.wheelViewModeNavigation) {
			if ($.fn.mousewheel) {
				this.picker.on({mousewheel: $.proxy(this.mousewheel, this)});
			} else {
				console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option");
			}
		}

		if (this.isInline) {
			this.picker.addClass('datetimepicker-inline');
		} else {
			this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');
		}
		if (this.isRTL) {
			this.picker.addClass('datetimepicker-rtl');
			var selector = this.bootcssVer === 3 ? '.prev span, .next span' : '.prev i, .next i';
			this.picker.find(selector).toggleClass(this.icons.leftArrow + ' ' + this.icons.rightArrow);
		}
		$(document).on('mousedown', function (e) {
			// Clicked outside the datetimepicker, hide it
			if ($(e.target).closest('.datetimepicker').length === 0) {
				that.hide();
			}
		});

		this.autoclose = false;
		if ('autoclose' in options) {
			this.autoclose = options.autoclose;
		} else if ('dateAutoclose' in this.element.data()) {
			this.autoclose = this.element.data('date-autoclose');
		}

		this.keyboardNavigation = true;
		if ('keyboardNavigation' in options) {
			this.keyboardNavigation = options.keyboardNavigation;
		} else if ('dateKeyboardNavigation' in this.element.data()) {
			this.keyboardNavigation = this.element.data('date-keyboard-navigation');
		}

		this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false);
		this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false);

		this.weekStart = ((options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7);
		this.weekEnd = ((this.weekStart + 6) % 7);
		this.startDate = -Infinity;
		this.endDate = Infinity;
		this.daysOfWeekDisabled = [];
		this.setStartDate(options.startDate || this.element.data('date-startdate'));
		this.setEndDate(options.endDate || this.element.data('date-enddate'));
		this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
		this.setMinutesDisabled(options.minutesDisabled || this.element.data('date-minute-disabled'));
		this.setHoursDisabled(options.hoursDisabled || this.element.data('date-hour-disabled'));
		this.fillDow();
		this.fillMonths();
		this.update();
		this.showMode();

		if (this.isInline) {
			this.show();
		}
	};

	Datetimepicker.prototype = {
		constructor: Datetimepicker,

		_events:       [],
		_attachEvents: function () {
			this._detachEvents();
			if (this.isInput) { // single input
				this._events = [
					[this.element, {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput) { // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
				if (this.componentReset) {
					this._events.push([
						this.componentReset,
						{click: $.proxy(this.reset, this)}
					]);
				}
			}
			else if (this.element.is('div')) {  // inline datetimepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.on(ev);
			}
		},

		_detachEvents: function () {
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.off(ev);
			}
			this._events = [];
		},

		show: function (e) {
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			if (this.forceParse) {
				this.update();
			}
			this.place();
			$(window).on('resize', $.proxy(this.place, this));
			if (e) {
				e.stopPropagation();
				e.preventDefault();
			}
			this.isVisible = true;
			this.element.trigger({
				type: 'show',
				date: this.date
			});
		},

		hide: function (e) {
			if (!this.isVisible) return;
			if (this.isInline) return;
			this.picker.hide();
			$(window).off('resize', this.place);
			this.viewMode = this.startViewMode;
			this.showMode();
			if (!this.isInput) {
				$(document).off('mousedown', this.hide);
			}

			if (
				this.forceParse &&
					(
						this.isInput && this.element.val() ||
							this.hasInput && this.element.find('input').val()
						)
				)
				this.setValue();
			this.isVisible = false;
			this.element.trigger({
				type: 'hide',
				date: this.date
			});
		},

		remove: function () {
			this._detachEvents();
			this.picker.remove();
			delete this.picker;
			delete this.element.data().datetimepicker;
		},

		getDate: function () {
			var d = this.getUTCDate();
			return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
		},

		getUTCDate: function () {
			return this.date;
		},

		setDate: function (d) {
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
		},

		setUTCDate: function (d) {
			if (d >= this.startDate && d <= this.endDate) {
				this.date = d;
				this.setValue();
				this.viewDate = this.date;
				this.fill();
			} else {
				this.element.trigger({
					type:      'outOfRange',
					date:      d,
					startDate: this.startDate,
					endDate:   this.endDate
				});
			}
		},

		setFormat: function (format) {
			this.format = DPGlobal.parseFormat(format, this.formatType);
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element && element.val()) {
				this.setValue();
			}
		},

		setValue: function () {
			var formatted = this.getFormattedDate();
			if (!this.isInput) {
				if (this.component) {
					this.element.find('input').val(formatted);
				}
				this.element.data('date', formatted);
			} else {
				this.element.val(formatted);
			}
			if (this.linkField) {
				$('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
			}
		},

		getFormattedDate: function (format) {
			if (format == undefined) format = this.format;
			return DPGlobal.formatDate(this.date, format, this.language, this.formatType);
		},

		setStartDate: function (startDate) {
			this.startDate = startDate || -Infinity;
			if (this.startDate !== -Infinity) {
				this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function (endDate) {
			this.endDate = endDate || Infinity;
			if (this.endDate !== Infinity) {
				this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
			this.daysOfWeekDisabled = daysOfWeekDisabled || [];
			if (!$.isArray(this.daysOfWeekDisabled)) {
				this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
			}
			this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		setMinutesDisabled: function (minutesDisabled) {
			this.minutesDisabled = minutesDisabled || [];
			if (!$.isArray(this.minutesDisabled)) {
				this.minutesDisabled = this.minutesDisabled.split(/,\s*/);
			}
			this.minutesDisabled = $.map(this.minutesDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		setHoursDisabled: function (hoursDisabled) {
			this.hoursDisabled = hoursDisabled || [];
			if (!$.isArray(this.hoursDisabled)) {
				this.hoursDisabled = this.hoursDisabled.split(/,\s*/);
			}
			this.hoursDisabled = $.map(this.hoursDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		place: function () {
			if (this.isInline) return;

			if (!this.zIndex) {
				var index_highest = 0;
				$('div').each(function () {
					var index_current = parseInt($(this).css("zIndex"), 10);
					if (index_current > index_highest) {
						index_highest = index_current;
					}
				});
				this.zIndex = index_highest + 10;
			}

			var offset, top, left, containerOffset;
			if (this.container instanceof $) {
				containerOffset = this.container.offset();
			} else {
				containerOffset = $(this.container).offset();
			}

			if (this.component) {
				offset = this.component.offset();
				left = offset.left;
				if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {
					left += this.component.outerWidth() - this.picker.outerWidth();
				}
			} else {
				offset = this.element.offset();
				left = offset.left;
			}

			if(left+220 > document.body.clientWidth){
            			left = document.body.clientWidth-220;
          		}

			if (this.pickerPosition == 'top-left' || this.pickerPosition == 'top-right') {
				top = offset.top - this.picker.outerHeight();
			} else {
				top = offset.top + this.height;
			}

			top = top - containerOffset.top;
			left = left - containerOffset.left;

			if(this.container != 'body') top = top + document.body.scrollTop

			this.picker.css({
				top:    top,
				left:   left,
				zIndex: this.zIndex
			});
		},

		update: function () {
			var date, fromArgs = false;
			if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
				date = arguments[0];
				fromArgs = true;
			} else {
				date = (this.isInput ? this.element.val() : this.element.find('input').val()) || this.element.data('date') || this.initialDate;
				if (typeof date == 'string' || date instanceof String) {
				  date = date.replace(/^\s+|\s+$/g,'');
				}
			}

			if (!date) {
				date = new Date();
				fromArgs = false;
			}

			this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType);

			if (fromArgs) this.setValue();

			if (this.date < this.startDate) {
				this.viewDate = new Date(this.startDate);
			} else if (this.date > this.endDate) {
				this.viewDate = new Date(this.endDate);
			} else {
				this.viewDate = new Date(this.date);
			}
			this.fill();
		},

		fillDow: function () {
			var dowCnt = this.weekStart,
				html = '<tr>';
			while (dowCnt < this.weekStart + 7) {
				html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
			}
			html += '</tr>';
			this.picker.find('.datetimepicker-days thead').append(html);
		},

		fillMonths: function () {
			var html = '',
				i = 0;
			while (i < 12) {
				html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
			}
			this.picker.find('.datetimepicker-months td').html(html);
		},

		fill: function () {
			if (this.date == null || this.viewDate == null) {
				return;
			}
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				dayMonth = d.getUTCDate(),
				hours = d.getUTCHours(),
				minutes = d.getUTCMinutes(),
				startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() + 1 : -Infinity,
				endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
				endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() + 1 : Infinity,
				currentDate = (new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(),
				today = new Date();
			this.picker.find('.datetimepicker-days thead th:eq(1)')
				.text(dates[this.language].months[month] + ' ' + year);
			if (this.formatViewType == "time") {
				var formatted = this.getFormattedDate();
				this.picker.find('.datetimepicker-hours thead th:eq(1)').text(formatted);
				this.picker.find('.datetimepicker-minutes thead th:eq(1)').text(formatted);
			} else {
				this.picker.find('.datetimepicker-hours thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
				this.picker.find('.datetimepicker-minutes thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
			}
			this.picker.find('tfoot th.today')
				.text(dates[this.language].today)
				.toggle(this.todayBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			/*var prevMonth = UTCDate(year, month, 0,0,0,0,0);
			 prevMonth.setUTCDate(prevMonth.getDate() - (prevMonth.getUTCDay() - this.weekStart + 7)%7);*/
			var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth) {
				if (prevMonth.getUTCDay() == this.weekStart) {
					html.push('<tr>');
				}
				clsName = '';
				if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) {
					clsName += ' old';
				} else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) {
					clsName += ' new';
				}
				// Compare internal UTC date with local today, not UTC today
				if (this.todayHighlight &&
					prevMonth.getUTCFullYear() == today.getFullYear() &&
					prevMonth.getUTCMonth() == today.getMonth() &&
					prevMonth.getUTCDate() == today.getDate()) {
					clsName += ' today';
				}
				if (prevMonth.valueOf() == currentDate) {
					clsName += ' active';
				}
				if ((prevMonth.valueOf() + 86400000) <= this.startDate || prevMonth.valueOf() > this.endDate ||
					$.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) {
					clsName += ' disabled';
				}
				html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() == this.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
			}
			this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

			html = [];
			var txt = '', meridian = '', meridianOld = '';
			var hoursDisabled = this.hoursDisabled || [];
			for (var i = 0; i < 24; i++) {
				if (hoursDisabled.indexOf(i) !== -1) continue;
				var actual = UTCDate(year, month, dayMonth, i);
				clsName = '';
				// We want the previous hour for the startDate
				if ((actual.valueOf() + 3600000) <= this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (hours == i) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="hour"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (i % 12 ? i % 12 : 12);
					html.push('<span class="hour' + clsName + ' hour_' + (i < 12 ? 'am' : 'pm') + '">' + txt + '</span>');
					if (i == 23) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					html.push('<span class="hour' + clsName + '">' + txt + '</span>');
				}
			}
			this.picker.find('.datetimepicker-hours td').html(html.join(''));

			html = [];
			txt = '', meridian = '', meridianOld = '';
			var minutesDisabled = this.minutesDisabled || [];
			for (var i = 0; i < 60; i += this.minuteStep) {
				if (minutesDisabled.indexOf(i) !== -1) continue;
				var actual = UTCDate(year, month, dayMonth, hours, i, 0);
				clsName = '';
				if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="minute"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (hours % 12 ? hours % 12 : 12);
					//html.push('<span class="minute'+clsName+' minute_'+(hours<12?'am':'pm')+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');
					if (i == 59) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					//html.push('<span class="hour'+clsName+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
				}
			}
			this.picker.find('.datetimepicker-minutes td').html(html.join(''));

			var currentYear = this.date.getUTCFullYear();
			var months = this.picker.find('.datetimepicker-months')
				.find('th:eq(1)')
				.text(year)
				.end()
				.find('span').removeClass('active');
			if (currentYear == year) {
				// getUTCMonths() returns 0 based, and we need to select the next one
				months.eq(this.date.getUTCMonth() + 2).addClass('active');
			}
			if (year < startYear || year > endYear) {
				months.addClass('disabled');
			}
			if (year == startYear) {
				months.slice(0, startMonth + 1).addClass('disabled');
			}
			if (year == endYear) {
				months.slice(endMonth).addClass('disabled');
			}

			html = '';
			year = parseInt(year / 10, 10) * 10;
			var yearCont = this.picker.find('.datetimepicker-years')
				.find('th:eq(1)')
				.text(year + '-' + (year + 9))
				.end()
				.find('td');
			year -= 1;
			for (var i = -1; i < 11; i++) {
				html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
				year += 1;
			}
			yearCont.html(html);
			this.place();
		},

		updateNavArrows: function () {
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				day = d.getUTCDate(),
				hour = d.getUTCHours();
			switch (this.viewMode) {
				case 0:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()
						&& hour <= this.startDate.getUTCHours()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()
						&& hour >= this.endDate.getUTCHours()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 2:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 3:
				case 4:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		mousewheel: function (e) {

			e.preventDefault();
			e.stopPropagation();

			if (this.wheelPause) {
				return;
			}

			this.wheelPause = true;

			var originalEvent = e.originalEvent;

			var delta = originalEvent.wheelDelta;

			var mode = delta > 0 ? 1 : (delta === 0) ? 0 : -1;

			if (this.wheelViewModeNavigationInverseDirection) {
				mode = -mode;
			}

			this.showMode(mode);

			setTimeout($.proxy(function () {

				this.wheelPause = false

			}, this), this.wheelViewModeNavigationDelay);

		},

		click: function (e) {
			e.stopPropagation();
			e.preventDefault();
			var target = $(e.target).closest('span, td, th, legend');
			if (target.is('.' + this.icontype)) {
				target = $(target).parent().closest('span, td, th, legend');
			}
			if (target.length == 1) {
				if (target.is('.disabled')) {
					this.element.trigger({
						type:      'outOfRange',
						date:      this.viewDate,
						startDate: this.startDate,
						endDate:   this.endDate
					});
					return;
				}
				switch (target[0].nodeName.toLowerCase()) {
					case 'th':
						switch (target[0].className) {
							case 'switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
								switch (this.viewMode) {
									case 0:
										this.viewDate = this.moveHour(this.viewDate, dir);
										break;
									case 1:
										this.viewDate = this.moveDate(this.viewDate, dir);
										break;
									case 2:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										break;
									case 3:
									case 4:
										this.viewDate = this.moveYear(this.viewDate, dir);
										break;
								}
								this.fill();
								this.element.trigger({
									type:      target[0].className + ':' + this.convertViewModeText(this.viewMode),
									date:      this.viewDate,
									startDate: this.startDate,
									endDate:   this.endDate
								});
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);

								// Respect startDate and endDate.
								if (date < this.startDate) date = this.startDate;
								else if (date > this.endDate) date = this.endDate;

								this.viewMode = this.startViewMode;
								this.showMode(0);
								this._setDate(date);
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')) {
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								day = this.viewDate.getUTCDate(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();

							if (target.is('.month')) {
								this.viewDate.setUTCDate(1);
								month = target.parent().find('span').index(target);
								day = this.viewDate.getUTCDate();
								this.viewDate.setUTCMonth(month);
								this.element.trigger({
									type: 'changeMonth',
									date: this.viewDate
								});
								if (this.viewSelect >= 3) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.year')) {
								this.viewDate.setUTCDate(1);
								year = parseInt(target.text(), 10) || 0;
								this.viewDate.setUTCFullYear(year);
								this.element.trigger({
									type: 'changeYear',
									date: this.viewDate
								});
								if (this.viewSelect >= 4) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.hour')) {
								hours = parseInt(target.text(), 10) || 0;
								if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {
									if (hours == 12 && target.hasClass('hour_am')) {
										hours = 0;
									} else if (hours != 12 && target.hasClass('hour_pm')) {
										hours += 12;
									}
								}
								this.viewDate.setUTCHours(hours);
								this.element.trigger({
									type: 'changeHour',
									date: this.viewDate
								});
								if (this.viewSelect >= 1) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.minute')) {
								minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
								this.viewDate.setUTCMinutes(minutes);
								this.element.trigger({
									type: 'changeMinute',
									date: this.viewDate
								});
								if (this.viewSelect >= 0) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							}
							if (this.viewMode != 0) {
								var oldViewMode = this.viewMode;
								this.showMode(-1);
								this.fill();
								if (oldViewMode == this.viewMode && this.autoclose) {
									this.hide();
								}
							} else {
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
							}
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')) {
							var day = parseInt(target.text(), 10) || 1;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();
							if (target.is('.old')) {
								if (month === 0) {
									month = 11;
									year -= 1;
								} else {
									month -= 1;
								}
							} else if (target.is('.new')) {
								if (month == 11) {
									month = 0;
									year += 1;
								} else {
									month += 1;
								}
							}
							this.viewDate.setUTCFullYear(year);
							this.viewDate.setUTCMonth(month, day);
							this.element.trigger({
								type: 'changeDay',
								date: this.viewDate
							});
							if (this.viewSelect >= 2) {
								this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
							}
						}
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
						break;
				}
			}
		},

		_setDate: function (date, which) {
			if (!which || which == 'date')
				this.date = date;
			if (!which || which == 'view')
				this.viewDate = date;
			this.fill();
			this.setValue();
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element) {
				element.change();
				if (this.autoclose && (!which || which == 'date')) {
					//this.hide();
				}
			}
			this.element.trigger({
				type: 'changeDate',
				date: this.date
			});
		},

		moveMinute: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCMinutes(new_date.getUTCMinutes() + (dir * this.minuteStep));
			return new_date;
		},

		moveHour: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCHours(new_date.getUTCHours() + dir);
			return new_date;
		},

		moveDate: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCDate(new_date.getUTCDate() + dir);
			return new_date;
		},

		moveMonth: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag == 1) {
				test = dir == -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function () {
					return new_date.getUTCMonth() == month;
				}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function () {
					return new_date.getUTCMonth() != new_month;
				};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			} else {
				// For magnitudes >1, move one month at a time...
				for (var i = 0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function () {
					return new_month != new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()) {
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function (date, dir) {
			return this.moveMonth(date, dir * 12);
		},

		dateWithinRange: function (date) {
			return date >= this.startDate && date <= this.endDate;
		},

		keydown: function (e) {
			if (this.picker.is(':not(:visible)')) {
				if (e.keyCode == 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, day, month,
				newDate, newViewDate;
			switch (e.keyCode) {
				case 27: // escape
					this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 37 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir);
						newViewDate = this.moveDate(this.viewDate, dir);
					} else if (viewMode == 1) {
						newDate = this.moveHour(this.date, dir);
						newViewDate = this.moveHour(this.viewDate, dir);
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir);
						newViewDate = this.moveMinute(this.viewDate, dir);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 38 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir * 7);
						newViewDate = this.moveDate(this.viewDate, dir * 7);
					} else if (viewMode == 1) {
						if (this.showMeridian) {
							newDate = this.moveHour(this.date, dir * 6);
							newViewDate = this.moveHour(this.viewDate, dir * 6);
						} else {
							newDate = this.moveHour(this.date, dir * 4);
							newViewDate = this.moveHour(this.viewDate, dir * 4);
						}
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir * 4);
						newViewDate = this.moveMinute(this.viewDate, dir * 4);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 13: // enter
					if (this.viewMode != 0) {
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
					} else {
						this.fill();
						if (this.autoclose) {
							this.hide();
						}
					}
					e.preventDefault();
					break;
				case 9: // tab
					this.hide();
					break;
			}
			if (dateChanged) {
				var element;
				if (this.isInput) {
					element = this.element;
				} else if (this.component) {
					element = this.element.find('input');
				}
				if (element) {
					element.change();
				}
				this.element.trigger({
					type: 'changeDate',
					date: this.date
				});
			}
		},

		showMode: function (dir) {
			if (dir) {
				var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
				if (newViewMode >= this.minView && newViewMode <= this.maxView) {
					this.element.trigger({
						type:        'changeMode',
						date:        this.viewDate,
						oldViewMode: this.viewMode,
						newViewMode: newViewMode
					});

					this.viewMode = newViewMode;
				}
			}
			/*
			 vitalets: fixing bug of very special conditions:
			 jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.
			 Method show() does not set display css correctly and datetimepicker is not shown.
			 Changed to .css('display', 'block') solve the problem.
			 See https://github.com/vitalets/x-editable/issues/37

			 In jquery 1.7.2+ everything works fine.
			 */
			//this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
			this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();
		},

		reset: function (e) {
			this._setDate(null, 'date');
		},

		convertViewModeText:  function (viewMode) {
			switch (viewMode) {
				case 4:
					return 'decade';
				case 3:
					return 'year';
				case 2:
					return 'month';
				case 1:
					return 'day';
				case 0:
					return 'hour';
			}
		}
	};

	var old = $.fn.datetimepicker;
	$.fn.datetimepicker = function (option) {
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return;
		this.each(function () {
			var $this = $(this),
				data = $this.data('datetimepicker'),
				options = typeof option == 'object' && option;
			if (!data) {
				$this.data('datetimepicker', (data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options))));
			}
			if (typeof option == 'string' && typeof data[option] == 'function') {
				internal_return = data[option].apply(data, args);
				if (internal_return !== undefined) {
					return false;
				}
			}
		});
		if (internal_return !== undefined)
			return internal_return;
		else
			return this;
	};

	$.fn.datetimepicker.defaults = {
	};
	$.fn.datetimepicker.Constructor = Datetimepicker;
	var dates = $.fn.datetimepicker.dates = {
		en: {
			days:        ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort:   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin:     ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months:      ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			meridiem:    ["am", "pm"],
			suffix:      ["st", "nd", "rd", "th"],
			today:       "Today"
		}
	};

	var DPGlobal = {
		modes:            [
			{
				clsName: 'minutes',
				navFnc:  'Hours',
				navStep: 1
			},
			{
				clsName: 'hours',
				navFnc:  'Date',
				navStep: 1
			},
			{
				clsName: 'days',
				navFnc:  'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc:  'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc:  'FullYear',
				navStep: 10
			}
		],
		isLeapYear:       function (year) {
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
		},
		getDaysInMonth:   function (year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
		},
		getDefaultFormat: function (type, field) {
			if (type == "standard") {
				if (field == 'input')
					return 'yyyy-mm-dd hh:ii';
				else
					return 'yyyy-mm-dd hh:ii:ss';
			} else if (type == "php") {
				if (field == 'input')
					return 'Y-m-d H:i';
				else
					return 'Y-m-d H:i:s';
			} else {
				throw new Error("Invalid format type.");
			}
		},
		validParts:       function (type) {
			if (type == "standard") {
				return /hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;
			} else if (type == "php") {
				return /[dDjlNwzFmMnStyYaABgGhHis]/g;
			} else {
				throw new Error("Invalid format type.");
			}
		},
		nonpunctuation:   /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,
		parseFormat:      function (format, type) {
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts(type), '\0').split('\0'),
				parts = format.match(this.validParts(type));
			if (!separators || !separators.length || !parts || parts.length == 0) {
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate:        function (date, format, language, type) {
			if (date instanceof Date) {
				var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
				dateUTC.setMilliseconds(0);
				return dateUTC;
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);
			}
			if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
				var part_re = /([-+]\d+)([dmwy])/,
					parts = date.match(/([-+]\d+)([dmwy])/g),
					part, dir;
				date = new Date();
				for (var i = 0; i < parts.length; i++) {
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch (part[2]) {
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);
			}
			var parts = date && date.toString().match(this.nonpunctuation) || [],
				date = new Date(0, 0, 0, 0, 0, 0, 0),
				parsed = {},
				setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P'],
				setters_map = {
					hh:   function (d, v) {
						return d.setUTCHours(v);
					},
					h:    function (d, v) {
						return d.setUTCHours(v);
					},
					HH:   function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					H:    function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					ii:   function (d, v) {
						return d.setUTCMinutes(v);
					},
					i:    function (d, v) {
						return d.setUTCMinutes(v);
					},
					ss:   function (d, v) {
						return d.setUTCSeconds(v);
					},
					s:    function (d, v) {
						return d.setUTCSeconds(v);
					},
					yyyy: function (d, v) {
						return d.setUTCFullYear(v);
					},
					yy:   function (d, v) {
						return d.setUTCFullYear(2000 + v);
					},
					m:    function (d, v) {
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() != v)
							if (isNaN(d.getUTCMonth()))
								return d;
							else
								d.setUTCDate(d.getUTCDate() - 1);
						return d;
					},
					d:    function (d, v) {
						return d.setUTCDate(v);
					},
					p:    function (d, v) {
						return d.setUTCHours(v == 1 ? d.getUTCHours() + 12 : d.getUTCHours());
					}
				},
				val, filtered, part;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			setters_map['P'] = setters_map['p'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
			if (parts.length == format.parts.length) {
				for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10);
					part = format.parts[i];
					if (isNaN(val)) {
						switch (part) {
							case 'MM':
								filtered = $(dates[language].months).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m.toLowerCase() == p.toLowerCase();
								});
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
							case 'p':
							case 'P':
								val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);
								break;
						}
					}
					parsed[part] = val;
				}
				for (var i = 0, s; i < setters_order.length; i++) {
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s]))
						setters_map[s](date, parsed[s])
				}
			}
			return date;
		},
		formatDate:       function (date, format, language, type) {
			if (date == null) {
				return '';
			}
			var val;
			if (type == 'standard') {
				val = {
					// year
					yy:   date.getUTCFullYear().toString().substring(2),
					yyyy: date.getUTCFullYear(),
					// month
					m:    date.getUTCMonth() + 1,
					M:    dates[language].monthsShort[date.getUTCMonth()],
					MM:   dates[language].months[date.getUTCMonth()],
					// day
					d:    date.getUTCDate(),
					D:    dates[language].daysShort[date.getUTCDay()],
					DD:   dates[language].days[date.getUTCDay()],
					p:    (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					// hour
					h:    date.getUTCHours(),
					// minute
					i:    date.getUTCMinutes(),
					// second
					s:    date.getUTCSeconds()
				};

				if (dates[language].meridiem.length == 2) {
					val.H = (val.h % 12 == 0 ? 12 : val.h % 12);
				}
				else {
					val.H = val.h;
				}
				val.HH = (val.H < 10 ? '0' : '') + val.H;
				val.P = val.p.toUpperCase();
				val.hh = (val.h < 10 ? '0' : '') + val.h;
				val.ii = (val.i < 10 ? '0' : '') + val.i;
				val.ss = (val.s < 10 ? '0' : '') + val.s;
				val.dd = (val.d < 10 ? '0' : '') + val.d;
				val.mm = (val.m < 10 ? '0' : '') + val.m;
			} else if (type == 'php') {
				// php format
				val = {
					// year
					y: date.getUTCFullYear().toString().substring(2),
					Y: date.getUTCFullYear(),
					// month
					F: dates[language].months[date.getUTCMonth()],
					M: dates[language].monthsShort[date.getUTCMonth()],
					n: date.getUTCMonth() + 1,
					t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),
					// day
					j: date.getUTCDate(),
					l: dates[language].days[date.getUTCDay()],
					D: dates[language].daysShort[date.getUTCDay()],
					w: date.getUTCDay(), // 0 -> 6
					N: (date.getUTCDay() == 0 ? 7 : date.getUTCDay()),       // 1 -> 7
					S: (date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : ''),
					// hour
					a: (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					g: (date.getUTCHours() % 12 == 0 ? 12 : date.getUTCHours() % 12),
					G: date.getUTCHours(),
					// minute
					i: date.getUTCMinutes(),
					// second
					s: date.getUTCSeconds()
				};
				val.m = (val.n < 10 ? '0' : '') + val.n;
				val.d = (val.j < 10 ? '0' : '') + val.j;
				val.A = val.a.toString().toUpperCase();
				val.h = (val.g < 10 ? '0' : '') + val.g;
				val.H = (val.G < 10 ? '0' : '') + val.G;
				val.i = (val.i < 10 ? '0' : '') + val.i;
				val.s = (val.s < 10 ? '0' : '') + val.s;
			} else {
				throw new Error("Invalid format type.");
			}
			var date = [],
				seps = $.extend([], format.separators);
			for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
				if (seps.length) {
					date.push(seps.shift());
				}
				date.push(val[format.parts[i]]);
			}
			if (seps.length) {
				date.push(seps.shift());
			}
			return date.join('');
		},
		convertViewMode:  function (viewMode) {
			switch (viewMode) {
				case 4:
				case 'decade':
					viewMode = 4;
					break;
				case 3:
				case 'year':
					viewMode = 3;
					break;
				case 2:
				case 'month':
					viewMode = 2;
					break;
				case 1:
				case 'day':
					viewMode = 1;
					break;
				case 0:
				case 'hour':
					viewMode = 0;
					break;
			}

			return viewMode;
		},
		headTemplate:     '<thead>' +
							  '<tr>' +
							  '<th class="prev"><i class="{leftArrow}"/></th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><i class="{rightArrow}"/></th>' +
							  '</tr>' +
			'</thead>',
		headTemplateV3:   '<thead>' +
							  '<tr>' +
							  '<th class="prev"><span class="{iconType} {leftArrow}"></span> </th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><span class="{iconType} {rightArrow}"></span> </th>' +
							  '</tr>' +
			'</thead>',
		contTemplate:     '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate:     '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
	};
	DPGlobal.template = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	DPGlobal.templateV3 = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	$.fn.datetimepicker.DPGlobal = DPGlobal;

	/* DATETIMEPICKER NO CONFLICT
	 * =================== */

	$.fn.datetimepicker.noConflict = function () {
		$.fn.datetimepicker = old;
		return this;
	};

	/* DATETIMEPICKER DATA-API
	 * ================== */

	$(document).on(
		'focus.datetimepicker.data-api click.datetimepicker.data-api',
		'[data-provide="datetimepicker"]',
		function (e) {
			var $this = $(this);
			if ($this.data('datetimepicker')) return;
			e.preventDefault();
			// component click requires us to explicitly show it
			$this.datetimepicker('show');
		}
	);
	$(function () {
		$('[data-provide="datetimepicker-inline"]').datetimepicker();
	});

}(window.jQuery);

/**
 * Simplified Chinese translation for bootstrap-datetimepicker
 * Yuan Cheung <advanimal@gmail.com>
 */
;(function($){
	$.fn.datetimepicker.dates['zh-CN'] = {
			days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"],
			daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
			daysMin:  ["日", "一", "二", "三", "四", "五", "六", "日"],
			months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			today: "今天",
			suffix: [],
			meridiem: ["上午", "下午"]
	};
}(jQuery));

/*!
 * bootstrap-fileinput v4.3.4
 * http://plugins.krajee.com/file-input
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2016, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD 3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
(function (factory) {
    "use strict";
    //noinspection JSUnresolvedVariable
    if (typeof define === 'function' && define.amd) { // jshint ignore:line
        // AMD. Register as an anonymous module.
        define(['jquery'], factory); // jshint ignore:line
    } else { // noinspection JSUnresolvedVariable
        if (typeof module === 'object' && module.exports) { // jshint ignore:line
            // Node/CommonJS
            // noinspection JSUnresolvedVariable
            module.exports = factory(require('jquery')); // jshint ignore:line
        } else {
            // Browser globals
            factory(window.jQuery);
        }
    }
}(function ($) {
    "use strict";

    $.fn.fileinputLocales = {};
    $.fn.fileinputThemes = {};

    var NAMESPACE, MODAL_ID, STYLE_SETTING, OBJECT_PARAMS, DEFAULT_PREVIEW, objUrl, compare, isIE, handler,
        previewCache, getNum, hasFileAPISupport, hasDragDropSupport, hasFileUploadSupport, addCss, tMain1, tMain2,
        tPreview, tFileIcon, tClose, tCaption, tBtnDefault, tBtnLink, tBtnBrowse, tModalMain, tModal, tProgress, tSize,
        tFooter, tActions, tActionDelete, tActionUpload, tActionZoom, tActionDrag, tTagBef, tTagBef1, tTagBef2, tTagAft,
        tGeneric, tHtml, tImage, tText, tVideo, tAudio, tFlash, tObject, tPdf, tOther, defaultFileActionSettings,
        defaultLayoutTemplates, defaultPreviewTemplates, defaultPreviewZoomSettings, defaultPreviewTypes, getElement,
        defaultPreviewSettings, defaultFileTypeSettings, isEmpty, isArray, ifSet, uniqId, htmlEncode, replaceTags,
        cleanMemory, findFileName, checkFullScreen, toggleFullScreen, moveArray, FileInput;

    NAMESPACE = '.fileinput';
    MODAL_ID = 'kvFileinputModal';
    STYLE_SETTING = 'style="width:{width};height:{height};"';
    OBJECT_PARAMS = '<param name="controller" value="true" />\n' +
        '<param name="allowFullScreen" value="true" />\n' +
        '<param name="allowScriptAccess" value="always" />\n' +
        '<param name="autoPlay" value="false" />\n' +
        '<param name="autoStart" value="false" />\n' +
        '<param name="quality" value="high" />\n';
    DEFAULT_PREVIEW = '<div class="file-preview-other">\n' +
        '<span class="{previewFileIconClass}">{previewFileIcon}</span>\n' +
        '</div>';
    //noinspection JSUnresolvedVariable
    objUrl = window.URL || window.webkitURL;
    compare = function (input, str, exact) {
        return input !== undefined && (exact ? input === str : input.match(str));
    };
    isIE = function (ver) {
        // check for IE versions < 11
        if (navigator.appName !== 'Microsoft Internet Explorer') {
            return false;
        }
        if (ver === 10) {
            return new RegExp('msie\\s' + ver, 'i').test(navigator.userAgent);
        }
        var div = document.createElement("div"), status;
        div.innerHTML = "<!--[if IE " + ver + "]> <i></i> <![endif]-->";
        status = div.getElementsByTagName("i").length;
        document.body.appendChild(div);
        div.parentNode.removeChild(div);
        return status;
    };
    handler = function ($el, event, callback, skipNS) {
        var ev = skipNS ? event : event.split(' ').join(NAMESPACE + ' ') + NAMESPACE;
        $el.off(ev).on(ev, callback);
    };
    previewCache = {
        data: {},
        init: function (obj) {
            var content = obj.initialPreview, id = obj.id;
            if (content.length > 0 && !isArray(content)) {
                content = content.split(obj.initialPreviewDelimiter);
            }
            previewCache.data[id] = {
                content: content,
                config: obj.initialPreviewConfig,
                tags: obj.initialPreviewThumbTags,
                delimiter: obj.initialPreviewDelimiter,
                previewFileType: obj.initialPreviewFileType,
                previewAsData: obj.initialPreviewAsData,
                template: obj.previewGenericTemplate,
                showZoom: obj.fileActionSettings.showZoom,
                showDrag: obj.fileActionSettings.showDrag,
                getSize: function (size) {
                    return obj._getSize(size);
                },
                parseTemplate: function (cat, data, fname, ftype, pId, ftr, ind) {
                    var fc = ' file-preview-initial';
                    return obj._generatePreviewTemplate(cat, data, fname, ftype, pId, false, null, fc, ftr, ind);
                },
                msg: function (n) {
                    return obj._getMsgSelected(n);
                },
                initId: obj.previewInitId,
                footer: obj._getLayoutTemplate('footer').replace(/\{progress}/g, obj._renderThumbProgress()),
                isDelete: obj.initialPreviewShowDelete,
                caption: obj.initialCaption,
                actions: function (showUpload, showDelete, showZoom, showDrag, disabled, url, key) {
                    return obj._renderFileActions(showUpload, showDelete, showZoom, showDrag, disabled, url, key, true);
                }
            };
        },
        fetch: function (id) {
            return previewCache.data[id].content.filter(function (n) {
                return n !== null;
            });
        },
        count: function (id, all) {
            return !!previewCache.data[id] && !!previewCache.data[id].content ?
                (all ? previewCache.data[id].content.length : previewCache.fetch(id).length) : 0;
        },
        get: function (id, i, isDisabled) {
            var ind = 'init_' + i, data = previewCache.data[id], config = data.config[i], content = data.content[i],
                previewId = data.initId + '-' + ind, out, $tmp, frameClass = ' file-preview-initial', cat, cap, ftr,
                ftype, asData = ifSet('previewAsData', config, data.previewAsData);
            isDisabled = isDisabled === undefined ? true : isDisabled;
            /** @namespace config.frameAttr */
            /** @namespace config.frameClass */
            /** @namespace config.filetype */
            if (!content) {
                return '';
            }
            if (config && config.frameClass) {
                frameClass += ' ' + config.frameClass;
            }
            if (asData) {
                cat = data.previewAsData ? ifSet('type', config, data.previewFileType || 'generic') : 'generic';
                cap = ifSet('caption', config);
                ftr = previewCache.footer(id, i, isDisabled, (config && config.size || null));
                ftype = ifSet('filetype', config, cat);
                out = data.parseTemplate(cat, content, cap, ftype, previewId, ftr, ind, null);
            } else {
                out = data.template
                    .replace(/\{previewId}/g, previewId).replace(/\{frameClass}/g, frameClass)
                    .replace(/\{fileindex}/g, ind).replace(/\{content}/g, data.content[i])
                    .replace(/\{template}/g, ifSet('type', config, data.previewFileType))
                    .replace(/\{footer}/g, previewCache.footer(id, i, isDisabled, (config && config.size || null)));
            }
            if (data.tags.length && data.tags[i]) {
                out = replaceTags(out, data.tags[i]);
            }
            if (!isEmpty(config) && !isEmpty(config.frameAttr)) {
                $tmp = $(document.createElement('div')).html(out);
                $tmp.find('.file-preview-initial').attr(config.frameAttr);
                out = $tmp.html();
                $tmp.remove();
            }
            return out;
        },
        add: function (id, content, config, tags, append) {
            var data = $.extend(true, {}, previewCache.data[id]), index;
            if (!isArray(content)) {
                content = content.split(data.delimiter);
            }
            if (append) {
                index = data.content.push(content) - 1;
                data.config[index] = config;
                data.tags[index] = tags;
            } else {
                index = content.length - 1;
                data.content = content;
                data.config = config;
                data.tags = tags;
            }
            previewCache.data[id] = data;
            return index;
        },
        set: function (id, content, config, tags, append) {
            var data = $.extend(true, {}, previewCache.data[id]), i, chk;
            if (!content || !content.length) {
                return;
            }
            if (!isArray(content)) {
                content = content.split(data.delimiter);
            }
            chk = content.filter(function (n) {
                return n !== null;
            });
            if (!chk.length) {
                return;
            }
            if (data.content === undefined) {
                data.content = [];
            }
            if (data.config === undefined) {
                data.config = [];
            }
            if (data.tags === undefined) {
                data.tags = [];
            }
            if (append) {
                for (i = 0; i < content.length; i++) {
                    if (content[i]) {
                        data.content.push(content[i]);
                    }
                }
                for (i = 0; i < config.length; i++) {
                    if (config[i]) {
                        data.config.push(config[i]);
                    }
                }
                for (i = 0; i < tags.length; i++) {
                    if (tags[i]) {
                        data.tags.push(tags[i]);
                    }
                }
            } else {
                data.content = content;
                data.config = config;
                data.tags = tags;
            }
            previewCache.data[id] = data;
        },
        unset: function (id, index) {
            var chk = previewCache.count(id);
            if (!chk) {
                return;
            }
            if (chk === 1) {
                previewCache.data[id].content = [];
                previewCache.data[id].config = [];
                previewCache.data[id].tags = [];
                return;
            }
            previewCache.data[id].content[index] = null;
            previewCache.data[id].config[index] = null;
            previewCache.data[id].tags[index] = null;
        },
        out: function (id) {
            var html = '', data = previewCache.data[id], caption, len = previewCache.count(id, true);
            if (len === 0) {
                return {content: '', caption: ''};
            }
            for (var i = 0; i < len; i++) {
                html += previewCache.get(id, i);
            }
            caption = data.msg(previewCache.count(id));
            return {content: '<div class="file-initial-thumbs">' + html + '</div>', caption: caption};
        },
        footer: function (id, i, isDisabled, size) {
            var data = previewCache.data[id];
            isDisabled = isDisabled === undefined ? true : isDisabled;
            if (data.config.length === 0 || isEmpty(data.config[i])) {
                return '';
            }
            var config = data.config[i], caption = ifSet('caption', config), width = ifSet('width', config, 'auto'),
                url = ifSet('url', config, false), key = ifSet('key', config, null),
                showDel = ifSet('showDelete', config, true), showZoom = ifSet('showZoom', config, data.showZoom),
                showDrag = ifSet('showDrag', config, data.showDrag), disabled = (url === false) && isDisabled,
                actions = data.isDelete ? data.actions(false, showDel, showZoom, showDrag, disabled, url, key) : '',
                footer = data.footer.replace(/\{actions}/g, actions);
            return footer.replace(/\{caption}/g, caption).replace(/\{size}/g, data.getSize(size))
                .replace(/\{width}/g, width).replace(/\{indicator}/g, '').replace(/\{indicatorTitle}/g, '');
        }
    };
    getNum = function (num, def) {
        def = def || 0;
        if (typeof num === "number") {
            return num;
        }
        if (typeof num === "string") {
            num = parseFloat(num);
        }
        return isNaN(num) ? def : num;
    };
    hasFileAPISupport = function () {
        return !!(window.File && window.FileReader);
    };
    hasDragDropSupport = function () {
        var div = document.createElement('div');
        /** @namespace div.draggable */
        /** @namespace div.ondragstart */
        /** @namespace div.ondrop */
        return !isIE(9) && (div.draggable !== undefined || (div.ondragstart !== undefined && div.ondrop !== undefined));
    };
    hasFileUploadSupport = function () {
        return hasFileAPISupport() && window.FormData;
    };
    addCss = function ($el, css) {
        $el.removeClass(css).addClass(css);
    };
    defaultFileActionSettings = {
        showRemove: true,
        showUpload: true,
        showZoom: true,
        showDrag: true,
        removeIcon: '<i class="glyphicon glyphicon-trash text-danger"></i>',
        removeClass: 'btn btn-xs btn-default',
        removeTitle: 'Remove file',
        uploadIcon: '<i class="glyphicon glyphicon-upload text-info"></i>',
        uploadClass: 'btn btn-xs btn-default',
        uploadTitle: 'Upload file',
        zoomIcon: '<i class="glyphicon glyphicon-zoom-in"></i>',
        zoomClass: 'btn btn-xs btn-default',
        zoomTitle: 'View Details',
        dragIcon: '<i class="glyphicon glyphicon-menu-hamburger"></i>',
        dragClass: 'text-info',
        dragTitle: 'Move / Rearrange',
        dragSettings: {},
        indicatorNew: '<i class="glyphicon glyphicon-hand-down text-warning"></i>',
        indicatorSuccess: '<i class="glyphicon glyphicon-ok-sign text-success"></i>',
        indicatorError: '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',
        indicatorLoading: '<i class="glyphicon glyphicon-hand-up text-muted"></i>',
        indicatorNewTitle: 'Not uploaded yet',
        indicatorSuccessTitle: 'Uploaded',
        indicatorErrorTitle: 'Upload Error',
        indicatorLoadingTitle: 'Uploading ...'
    };
    tMain1 = '{preview}\n' +
        '<div class="kv-upload-progress hide"></div>\n' +
        '<div class="input-group {class}">\n' +
        '   {caption}\n' +
        '   <div class="input-group-btn">\n' +
        '       {remove}\n' +
        '       {cancel}\n' +
        '       {upload}\n' +
        '       {browse}\n' +
        '   </div>\n' +
        '</div>';
    tMain2 = '{preview}\n<div class="kv-upload-progress hide"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n';
    tPreview = '<div class="file-preview {class}">\n' +
        '    {close}' +
        '    <div class="{dropClass}">\n' +
        '    <div class="file-preview-thumbnails">\n' +
        '    </div>\n' +
        '    <div class="clearfix"></div>' +
        '    <div class="file-preview-status text-center text-success"></div>\n' +
        '    <div class="kv-fileinput-error"></div>\n' +
        '    </div>\n' +
        '</div>';
    tClose = '<div class="close fileinput-remove">&times;</div>\n';
    tFileIcon = '<i class="glyphicon glyphicon-file kv-caption-icon"></i>';
    tCaption = '<div tabindex="500" class="form-control file-caption {class}">\n' +
        '   <div class="file-caption-name"></div>\n' +
        '</div>\n';
    //noinspection HtmlUnknownAttribute
    tBtnDefault = '<button type="{type}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</button>';
    tBtnLink = '<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>';
    tBtnBrowse = '<div tabindex="500" class="{css}" {status}>{icon} {label}</div>';
    tModalMain = '<div id="' + MODAL_ID + '" class="file-zoom-dialog modal fade" tabindex="-1" aria-labelledby="' +
        MODAL_ID + 'Label"></div>';
    tModal = '<div class="modal-dialog modal-lg" role="document">\n' +
        '  <div class="modal-content">\n' +
        '    <div class="modal-header">\n' +
        '      <div class="kv-zoom-actions pull-right">{toggleheader}{fullscreen}{borderless}{close}</div>\n' +
        '      <h3 class="modal-title">{heading} <small><span class="kv-zoom-title"></span></small></h3>\n' +
        '    </div>\n' +
        '    <div class="modal-body">\n' +
        '      <div class="floating-buttons"></div>\n' +
        '      <div class="kv-zoom-body file-zoom-content"></div>\n' + '{prev} {next}\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n';
    tProgress = '<div class="progress">\n' +
        '    <div class="{class}" role="progressbar"' +
        ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' +
        '        {percent}%\n' +
        '     </div>\n' +
        '</div>';
    tSize = ' <br><samp>({sizeText})</samp>';
    tFooter = '<div class="file-thumbnail-footer">\n' +
        '    <div class="file-footer-caption" title="{caption}">{caption}{size}</div>\n' +
        '    {progress} {actions}\n' +
        '</div>';
    tActions = '<div class="file-actions">\n' +
        '    <div class="file-footer-buttons">\n' +
        '        {upload} {delete} {zoom} {other}' +
        '    </div>\n' +
        '    {drag}\n' +
        '    <div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>\n' +
        '    <div class="clearfix"></div>\n' +
        '</div>';
    tActionDelete = '<button type="button" class="kv-file-remove {removeClass}" ' +
        'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';
    tActionUpload = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' +
        '{uploadIcon}</button>';
    tActionZoom = '<button type="button" class="kv-file-zoom {zoomClass}" title="{zoomTitle}">{zoomIcon}</button>';
    tActionDrag = '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>';
    tTagBef = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' data-template="{template}"';
    tTagBef1 = tTagBef + '><div class="kv-file-content">\n';
    tTagBef2 = tTagBef + ' title="{caption}" ' + STYLE_SETTING + '><div class="kv-file-content">\n';
    tTagAft = '</div>{footer}\n</div>\n';
    tGeneric = '{content}\n';
    tHtml = '<div class="kv-preview-data file-preview-html" title="{caption}" ' + STYLE_SETTING + '>{data}</div>\n';
    tImage = '<img src="{data}" class="kv-preview-data file-preview-image" title="{caption}" alt="{caption}" ' +
        STYLE_SETTING + '>\n';
    tText = '<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly ' + STYLE_SETTING +
        '>{data}</textarea>\n';
    tVideo = '<video class="kv-preview-data" width="{width}" height="{height}" controls>\n' +
        '<source src="{data}" type="{type}">\n' + DEFAULT_PREVIEW + '\n</video>\n';
    tAudio = '<audio class="kv-preview-data" controls>\n<source src="' + '{data}' + '" type="{type}">\n' +
        DEFAULT_PREVIEW + '\n</audio>\n';
    tFlash = '<object class="kv-preview-data file-object" type="application/x-shockwave-flash" ' +
        'width="{width}" height="{height}" data="{data}">\n' + OBJECT_PARAMS + ' ' + DEFAULT_PREVIEW + '\n</object>\n';
    tObject = '<object class="kv-preview-data file-object" data="{data}" type="{type}" width="{width}" height="{height}">\n' +
        '<param name="movie" value="{caption}" />\n' + OBJECT_PARAMS + ' ' + DEFAULT_PREVIEW + '\n</object>\n';
    tPdf = '<embed class="kv-preview-data" src="{data}" width="{width}" height="{height}" type="application/pdf">\n';
    tOther = '<div class="kv-preview-data file-preview-other-frame">\n' + DEFAULT_PREVIEW + '\n</div>\n';
    defaultLayoutTemplates = {
        main1: tMain1,
        main2: tMain2,
        preview: tPreview,
        close: tClose,
        fileIcon: tFileIcon,
        caption: tCaption,
        modalMain: tModalMain,
        modal: tModal,
        progress: tProgress,
        size: tSize,
        footer: tFooter,
        actions: tActions,
        actionDelete: tActionDelete,
        actionUpload: tActionUpload,
        actionZoom: tActionZoom,
        actionDrag: tActionDrag,
        btnDefault: tBtnDefault,
        btnLink: tBtnLink,
        btnBrowse: tBtnBrowse
    };
    defaultPreviewTemplates = {
        generic: tTagBef1 + tGeneric + tTagAft,
        html: tTagBef1 + tHtml + tTagAft,
        image: tTagBef1 + tImage + tTagAft,
        text: tTagBef1 + tText + tTagAft,
        video: tTagBef2 + tVideo + tTagAft,
        audio: tTagBef2 + tAudio + tTagAft,
        flash: tTagBef2 + tFlash + tTagAft,
        object: tTagBef2 + tObject + tTagAft,
        pdf: tTagBef2 + tPdf + tTagAft,
        other: tTagBef2 + tOther + tTagAft
    };
    defaultPreviewTypes = ['image', 'html', 'text', 'video', 'audio', 'flash', 'pdf', 'object'];
    defaultPreviewSettings = {
        image: {width: "auto", height: "160px"},
        html: {width: "213px", height: "160px"},
        text: {width: "213px", height: "160px"},
        video: {width: "213px", height: "160px"},
        audio: {width: "213px", height: "80px"},
        flash: {width: "213px", height: "160px"},
        object: {width: "160px", height: "160px"},
        pdf: {width: "160px", height: "160px"},
        other: {width: "160px", height: "160px"}
    };
    defaultPreviewZoomSettings = {
        image: {width: "100%", height: "100%"},
        html: {width: "100%", height: "100%", 'min-height': "480px"},
        text: {width: "100%", height: "100%", 'min-height': "480px"},
        video: {width: "auto", height: "100%", 'max-width': "100%"},
        audio: {width: "100%", height: "30px"},
        flash: {width: "auto", height: "480px"},
        object: {width: "auto", height: "100%", 'min-height': "480px"},
        pdf: {width: "100%", height: "100%", 'min-height': "480px"},
        other: {width: "auto", height: "100%", 'min-height': "480px"}
    };
    defaultFileTypeSettings = {
        image: function (vType, vName) {
            return compare(vType, 'image.*') || compare(vName, /\.(gif|png|jpe?g)$/i);
        },
        html: function (vType, vName) {
            return compare(vType, 'text/html') || compare(vName, /\.(htm|html)$/i);
        },
        text: function (vType, vName) {
            return compare(vType, 'text.*') || compare(vName, /\.(xml|javascript)$/i) ||
                compare(vName, /\.(txt|md|csv|nfo|ini|json|php|js|css)$/i);
        },
        video: function (vType, vName) {
            return compare(vType, 'video.*') && (compare(vType, /(ogg|mp4|mp?g|webm|3gp)$/i) ||
                compare(vName, /\.(og?|mp4|webm|mp?g|3gp)$/i));
        },
        audio: function (vType, vName) {
            return compare(vType, 'audio.*') && (compare(vName, /(ogg|mp3|mp?g|wav)$/i) ||
                compare(vName, /\.(og?|mp3|mp?g|wav)$/i));
        },
        flash: function (vType, vName) {
            return compare(vType, 'application/x-shockwave-flash', true) || compare(vName, /\.(swf)$/i);
        },
        pdf: function (vType, vName) {
            return compare(vType, 'application/pdf', true) || compare(vName, /\.(pdf)$/i);
        },
        object: function () {
            return true;
        },
        other: function () {
            return true;
        }
    };
    isEmpty = function (value, trim) {
        return value === undefined || value === null || value.length === 0 || (trim && $.trim(value) === '');
    };
    isArray = function (a) {
        return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';
    };
    ifSet = function (needle, haystack, def) {
        def = def || '';
        return (haystack && typeof haystack === 'object' && needle in haystack) ? haystack[needle] : def;
    };
    getElement = function (options, param, value) {
        return (isEmpty(options) || isEmpty(options[param])) ? value : $(options[param]);
    };
    uniqId = function () {
        return Math.round(new Date().getTime() + (Math.random() * 100));
    };
    htmlEncode = function (str) {
        return str.replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    };
    replaceTags = function (str, tags) {
        var out = str;
        if (!tags) {
            return out;
        }
        $.each(tags, function (key, value) {
            if (typeof value === "function") {
                value = value();
            }
            out = out.split(key).join(value);
        });
        return out;
    };
    cleanMemory = function ($thumb) {
        var data = $thumb.is('img') ? $thumb.attr('src') : $thumb.find('source').attr('src');
        /** @namespace objUrl.revokeObjectURL */
        objUrl.revokeObjectURL(data);
    };
    findFileName = function (filePath) {
        var sepIndex = filePath.lastIndexOf('/');
        if (sepIndex === -1) {
            sepIndex = filePath.lastIndexOf('\\');
        }
        return filePath.split(filePath.substring(sepIndex, sepIndex + 1)).pop();
    };
    checkFullScreen = function () {
        //noinspection JSUnresolvedVariable
        return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement ||
            document.msFullscreenElement;
    };
    toggleFullScreen = function (maximize) {
        if (maximize && !checkFullScreen()) {
            /** @namespace document.documentElement.requestFullscreen */
            /** @namespace document.documentElement.msRequestFullscreen */
            /** @namespace document.documentElement.mozRequestFullScreen */
            /** @namespace document.documentElement.webkitRequestFullscreen */
            /** @namespace Element.ALLOW_KEYBOARD_INPUT */
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
                document.documentElement.msRequestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) {
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
                document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        } else {
            /** @namespace document.exitFullscreen */
            /** @namespace document.msExitFullscreen */
            /** @namespace document.mozCancelFullScreen */
            /** @namespace document.webkitExitFullscreen */
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
        }
    };
    moveArray = function (arr, oldIndex, newIndex) {
        if (newIndex >= arr.length) {
            var k = newIndex - arr.length;
            while ((k--) + 1) {
                arr.push(undefined);
            }
        }
        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
        return arr;
    };
    FileInput = function (element, options) {
        var self = this;
        self.$element = $(element);
        if (!self._validate()) {
            return;
        }
        self.isPreviewable = hasFileAPISupport();
        self.isIE9 = isIE(9);
        self.isIE10 = isIE(10);
        if (self.isPreviewable || self.isIE9) {
            self._init(options);
            self._listen();
        } else {
            self.$element.removeClass('file-loading');
        }
    };
    FileInput.prototype = {
        constructor: FileInput,
        _init: function (options) {
            var self = this, $el = self.$element, t;
            $.each(options, function (key, value) {
                switch (key) {
                    case 'minFileCount':
                    case 'maxFileCount':
                    case 'maxFileSize':
                        self[key] = getNum(value);
                        break;
                    default:
                        self[key] = value;
                        break;
                }
            });
            self.fileInputCleared = false;
            self.fileBatchCompleted = true;
            if (!self.isPreviewable) {
                self.showPreview = false;
            }
            self.uploadFileAttr = !isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';
            self.reader = null;
            self.formdata = {};
            self.clearStack();
            self.uploadCount = 0;
            self.uploadStatus = {};
            self.uploadLog = [];
            self.uploadAsyncCount = 0;
            self.loadedImages = [];
            self.totalImagesCount = 0;
            self.ajaxRequests = [];
            self.isError = false;
            self.ajaxAborted = false;
            self.cancelling = false;
            t = self._getLayoutTemplate('progress');
            self.progressTemplate = t.replace('{class}', self.progressClass);
            self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);
            self.progressErrorTemplate = t.replace('{class}', self.progressErrorClass);
            self.dropZoneEnabled = hasDragDropSupport() && self.dropZoneEnabled;
            self.isDisabled = self.$element.attr('disabled') || self.$element.attr('readonly');
            self.isUploadable = hasFileUploadSupport() && !isEmpty(self.uploadUrl);
            self.isClickable = self.browseOnZoneClick && self.showPreview &&
                (self.isUploadable && self.dropZoneEnabled || !isEmpty(self.defaultPreviewContent));
            self.slug = typeof options.slugCallback === "function" ? options.slugCallback : self._slugDefault;
            self.mainTemplate = self.showCaption ? self._getLayoutTemplate('main1') : self._getLayoutTemplate('main2');
            self.captionTemplate = self._getLayoutTemplate('caption');
            self.previewGenericTemplate = self._getPreviewTemplate('generic');
            if (self.resizeImage && (self.maxImageWidth || self.maxImageHeight)) {
                self.imageCanvas = document.createElement('canvas');
                self.imageCanvasContext = self.imageCanvas.getContext('2d');
            }
            if (isEmpty(self.$element.attr('id'))) {
                self.$element.attr('id', uniqId());
            }
            if (self.$container === undefined) {
                self.$container = self._createContainer();
            } else {
                self._refreshContainer();
            }
            self.$dropZone = self.$container.find('.file-drop-zone');
            self.$progress = self.$container.find('.kv-upload-progress');
            self.$btnUpload = self.$container.find('.fileinput-upload');
            self.$captionContainer = getElement(options, 'elCaptionContainer', self.$container.find('.file-caption'));
            self.$caption = getElement(options, 'elCaptionText', self.$container.find('.file-caption-name'));
            self.$previewContainer = getElement(options, 'elPreviewContainer', self.$container.find('.file-preview'));
            self.$preview = getElement(options, 'elPreviewImage', self.$container.find('.file-preview-thumbnails'));
            self.$previewStatus = getElement(options, 'elPreviewStatus', self.$container.find('.file-preview-status'));
            self.$errorContainer = getElement(options, 'elErrorContainer',
                self.$previewContainer.find('.kv-fileinput-error'));
            if (!isEmpty(self.msgErrorClass)) {
                addCss(self.$errorContainer, self.msgErrorClass);
            }
            self.$errorContainer.hide();
            self.fileActionSettings = $.extend(true, defaultFileActionSettings, options.fileActionSettings);
            self.previewInitId = "preview-" + uniqId();
            self.id = self.$element.attr('id');
            previewCache.init(self);
            self._initPreview(true);
            self._initPreviewActions();
            self.options = options;
            self._setFileDropZoneTitle();
            self.$element.removeClass('file-loading');
            if (self.$element.attr('disabled')) {
                self.disable();
            }
            self._initZoom();
        },
        _validate: function () {
            var self = this, $exception;
            if (self.$element.attr('type') === 'file') {
                return true;
            }
            $exception = '<div class="help-block alert alert-warning">' +
                '<h4>Invalid Input Type</h4>' +
                'You must set an input <code>type = file</code> for <b>bootstrap-fileinput</b> plugin to initialize.' +
                '</div>';
            self.$element.after($exception);
            return false;
        },
        _errorsExist: function () {
            var self = this, $err;
            if (self.$errorContainer.find('li').length) {
                return true;
            }
            $err = $(document.createElement('div')).html(self.$errorContainer.html());
            $err.find('span.kv-error-close').remove();
            $err.find('ul').remove();
            return $.trim($err.text()).length ? true : false;
        },
        _errorHandler: function (evt, caption) {
            var self = this, err = evt.target.error;
            /** @namespace err.NOT_FOUND_ERR */
            /** @namespace err.SECURITY_ERR */
            /** @namespace err.NOT_READABLE_ERR */
            if (err.code === err.NOT_FOUND_ERR) {
                self._showError(self.msgFileNotFound.replace('{name}', caption));
            } else if (err.code === err.SECURITY_ERR) {
                self._showError(self.msgFileSecured.replace('{name}', caption));
            } else if (err.code === err.NOT_READABLE_ERR) {
                self._showError(self.msgFileNotReadable.replace('{name}', caption));
            } else if (err.code === err.ABORT_ERR) {
                self._showError(self.msgFilePreviewAborted.replace('{name}', caption));
            } else {
                self._showError(self.msgFilePreviewError.replace('{name}', caption));
            }
        },
        _addError: function (msg) {
            var self = this, $error = self.$errorContainer;
            if (msg && $error.length) {
                $error.html(self.errorCloseButton + msg);
                handler($error.find('.kv-error-close'), 'click', function () {
                    $error.fadeOut('slow');
                });
            }
        },
        _resetErrors: function (fade) {
            var self = this, $error = self.$errorContainer;
            self.isError = false;
            self.$container.removeClass('has-error');
            $error.html('');
            if (fade) {
                $error.fadeOut('slow');
            } else {
                $error.hide();
            }
        },
        _showFolderError: function (folders) {
            var self = this, $error = self.$errorContainer, msg;
            if (!folders) {
                return;
            }
            msg = self.msgFoldersNotAllowed.replace(/\{n}/g, folders);
            self._addError(msg);
            addCss(self.$container, 'has-error');
            $error.fadeIn(800);
            self._raise('filefoldererror', [folders, msg]);
        },
        _showUploadError: function (msg, params, event) {
            var self = this, $error = self.$errorContainer, ev = event || 'fileuploaderror', e = params && params.id ?
            '<li data-file-id="' + params.id + '">' + msg + '</li>' : '<li>' + msg + '</li>';
            if ($error.find('ul').length === 0) {
                self._addError('<ul>' + e + '</ul>');
            } else {
                $error.find('ul').append(e);
            }
            $error.fadeIn(800);
            self._raise(ev, [params, msg]);
            self.$container.removeClass('file-input-new');
            addCss(self.$container, 'has-error');
            return true;
        },
        _showError: function (msg, params, event) {
            var self = this, $error = self.$errorContainer, ev = event || 'fileerror';
            params = params || {};
            params.reader = self.reader;
            self._addError(msg);
            $error.fadeIn(800);
            self._raise(ev, [params, msg]);
            if (!self.isUploadable) {
                self._clearFileInput();
            }
            self.$container.removeClass('file-input-new');
            addCss(self.$container, 'has-error');
            self.$btnUpload.attr('disabled', true);
            return true;
        },
        _noFilesError: function (params) {
            var self = this, label = self.minFileCount > 1 ? self.filePlural : self.fileSingle,
                msg = self.msgFilesTooLess.replace('{n}', self.minFileCount).replace('{files}', label),
                $error = self.$errorContainer;
            self._addError(msg);
            self.isError = true;
            self._updateFileDetails(0);
            $error.fadeIn(800);
            self._raise('fileerror', [params, msg]);
            self._clearFileInput();
            addCss(self.$container, 'has-error');
        },
        _parseError: function (jqXHR, errorThrown, fileName) {
            /** @namespace jqXHR.responseJSON */
            var self = this, errMsg = $.trim(errorThrown + ''),
                dot = errMsg.slice(-1) === '.' ? '' : '.',
                text = jqXHR.responseJSON !== undefined && jqXHR.responseJSON.error !== undefined ?
                    jqXHR.responseJSON.error : jqXHR.responseText;
            if (self.cancelling && self.msgUploadAborted) {
                errMsg = self.msgUploadAborted;
            }
            if (self.showAjaxErrorDetails && text) {
                text = $.trim(text.replace(/\n\s*\n/g, '\n'));
                text = text.length > 0 ? '<pre>' + text + '</pre>' : '';
                errMsg += dot + text;
            } else {
                errMsg += dot;
            }
            self.cancelling = false;
            return fileName ? '<b>' + fileName + ': </b>' + errMsg : errMsg;
        },
        _parseFileType: function (file) {
            var self = this, isValid, vType, cat, i;
            for (i = 0; i < defaultPreviewTypes.length; i += 1) {
                cat = defaultPreviewTypes[i];
                isValid = ifSet(cat, self.fileTypeSettings, defaultFileTypeSettings[cat]);
                vType = isValid(file.type, file.name) ? cat : '';
                if (!isEmpty(vType)) {
                    return vType;
                }
            }
            return 'other';
        },
        _parseFilePreviewIcon: function (content, fname) {
            var self = this, proceed, ext, icn = self.previewFileIcon;
            if (fname && fname.indexOf('.') > -1) {
                ext = fname.split('.').pop();
                if (self.previewFileIconSettings && self.previewFileIconSettings[ext]) {
                    icn = self.previewFileIconSettings[ext];
                }
                if (self.previewFileExtSettings) {
                    $.each(self.previewFileExtSettings, function (key, func) {
                        if (self.previewFileIconSettings[key] && func(ext)) {
                            icn = self.previewFileIconSettings[key];
                            return;
                        }
                        proceed = true;
                    });
                }
            }
            if (content.indexOf('{previewFileIcon}') > -1) {
                return content.replace(/\{previewFileIconClass}/g, self.previewFileIconClass).replace(
                    /\{previewFileIcon}/g, icn);
            }
            return content;
        },
        _raise: function (event, params) {
            var self = this, e = $.Event(event);
            if (params !== undefined) {
                self.$element.trigger(e, params);
            } else {
                self.$element.trigger(e);
            }
            if (e.isDefaultPrevented()) {
                return false;
            }
            if (!e.result) {
                return e.result;
            }
            switch (event) {
                // ignore these events
                case 'filebatchuploadcomplete':
                case 'filebatchuploadsuccess':
                case 'fileuploaded':
                case 'fileclear':
                case 'filecleared':
                case 'filereset':
                case 'fileerror':
                case 'filefoldererror':
                case 'fileuploaderror':
                case 'filebatchuploaderror':
                case 'filedeleteerror':
                case 'filecustomerror':
                case 'filesuccessremove':
                    break;
                // receive data response via `filecustomerror` event`
                default:
                    self.ajaxAborted = e.result;
                    break;
            }
            return true;
        },
        _listenFullScreen: function (isFullScreen) {
            var self = this, $modal = self.$modal, $btnFull, $btnBord;
            if (!$modal || !$modal.length) {
                return;
            }
            $btnFull = $modal && $modal.find('.btn-fullscreen');
            $btnBord = $modal && $modal.find('.btn-borderless');
            if (!$btnFull.length || !$btnBord.length) {
                return;
            }
            $btnFull.removeClass('active').attr('aria-pressed', 'false');
            $btnBord.removeClass('active').attr('aria-pressed', 'false');
            if (isFullScreen) {
                $btnFull.addClass('active').attr('aria-pressed', 'true');
            } else {
                $btnBord.addClass('active').attr('aria-pressed', 'true');
            }
            if ($modal.hasClass('file-zoom-fullscreen')) {
                self._maximizeZoomDialog();
            } else {
                if (isFullScreen) {
                    self._maximizeZoomDialog();
                } else {
                    $btnBord.removeClass('active').attr('aria-pressed', 'false');
                }
            }
        },
        _listen: function () {
            var self = this, $el = self.$element, $form = $el.closest('form'), $cont = self.$container;
            handler($el, 'change', $.proxy(self._change, self));
            if (self.showBrowse) {
                handler(self.$btnFile, 'click', $.proxy(self._browse, self));
            }
            handler($form, 'reset', $.proxy(self.reset, self));
            handler($cont.find('.fileinput-remove:not([disabled])'), 'click', $.proxy(self.clear, self));
            handler($cont.find('.fileinput-cancel'), 'click', $.proxy(self.cancel, self));
            self._initDragDrop();
            if (!self.isUploadable) {
                handler($form, 'submit', $.proxy(self._submitForm, self));
            }
            handler(self.$container.find('.fileinput-upload'), 'click', $.proxy(self._uploadClick, self));
            handler($(window), 'resize', function () {
                self._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight);
            });
            handler($(document), 'webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange',
                function () {
                    self._listenFullScreen(checkFullScreen());
                });
            self._initClickable();
        },
        _initClickable: function () {
            var self = this, $zone;
            if (!self.isClickable) {
                return;
            }
            $zone = self.isUploadable ? self.$dropZone : self.$preview.find('.file-default-preview');
            addCss($zone, 'clickable');
            $zone.attr('tabindex', -1);
            handler($zone, 'click', function (e) {
                var $target = $(e.target);
                if (!$target.parents('.file-preview-thumbnails').length || $target.parents(
                        '.file-default-preview').length) {
                    self.$element.trigger('click');
                    $zone.blur();
                }
            });
        },
        _initDragDrop: function () {
            var self = this, $zone = self.$dropZone;
            if (self.isUploadable && self.dropZoneEnabled && self.showPreview) {
                handler($zone, 'dragenter dragover', $.proxy(self._zoneDragEnter, self));
                handler($zone, 'dragleave', $.proxy(self._zoneDragLeave, self));
                handler($zone, 'drop', $.proxy(self._zoneDrop, self));
                handler($(document), 'dragenter dragover drop', self._zoneDragDropInit);
            }
        },
        _zoneDragDropInit: function (e) {
            e.stopPropagation();
            e.preventDefault();
        },
        _zoneDragEnter: function (e) {
            var self = this, hasFiles = $.inArray('Files', e.originalEvent.dataTransfer.types) > -1;
            self._zoneDragDropInit(e);
            if (self.isDisabled || !hasFiles) {
                e.originalEvent.dataTransfer.effectAllowed = 'none';
                e.originalEvent.dataTransfer.dropEffect = 'none';
                return;
            }
            addCss(self.$dropZone, 'file-highlighted');
        },
        _zoneDragLeave: function (e) {
            var self = this;
            self._zoneDragDropInit(e);
            if (self.isDisabled) {
                return;
            }
            self.$dropZone.removeClass('file-highlighted');
        },
        _zoneDrop: function (e) {
            var self = this;
            e.preventDefault();
            /** @namespace e.originalEvent.dataTransfer */
            if (self.isDisabled || isEmpty(e.originalEvent.dataTransfer.files)) {
                return;
            }
            self._change(e, 'dragdrop');
            self.$dropZone.removeClass('file-highlighted');
        },
        _uploadClick: function (e) {
            var self = this, $btn = self.$container.find('.fileinput-upload'), $form,
                isEnabled = !$btn.hasClass('disabled') && isEmpty($btn.attr('disabled'));
            if (e && e.isDefaultPrevented()) {
                return;
            }
            if (!self.isUploadable) {
                if (isEnabled && $btn.attr('type') !== 'submit') {
                    $form = $btn.closest('form');
                    // downgrade to normal form submit if possible
                    if ($form.length) {
                        $form.trigger('submit');
                    }
                    e.preventDefault();
                }
                return;
            }
            e.preventDefault();
            if (isEnabled) {
                self.upload();
            }
        },
        _submitForm: function () {
            var self = this, $el = self.$element, files = $el.get(0).files;
            if (files && self.minFileCount > 0 && self._getFileCount(files.length) < self.minFileCount) {
                self._noFilesError({});
                return false;
            }
            return !self._abort({});
        },
        _clearPreview: function () {
            var self = this, $thumbs = !self.showUploadedThumbs ? self.$preview.find('.file-preview-frame') :
                self.$preview.find('.file-preview-frame:not(.file-preview-success)');
            $thumbs.remove();
            if (!self.$preview.find('.file-preview-frame').length || !self.showPreview) {
                self._resetUpload();
            }
            self._validateDefaultPreview();
        },
        _initSortable: function () {
            var self = this, $preview = self.$preview, $el, settings;
            if (!window.Sortable) {
                return;
            }
            $el = $preview.find('.file-initial-thumbs');
            settings = {
                handle: '.drag-handle-init',
                dataIdAttr: 'data-preview-id',
                draggable: '.file-preview-initial',
                onSort: function (e) {
                    var oldIndex = e.oldIndex, newIndex = e.newIndex;
                    self.initialPreview = moveArray(self.initialPreview, oldIndex, newIndex);
                    self.initialPreviewConfig = moveArray(self.initialPreviewConfig, oldIndex, newIndex);
                    previewCache.init(self);
                    self._raise('filesorted', {
                        previewId: $(e.item).attr('id'),
                        'oldIndex': oldIndex,
                        'newIndex': newIndex,
                        stack: self.initialPreviewConfig
                    });
                }
            };
            if ($el.data('sortable')) {
                $el.sortable('destroy');
            }
            $.extend(true, settings, self.fileActionSettings.dragSettings);
            $el.sortable(settings);
        },
        _initPreview: function (isInit) {
            var self = this, cap = self.initialCaption || '', out;
            if (!previewCache.count(self.id)) {
                self._clearPreview();
                if (isInit) {
                    self._setCaption(cap);
                } else {
                    self._initCaption();
                }
                return;
            }
            out = previewCache.out(self.id);
            cap = isInit && self.initialCaption ? self.initialCaption : out.caption;
            self.$preview.html(out.content);
            self._setCaption(cap);
            self._initSortable();
            if (!isEmpty(out.content)) {
                self.$container.removeClass('file-input-new');
            }
        },
        _getZoomButton: function (type) {
            var self = this, label = self.previewZoomButtonIcons[type], css = self.previewZoomButtonClasses[type],
                title = ' title="' + (self.previewZoomButtonTitles[type] || '') + '" ',
                params = title + (type === 'close' ? ' data-dismiss="modal" aria-hidden="true"' : '');
            if (type === 'fullscreen' || type === 'borderless' || type === 'toggleheader') {
                params += ' data-toggle="button" aria-pressed="false" autocomplete="off"';
            }
            return '<button type="button" class="' + css + ' btn-' + type + '"' + params + '>' + label + '</button>';
        },
        _getModalContent: function () {
            var self = this;
            return self._getLayoutTemplate('modal')
                .replace(/\{heading}/g, self.msgZoomModalHeading)
                .replace(/\{prev}/g, self._getZoomButton('prev'))
                .replace(/\{next}/g, self._getZoomButton('next'))
                .replace(/\{toggleheader}/g, self._getZoomButton('toggleheader'))
                .replace(/\{fullscreen}/g, self._getZoomButton('fullscreen'))
                .replace(/\{borderless}/g, self._getZoomButton('borderless'))
                .replace(/\{close}/g, self._getZoomButton('close'));
        },
        _listenModalEvent: function (event) {
            var self = this, $modal = self.$modal, getParams = function (e) {
                return {
                    sourceEvent: e,
                    previewId: $modal.data('previewId'),
                    modal: $modal
                };
            };
            $modal.on(event + '.bs.modal', function (e) {
                var $btnFull = $modal.find('.btn-fullscreen'), $btnBord = $modal.find('.btn-borderless');
                self._raise('filezoom' + event, getParams(e));
                if (event === 'shown') {
                    $btnBord.removeClass('active').attr('aria-pressed', 'false');
                    $btnFull.removeClass('active').attr('aria-pressed', 'false');
                    if ($modal.hasClass('file-zoom-fullscreen')) {
                        self._maximizeZoomDialog();
                        if (checkFullScreen()) {
                            $btnFull.addClass('active').attr('aria-pressed', 'true');
                        } else {
                            $btnBord.addClass('active').attr('aria-pressed', 'true');
                        }
                    }
                }
            });
        },
        _initZoom: function () {
            var self = this, $dialog, modalMain = self._getLayoutTemplate('modalMain'), modalId = '#' + MODAL_ID;
            self.$modal = $(modalId);
            if (!self.$modal || !self.$modal.length) {
                $dialog = $(document.createElement('div')).html(modalMain).insertAfter(self.$container);
                self.$modal = $('#' + MODAL_ID).insertBefore($dialog);
                $dialog.remove();
            }
            self.$modal.html(self._getModalContent());
            self._listenModalEvent('show');
            self._listenModalEvent('shown');
            self._listenModalEvent('hide');
            self._listenModalEvent('hidden');
            self._listenModalEvent('loaded');
        },
        _initZoomButtons: function () {
            var self = this, previewId = self.$modal.data('previewId') || '', $first, $last,
                frames = self.$preview.find('.file-preview-frame').toArray(), len = frames.length,
                $prev = self.$modal.find('.btn-prev'), $next = self.$modal.find('.btn-next');

            if (!len) {
                return;
            }
            $first = $(frames[0]);
            $last = $(frames[len - 1]);
            $prev.removeAttr('disabled');
            $next.removeAttr('disabled');
            if ($first.length && $first.attr('id') === previewId) {
                $prev.attr('disabled', true);
            }
            if ($last.length && $last.attr('id') === previewId) {
                $next.attr('disabled', true);
            }
        },
        _maximizeZoomDialog: function () {
            var self = this, $modal = self.$modal, $head = $modal.find('.modal-header:visible'),
                $foot = $modal.find('.modal-footer:visible'), $body = $modal.find('.modal-body'),
                h = $(window).height(), diff = 0;
            $modal.addClass('file-zoom-fullscreen');
            if ($head && $head.length) {
                h -= $head.outerHeight(true);
            }
            if ($foot && $foot.length) {
                h -= $foot.outerHeight(true);
            }
            if ($body && $body.length) {
                diff = $body.outerHeight(true) - $body.height();
                h -= diff;
            }
            $modal.find('.kv-zoom-body').height(h);
        },
        _resizeZoomDialog: function (fullScreen) {
            var self = this, $modal = self.$modal, $btnFull = $modal.find('.btn-fullscreen'),
                $btnBord = $modal.find('.btn-borderless');
            if ($modal.hasClass('file-zoom-fullscreen')) {
                toggleFullScreen(false);
                if (!fullScreen) {
                    if (!$btnFull.hasClass('active')) {
                        $modal.removeClass('file-zoom-fullscreen');
                        self.$modal.find('.kv-zoom-body').css('height', self.zoomModalHeight);
                    } else {
                        $btnFull.removeClass('active').attr('aria-pressed', 'false');
                    }
                } else {
                    if (!$btnFull.hasClass('active')) {
                        $modal.removeClass('file-zoom-fullscreen');
                        self._resizeZoomDialog(true);
                        if ($btnBord.hasClass('active')) {
                            $btnBord.removeClass('active').attr('aria-pressed', 'false');
                        }
                    }
                }
            } else {
                if (!fullScreen) {
                    self._maximizeZoomDialog();
                    return;
                }
                toggleFullScreen(true);
            }
            $modal.focus();
        },
        _setZoomContent: function ($preview, animate) {
            var self = this, $content, tmplt, body, title, $body, $dataEl, config, previewId = $preview.attr('id'),
                $modal = self.$modal, $prev = $modal.find('.btn-prev'), $next = $modal.find('.btn-next'), $tmp,
                $btnFull = $modal.find('.btn-fullscreen'), $btnBord = $modal.find('.btn-borderless'),
                $btnTogh = $modal.find('.btn-toggleheader');
            tmplt = $preview.data('template') || 'generic';
            $content = $preview.find('.kv-file-content');
            body = $content.length ? $content.html() : '';
            title = $preview.find('.file-footer-caption').text() || '';
            $modal.find('.kv-zoom-title').html(title);
            $body = $modal.find('.kv-zoom-body');
            if (animate) {
                $tmp = $body.clone().insertAfter($body);
                $body.html(body).hide();
                $tmp.fadeOut('fast', function () {
                    $body.fadeIn('fast');
                    $tmp.remove();
                });
            } else {
                $body.html(body);
            }
            config = self.previewZoomSettings[tmplt];
            if (config) {
                $dataEl = $body.find('.kv-preview-data');
                addCss($dataEl, 'file-zoom-detail');
                $.each(config, function (key, value) {
                    $dataEl.css(key, value);
                    if (($dataEl.attr('width') && key === 'width') || ($dataEl.attr('height') && key === 'height')) {
                        $dataEl.removeAttr(key);
                    }
                });
            }
            $modal.data('previewId', previewId);
            handler($prev, 'click', function () {
                self._zoomSlideShow('prev', previewId);
            });
            handler($next, 'click', function () {
                self._zoomSlideShow('next', previewId);
            });
            handler($btnFull, 'click', function () {
                self._resizeZoomDialog(true);
            });
            handler($btnBord, 'click', function () {
                self._resizeZoomDialog(false);
            });
            handler($btnTogh, 'click', function () {
                var $header = $modal.find('.modal-header'), $floatBar = $modal.find('.modal-body .floating-buttons'),
                    ht, $actions = $header.find('.kv-zoom-actions'), resize = function (height) {
                        var $body = self.$modal.find('.kv-zoom-body'), h = self.zoomModalHeight;
                        if ($modal.hasClass('file-zoom-fullscreen')) {
                            h = $body.outerHeight(true);
                            if (!height) {
                                h = h - $header.outerHeight(true);
                            }
                        }
                        $body.css('height', height ? h + height : h);
                    };
                if ($header.is(':visible')) {
                    ht = $header.outerHeight(true);
                    $header.slideUp('slow', function () {
                        $actions.find('.btn').appendTo($floatBar);
                        resize(ht);
                    });
                } else {
                    $floatBar.find('.btn').appendTo($actions);
                    $header.slideDown('slow', function () {
                        resize();
                    });
                }
                $modal.focus();
            });
            handler($modal, 'keydown', function (e) {
                var key = e.which || e.keyCode;
                if (key === 37 && !$prev.attr('disabled')) {
                    self._zoomSlideShow('prev', previewId);
                }
                if (key === 39 && !$next.attr('disabled')) {
                    self._zoomSlideShow('next', previewId);
                }
            });
        },
        _zoomPreview: function ($btn) {
            var self = this, $preview;
            if (!$btn.length) {
                throw 'Cannot zoom to detailed preview!';
            }
            self.$modal.html(self._getModalContent());
            $preview = $btn.closest('.file-preview-frame');
            self._setZoomContent($preview);
            self.$modal.modal('show');
            self._initZoomButtons();
        },
        _zoomSlideShow: function (dir, previewId) {
            var self = this, $btn = self.$modal.find('.kv-zoom-actions .btn-' + dir), $targFrame, i,
                frames = self.$preview.find('.file-preview-frame').toArray(), len = frames.length, out;
            if ($btn.attr('disabled')) {
                return;
            }
            for (i = 0; i < len; i++) {
                if ($(frames[i]).attr('id') === previewId) {
                    out = dir === 'prev' ? i - 1 : i + 1;
                    break;
                }
            }
            if (out < 0 || out >= len || !frames[out]) {
                return;
            }
            $targFrame = $(frames[out]);
            if ($targFrame.length) {
                self._setZoomContent($targFrame, true);
            }
            self._initZoomButtons();
            self._raise('filezoom' + dir, {'previewId': previewId, modal: self.$modal});
        },
        _initZoomButton: function () {
            var self = this;
            self.$preview.find('.kv-file-zoom').each(function () {
                var $el = $(this);
                handler($el, 'click', function () {
                    self._zoomPreview($el);
                });
            });
        },
        _initPreviewActions: function () {
            var self = this, deleteExtraData = self.deleteExtraData || {},
                resetProgress = function () {
                    var hasFiles = self.isUploadable ? previewCache.count(self.id) : self.$element.get(0).files.length;
                    if (self.$preview.find('.kv-file-remove').length === 0 && !hasFiles) {
                        self.reset();
                        self.initialCaption = '';
                    }
                };
            self._initZoomButton();
            self.$preview.find('.kv-file-remove').each(function () {
                var $el = $(this), vUrl = $el.data('url') || self.deleteUrl, vKey = $el.data('key');
                if (isEmpty(vUrl) || vKey === undefined) {
                    return;
                }
                var $frame = $el.closest('.file-preview-frame'), cache = previewCache.data[self.id],
                    settings, params, index = $frame.data('fileindex'), config, extraData;
                index = parseInt(index.replace('init_', ''));
                config = isEmpty(cache.config) && isEmpty(cache.config[index]) ? null : cache.config[index];
                extraData = isEmpty(config) || isEmpty(config.extra) ? deleteExtraData : config.extra;
                if (typeof extraData === "function") {
                    extraData = extraData();
                }
                params = {id: $el.attr('id'), key: vKey, extra: extraData};
                settings = $.extend(true, {}, {
                    url: vUrl,
                    type: 'POST',
                    dataType: 'json',
                    data: $.extend(true, {}, {key: vKey}, extraData),
                    beforeSend: function (jqXHR) {
                        self.ajaxAborted = false;
                        self._raise('filepredelete', [vKey, jqXHR, extraData]);
                        if (self.ajaxAborted) {
                            jqXHR.abort();
                        } else {
                            addCss($frame, 'file-uploading');
                            addCss($el, 'disabled');
                        }
                    },
                    success: function (data, textStatus, jqXHR) {
                        var n, cap;
                        if (isEmpty(data) || isEmpty(data.error)) {
                            previewCache.unset(self.id, index);
                            n = previewCache.count(self.id);
                            cap = n > 0 ? self._getMsgSelected(n) : '';
                            self._raise('filedeleted', [vKey, jqXHR, extraData]);
                            self._setCaption(cap);
                        } else {
                            params.jqXHR = jqXHR;
                            params.response = data;
                            self._showError(data.error, params, 'filedeleteerror');
                            $frame.removeClass('file-uploading');
                            $el.removeClass('disabled');
                            resetProgress();
                            return;
                        }
                        $frame.removeClass('file-uploading').addClass('file-deleted');
                        $frame.fadeOut('slow', function () {
                            self._clearObjects($frame);
                            $frame.remove();
                            resetProgress();
                            if (!n && self.getFileStack().length === 0) {
                                self._setCaption('');
                                self.reset();
                            }
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        var errMsg = self._parseError(jqXHR, errorThrown);
                        params.jqXHR = jqXHR;
                        params.response = {};
                        self._showError(errMsg, params, 'filedeleteerror');
                        $frame.removeClass('file-uploading');
                        resetProgress();
                    }
                }, self.ajaxDeleteSettings);
                handler($el, 'click', function () {
                    if (!self._validateMinCount()) {
                        return false;
                    }
                    $.ajax(settings);
                });
            });
        },
        _clearObjects: function ($el) {
            $el.find('video audio').each(function () {
                this.pause();
                $(this).remove();
            });
            $el.find('img object div').each(function () {
                $(this).remove();
            });
        },
        _clearFileInput: function () {
            var self = this, $el = self.$element, $srcFrm, $tmpFrm, $tmpEl;
            if (isEmpty($el.val())) {
                return;
            }
            // Fix for IE ver < 11, that does not clear file inputs. Requires a sequence of steps to prevent IE
            // crashing but still allow clearing of the file input.
            if (self.isIE9 || self.isIE10) {
                $srcFrm = $el.closest('form');
                $tmpFrm = $(document.createElement('form'));
                $tmpEl = $(document.createElement('div'));
                $el.before($tmpEl);
                if ($srcFrm.length) {
                    $srcFrm.after($tmpFrm);
                } else {
                    $tmpEl.after($tmpFrm);
                }
                $tmpFrm.append($el).trigger('reset');
                $tmpEl.before($el).remove();
                $tmpFrm.remove();
            } else { // normal input clear behavior for other sane browsers
                $el.val('');
            }
            self.fileInputCleared = true;
        },
        _resetUpload: function () {
            var self = this;
            self.uploadCache = {content: [], config: [], tags: [], append: true};
            self.uploadCount = 0;
            self.uploadStatus = {};
            self.uploadLog = [];
            self.uploadAsyncCount = 0;
            self.loadedImages = [];
            self.totalImagesCount = 0;
            self.$btnUpload.removeAttr('disabled');
            self._setProgress(0);
            addCss(self.$progress, 'hide');
            self._resetErrors(false);
            self.ajaxAborted = false;
            self.ajaxRequests = [];
            self._resetCanvas();
        },
        _resetCanvas: function () {
            var self = this;
            if (self.canvas && self.imageCanvasContext) {
                self.imageCanvasContext.clearRect(0, 0, self.canvas.width, self.canvas.height);
            }
        },
        _hasInitialPreview: function () {
            var self = this;
            return !self.overwriteInitial && previewCache.count(self.id);
        },
        _resetPreview: function () {
            var self = this, out, cap;
            if (previewCache.count(self.id)) {
                out = previewCache.out(self.id);
                self.$preview.html(out.content);
                cap = self.initialCaption ? self.initialCaption : out.caption;
                self._setCaption(cap);
            } else {
                self._clearPreview();
                self._initCaption();
            }
            if (self.showPreview) {
                self._initZoom();
                self._initSortable();
            }
        },
        _clearDefaultPreview: function () {
            var self = this;
            self.$preview.find('.file-default-preview').remove();
        },
        _validateDefaultPreview: function () {
            var self = this;
            if (!self.showPreview || isEmpty(self.defaultPreviewContent)) {
                return;
            }
            self.$preview.html('<div class="file-default-preview">' + self.defaultPreviewContent + '</div>');
            self.$container.removeClass('file-input-new');
            self._initClickable();
        },
        _resetPreviewThumbs: function (isAjax) {
            var self = this, out;
            if (isAjax) {
                self._clearPreview();
                self.clearStack();
                return;
            }
            if (self._hasInitialPreview()) {
                out = previewCache.out(self.id);
                self.$preview.html(out.content);
                self._setCaption(out.caption);
                self._initPreviewActions();
            } else {
                self._clearPreview();
            }
        },
        _getLayoutTemplate: function (t) {
            var self = this,
                template = ifSet(t, self.layoutTemplates, defaultLayoutTemplates[t]);
            if (isEmpty(self.customLayoutTags)) {
                return template;
            }
            return replaceTags(template, self.customLayoutTags);
        },
        _getPreviewTemplate: function (t) {
            var self = this,
                template = ifSet(t, self.previewTemplates, defaultPreviewTemplates[t]);
            if (isEmpty(self.customPreviewTags)) {
                return template;
            }
            return replaceTags(template, self.customPreviewTags);
        },
        _getOutData: function (jqXHR, responseData, filesData) {
            var self = this;
            jqXHR = jqXHR || {};
            responseData = responseData || {};
            filesData = filesData || self.filestack.slice(0) || {};
            return {
                form: self.formdata,
                files: filesData,
                filenames: self.filenames,
                extra: self._getExtraData(),
                response: responseData,
                reader: self.reader,
                jqXHR: jqXHR
            };
        },
        _getMsgSelected: function (n) {
            var self = this, strFiles = n === 1 ? self.fileSingle : self.filePlural;
            return n > 0 ? self.msgSelected.replace('{n}', n).replace('{files}', strFiles) : self.msgNoFilesSelected;
        },
        _getThumbs: function (css) {
            css = css || '';
            return this.$preview.find('.file-preview-frame:not(.file-preview-initial)' + css);
        },
        _getExtraData: function (previewId, index) {
            var self = this, data = self.uploadExtraData;
            if (typeof self.uploadExtraData === "function") {
                data = self.uploadExtraData(previewId, index);
            }
            return data;
        },
        _initXhr: function (xhrobj, previewId, fileCount) {
            var self = this;
            if (xhrobj.upload) {
                xhrobj.upload.addEventListener('progress', function (event) {
                    var pct = 0, position = event.loaded || event.position, total = event.total;
                    /** @namespace event.lengthComputable */
                    if (event.lengthComputable) {
                        pct = Math.ceil(position / total * 100);
                    }
                    if (previewId) {
                        self._setAsyncUploadStatus(previewId, pct, fileCount);
                    } else {
                        self._setProgress(Math.ceil(pct));
                    }
                }, false);
            }
            return xhrobj;
        },
        _ajaxSubmit: function (fnBefore, fnSuccess, fnComplete, fnError, previewId, index) {
            var self = this, settings;
            self._raise('filepreajax', [previewId, index]);
            self._uploadExtra(previewId, index);
            settings = $.extend(true, {}, {
                xhr: function () {
                    var xhrobj = $.ajaxSettings.xhr();
                    return self._initXhr(xhrobj, previewId, self.getFileStack().length);
                },
                url: self.uploadUrl,
                type: 'POST',
                dataType: 'json',
                data: self.formdata,
                cache: false,
                processData: false,
                contentType: false,
                beforeSend: fnBefore,
                success: fnSuccess,
                complete: fnComplete,
                error: fnError
            }, self.ajaxSettings);
            self.ajaxRequests.push($.ajax(settings));
        },
        _initUploadSuccess: function (out, $thumb, allFiles) {
            var self = this, append, data, index, $newThumb, content, config, tags, i;
            if (!self.showPreview || typeof out !== 'object' || $.isEmptyObject(out)) {
                return;
            }
            if (out.initialPreview !== undefined && out.initialPreview.length > 0) {
                self.hasInitData = true;
                content = out.initialPreview || [];
                config = out.initialPreviewConfig || [];
                tags = out.initialPreviewThumbTags || [];
                append = out.append === undefined || out.append ? true : false;
                if (content.length > 0 && !isArray(content)) {
                    content = content.split(self.initialPreviewDelimiter);
                }
                self.overwriteInitial = false;
                self.initialPreview.concat(content);
                self.initialPreviewThumbTags.concat(tags);
                self.initialPreviewConfig.concat(config);
                if ($thumb !== undefined) {
                    if (!allFiles) {
                        index = previewCache.add(self.id, content, config[0], tags[0], append);
                        data = previewCache.get(self.id, index, false);
                        $newThumb = $(data).hide();
                        $thumb.after($newThumb).fadeOut('slow', function () {
                            $newThumb.fadeIn('slow').css('display:inline-block');
                            self._initPreviewActions();
                            self._clearFileInput();
                            $thumb.remove();
                        });
                    } else {
                        i = $thumb.attr('data-fileindex');
                        self.uploadCache.content[i] = content[0];
                        self.uploadCache.config[i] = config[0];
                        self.uploadCache.tags[i] = tags[0];
                        self.uploadCache.append = append;
                    }
                } else {
                    previewCache.set(self.id, content, config, tags, append);
                    self._initPreview();
                    self._initPreviewActions();
                }
            }
        },
        _initSuccessThumbs: function () {
            var self = this;
            if (!self.showPreview) {
                return;
            }
            self._getThumbs('.file-preview-success').each(function () {
                var $thumb = $(this), $remove = $thumb.find('.kv-file-remove');
                $remove.removeAttr('disabled');
                handler($remove, 'click', function () {
                    var out = self._raise('filesuccessremove', [$thumb.attr('id'), $thumb.data('fileindex')]);
                    cleanMemory($thumb);
                    if (out === false) {
                        return;
                    }
                    $thumb.fadeOut('slow', function () {
                        $thumb.remove();
                        if (!self.$preview.find('.file-preview-frame').length) {
                            self.reset();
                        }
                    });
                });
            });
        },
        _checkAsyncComplete: function () {
            var self = this, previewId, i;
            for (i = 0; i < self.filestack.length; i++) {
                if (self.filestack[i]) {
                    previewId = self.previewInitId + "-" + i;
                    if ($.inArray(previewId, self.uploadLog) === -1) {
                        return false;
                    }
                }
            }
            return (self.uploadAsyncCount === self.uploadLog.length);
        },
        _uploadExtra: function (previewId, index) {
            var self = this, data = self._getExtraData(previewId, index);
            if (data.length === 0) {
                return;
            }
            $.each(data, function (key, value) {
                self.formdata.append(key, value);
            });
        },
        _uploadSingle: function (i, files, allFiles) {
            var self = this, total = self.getFileStack().length, formdata = new FormData(), outData,
                previewId = self.previewInitId + "-" + i, $thumb, chkComplete, $btnUpload, $btnDelete,
                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                fnBefore, fnSuccess, fnComplete, fnError, updateUploadLog, params = {id: previewId, index: i};
            self.formdata = formdata;
            if (self.showPreview) {
                $thumb = $('#' + previewId + ':not(.file-preview-initial)');
                $btnUpload = $thumb.find('.kv-file-upload');
                $btnDelete = $thumb.find('.kv-file-remove');
                $('#' + previewId).find('.file-thumb-progress').removeClass('hide');
            }
            if (total === 0 || !hasPostData || ($btnUpload && $btnUpload.hasClass('disabled')) || self._abort(params)) {
                return;
            }
            updateUploadLog = function (i, previewId) {
                self.updateStack(i, undefined);
                self.uploadLog.push(previewId);
                if (self._checkAsyncComplete()) {
                    self.fileBatchCompleted = true;
                }
            };
            chkComplete = function () {
                var u = self.uploadCache;
                if (!self.fileBatchCompleted) {
                    return;
                }
                setTimeout(function () {
                    if (self.showPreview) {
                        previewCache.set(self.id, u.content, u.config, u.tags, u.append);
                        if (self.hasInitData) {
                            self._initPreview();
                            self._initPreviewActions();
                        }
                    }
                    self.unlock();
                    self._clearFileInput();
                    self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
                    self.uploadCount = 0;
                    self.uploadStatus = {};
                    self.uploadLog = [];
                    self._setProgress(100);
                }, 100);
            };
            fnBefore = function (jqXHR) {
                outData = self._getOutData(jqXHR);
                self.fileBatchCompleted = false;
                if (self.showPreview) {
                    if (!$thumb.hasClass('file-preview-success')) {
                        self._setThumbStatus($thumb, 'Loading');
                        addCss($thumb, 'file-uploading');
                    }
                    $btnUpload.attr('disabled', true);
                    $btnDelete.attr('disabled', true);
                }
                if (!allFiles) {
                    self.lock();
                }
                self._raise('filepreupload', [outData, previewId, i]);
                $.extend(true, params, outData);
                if (self._abort(params)) {
                    jqXHR.abort();
                    self._setProgressCancelled();
                }
            };
            fnSuccess = function (data, textStatus, jqXHR) {
                outData = self._getOutData(jqXHR, data);
                $.extend(true, params, outData);
                setTimeout(function () {
                    if (isEmpty(data) || isEmpty(data.error)) {
                        if (self.showPreview) {
                            self._setThumbStatus($thumb, 'Success');
                            $btnUpload.hide();
                            self._initUploadSuccess(data, $thumb, allFiles);
                        }
                        self._raise('fileuploaded', [outData, previewId, i]);
                        if (!allFiles) {
                            self.updateStack(i, undefined);
                        } else {
                            updateUploadLog(i, previewId);
                        }
                    } else {
                        self._showUploadError(data.error, params);
                        self._setPreviewError($thumb, i);
                        if (allFiles) {
                            updateUploadLog(i, previewId);
                        }
                    }
                }, 100);
            };
            fnComplete = function () {
                setTimeout(function () {
                    if (self.showPreview) {
                        $btnUpload.removeAttr('disabled');
                        $btnDelete.removeAttr('disabled');
                        $thumb.removeClass('file-uploading');
                    }
                    if (!allFiles) {
                        self.unlock(false);
                        self._clearFileInput();
                    } else {
                        chkComplete();
                    }
                    self._initSuccessThumbs();
                }, 100);
            };
            fnError = function (jqXHR, textStatus, errorThrown) {
                var errMsg = self._parseError(jqXHR, errorThrown, (allFiles ? files[i].name : null));
                setTimeout(function () {
                    if (allFiles) {
                        updateUploadLog(i, previewId);
                    }
                    self.uploadStatus[previewId] = 100;
                    self._setPreviewError($thumb, i);
                    $.extend(true, params, self._getOutData(jqXHR));
                    self._showUploadError(errMsg, params);
                }, 100);
            };
            formdata.append(self.uploadFileAttr, files[i], self.filenames[i]);
            formdata.append('file_id', i);
            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, previewId, i);
        },
        _uploadBatch: function () {
            var self = this, files = self.filestack, total = files.length, params = {}, fnBefore, fnSuccess, fnError,
                fnComplete, hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                setAllUploaded;
            self.formdata = new FormData();
            if (total === 0 || !hasPostData || self._abort(params)) {
                return;
            }
            setAllUploaded = function () {
                $.each(files, function (key) {
                    self.updateStack(key, undefined);
                });
                self._clearFileInput();
            };
            fnBefore = function (jqXHR) {
                self.lock();
                var outData = self._getOutData(jqXHR);
                if (self.showPreview) {
                    self._getThumbs().each(function () {
                        var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload'),
                            $btnDelete = $thumb.find('.kv-file-remove');
                        if (!$thumb.hasClass('file-preview-success')) {
                            self._setThumbStatus($thumb, 'Loading');
                            addCss($thumb, 'file-uploading');
                        }
                        $btnUpload.attr('disabled', true);
                        $btnDelete.attr('disabled', true);
                    });
                }
                self._raise('filebatchpreupload', [outData]);
                if (self._abort(outData)) {
                    jqXHR.abort();
                    self._setProgressCancelled();
                }
            };
            fnSuccess = function (data, textStatus, jqXHR) {
                /** @namespace data.errorkeys */
                var outData = self._getOutData(jqXHR, data), $thumbs = self._getThumbs(':not(.file-preview-error)'), key = 0,
                    keys = isEmpty(data) || isEmpty(data.errorkeys) ? [] : data.errorkeys;
                if (isEmpty(data) || isEmpty(data.error)) {
                    self._raise('filebatchuploadsuccess', [outData]);
                    setAllUploaded();
                    if (self.showPreview) {
                        $thumbs.each(function () {
                            var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload');
                            $thumb.find('.kv-file-upload').hide();
                            self._setThumbStatus($thumb, 'Success');
                            $thumb.removeClass('file-uploading');
                            $btnUpload.removeAttr('disabled');
                        });
                        self._initUploadSuccess(data);
                    } else {
                        self.reset();
                    }
                } else {
                    if (self.showPreview) {
                        $thumbs.each(function () {
                            var $thumb = $(this), $btnDelete = $thumb.find('.kv-file-remove'),
                                $btnUpload = $thumb.find('.kv-file-upload');
                            $thumb.removeClass('file-uploading');
                            $btnUpload.removeAttr('disabled');
                            $btnDelete.removeAttr('disabled');
                            if (keys.length === 0) {
                                self._setPreviewError($thumb);
                                return;
                            }
                            if ($.inArray(key, keys) !== -1) {
                                self._setPreviewError($thumb);
                            } else {
                                $thumb.find('.kv-file-upload').hide();
                                self._setThumbStatus($thumb, 'Success');
                                self.updateStack(key, undefined);
                            }
                            key++;
                        });
                        self._initUploadSuccess(data);
                    }
                    self._showUploadError(data.error, outData, 'filebatchuploaderror');
                }
            };
            fnComplete = function () {
                self._setProgress(100);
                self.unlock();
                self._initSuccessThumbs();
                self._clearFileInput();
                self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
            };
            fnError = function (jqXHR, textStatus, errorThrown) {
                var outData = self._getOutData(jqXHR), errMsg = self._parseError(jqXHR, errorThrown);
                self._showUploadError(errMsg, outData, 'filebatchuploaderror');
                self.uploadFileCount = total - 1;
                if (!self.showPreview) {
                    return;
                }
                self._getThumbs().each(function () {
                    var $thumb = $(this), key = $thumb.attr('data-fileindex');
                    $thumb.removeClass('file-uploading');
                    if (self.filestack[key] !== undefined) {
                        self._setPreviewError($thumb);
                    }
                });
                self._getThumbs().removeClass('file-uploading');
                self._getThumbs(' .kv-file-upload').removeAttr('disabled');
                self._getThumbs(' .kv-file-delete').removeAttr('disabled');
            };
            $.each(files, function (key, data) {
                if (!isEmpty(files[key])) {
                    self.formdata.append(self.uploadFileAttr, data, self.filenames[key]);
                }
            });
            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        _uploadExtraOnly: function () {
            var self = this, params = {}, fnBefore, fnSuccess, fnComplete, fnError;
            self.formdata = new FormData();
            if (self._abort(params)) {
                return;
            }
            fnBefore = function (jqXHR) {
                self.lock();
                var outData = self._getOutData(jqXHR);
                self._raise('filebatchpreupload', [outData]);
                self._setProgress(50);
                params.data = outData;
                params.xhr = jqXHR;
                if (self._abort(params)) {
                    jqXHR.abort();
                    self._setProgressCancelled();
                }
            };
            fnSuccess = function (data, textStatus, jqXHR) {
                var outData = self._getOutData(jqXHR, data);
                if (isEmpty(data) || isEmpty(data.error)) {
                    self._raise('filebatchuploadsuccess', [outData]);
                    self._clearFileInput();
                    self._initUploadSuccess(data);
                } else {
                    self._showUploadError(data.error, outData, 'filebatchuploaderror');
                }
            };
            fnComplete = function () {
                self._setProgress(100);
                self.unlock();
                self._clearFileInput();
                self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
            };
            fnError = function (jqXHR, textStatus, errorThrown) {
                var outData = self._getOutData(jqXHR), errMsg = self._parseError(jqXHR, errorThrown);
                params.data = outData;
                self._showUploadError(errMsg, outData, 'filebatchuploaderror');
            };
            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        _initFileActions: function () {
            var self = this;
            if (!self.showPreview) {
                return;
            }
            self._initZoomButton();
            self.$preview.find('.kv-file-remove').each(function () {
                var $el = $(this), $frame = $el.closest('.file-preview-frame'), hasError,
                    id = $frame.attr('id'), ind = $frame.attr('data-fileindex'), n, cap, status;
                handler($el, 'click', function () {
                    status = self._raise('filepreremove', [id, ind]);
                    if (status === false || !self._validateMinCount()) {
                        return false;
                    }
                    hasError = $frame.hasClass('file-preview-error');
                    cleanMemory($frame);
                    $frame.fadeOut('slow', function () {
                        self.updateStack(ind, undefined);
                        self._clearObjects($frame);
                        $frame.remove();
                        if (id && hasError) {
                            self.$errorContainer.find('li[data-file-id="' + id + '"]').fadeOut('fast', function () {
                                $(this).remove();
                                if (!self._errorsExist()) {
                                    self._resetErrors();
                                }
                            });
                        }
                        self._clearFileInput();
                        var filestack = self.getFileStack(true), chk = previewCache.count(self.id),
                            len = filestack.length,
                            hasThumb = self.showPreview && self.$preview.find('.file-preview-frame').length;
                        if (len === 0 && chk === 0 && !hasThumb) {
                            self.reset();
                        } else {
                            n = chk + len;
                            cap = n > 1 ? self._getMsgSelected(n) : (filestack[0] ? self._getFileNames()[0] : '');
                            self._setCaption(cap);
                        }
                        self._raise('fileremoved', [id, ind]);
                    });
                });
            });
            self.$preview.find('.kv-file-upload').each(function () {
                var $el = $(this);
                handler($el, 'click', function () {
                    var $frame = $el.closest('.file-preview-frame'),
                        ind = $frame.attr('data-fileindex');
                    if (!$frame.hasClass('file-preview-error')) {
                        self._uploadSingle(ind, self.filestack, false);
                    }
                });
            });
        },
        _hideFileIcon: function () {
            if (this.overwriteInitial) {
                this.$captionContainer.find('.kv-caption-icon').hide();
            }
        },
        _showFileIcon: function () {
            this.$captionContainer.find('.kv-caption-icon').show();
        },
        _getSize: function (bytes) {
            var size = parseFloat(bytes);
            if (bytes === null || isNaN(size)) {
                return '';
            }
            var self = this, i, func = self.fileSizeGetter, sizes, out;
            if (typeof func === 'function') {
                out = func(bytes);
            } else {
                i = Math.floor(Math.log(size) / Math.log(1024));
                sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
                out = (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + sizes[i];
            }
            return self._getLayoutTemplate('size').replace('{sizeText}', out);
        },
        _generatePreviewTemplate: function (cat, data, fname, ftype, previewId, isError, size, frameClass, foot, ind) {
            var self = this, tmplt = self._getPreviewTemplate(cat), content, sText, css = frameClass || '',
                config = ifSet(cat, self.previewSettings, defaultPreviewSettings[cat]), caption = self.slug(fname),
                footer = foot || self._renderFileFooter(caption, size, config.width, isError);
            ind = ind || previewId.slice(previewId.lastIndexOf('-') + 1);
            tmplt = self._parseFilePreviewIcon(tmplt, fname);
            if (cat === 'text' || cat === 'html') {
                sText = cat === 'text' ? htmlEncode(data) : data;
                content = tmplt.replace(/\{previewId}/g, previewId).replace(/\{caption}/g, caption)
                    .replace(/\{width}/g, config.width).replace(/\{height}/g, config.height)
                    .replace(/\{frameClass}/g, css).replace(/\{cat}/g, ftype)
                    .replace(/\{footer}/g, footer).replace(/\{fileindex}/g, ind)
                    .replace(/\{data}/g, sText).replace(/\{template}/g, cat);
            } else {
                content = tmplt.replace(/\{previewId}/g, previewId).replace(/\{caption}/g, caption)
                    .replace(/\{frameClass}/g, css).replace(/\{type}/g, ftype).replace(/\{fileindex}/g, ind)
                    .replace(/\{width}/g, config.width).replace(/\{height}/g, config.height)
                    .replace(/\{footer}/g, footer).replace(/\{data}/g, data).replace(/\{template}/g, cat);
            }
            return content;
        },
        _previewDefault: function (file, previewId, isDisabled) {
            var self = this, $preview = self.$preview, $previewLive = $preview.find('.file-live-thumbs');
            if (!self.showPreview) {
                return;
            }
            var fname = file ? file.name : '', ftype = file ? file.type : '', content,
                isError = isDisabled === true && !self.isUploadable, data = objUrl.createObjectURL(file);
            self._clearDefaultPreview();
            content = self._generatePreviewTemplate('other', data, fname, ftype, previewId, isError, file.size);
            if (!$previewLive.length) {
                $previewLive = $(document.createElement('div')).addClass('file-live-thumbs').appendTo($preview);
            }
            $previewLive.append("\n" + content);
            if (isDisabled === true && self.isUploadable) {
                self._setThumbStatus($('#' + previewId), 'Error');
            }
        },
        _previewFile: function (i, file, theFile, previewId, data) {
            if (!this.showPreview) {
                return;
            }
            var self = this, cat = self._parseFileType(file), fname = file ? file.name : '', caption = self.slug(fname),
                types = self.allowedPreviewTypes, mimes = self.allowedPreviewMimeTypes, $preview = self.$preview,
                chkTypes = types && types.indexOf(cat) >= 0, $previewLive = $preview.find('.file-live-thumbs'),
                iData = (cat === 'text' || cat === 'html' || cat === 'image') ? theFile.target.result : data, content,
                chkMimes = mimes && mimes.indexOf(file.type) !== -1;
            if (!$previewLive.length) {
                $previewLive = $(document.createElement('div')).addClass('file-live-thumbs').appendTo($preview);
            }
            /** @namespace window.DOMPurify */
            if (cat === 'html' && self.purifyHtml && window.DOMPurify) {
                iData = window.DOMPurify.sanitize(iData);
            }
            if (chkTypes || chkMimes) {
                content = self._generatePreviewTemplate(cat, iData, fname, file.type, previewId, false, file.size);
                self._clearDefaultPreview();
                $previewLive.append("\n" + content);
                self._validateImage(i, previewId, caption, file.type);
            } else {
                self._previewDefault(file, previewId);
            }
            self._initSortable();
        },
        _slugDefault: function (text) {
            return isEmpty(text) ? '' : String(text).replace(/[\-\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, '_');
        },
        _readFiles: function (files) {
            this.reader = new FileReader();
            var self = this, $el = self.$element, $preview = self.$preview, reader = self.reader,
                $container = self.$previewContainer, $status = self.$previewStatus, msgLoading = self.msgLoading,
                msgProgress = self.msgProgress, previewInitId = self.previewInitId, numFiles = files.length,
                settings = self.fileTypeSettings, ctr = self.filestack.length, readFile,
                maxPreviewSize = self.maxFilePreviewSize && parseFloat(self.maxFilePreviewSize),
                canPreview = $preview.length && (!maxPreviewSize || isNaN(maxPreviewSize)),
                throwError = function (msg, file, previewId, index) {
                    var p1 = $.extend(true, {}, self._getOutData({}, {}, files), {id: previewId, index: index}),
                        p2 = {id: previewId, index: index, file: file, files: files};
                    self._previewDefault(file, previewId, true);
                    if (self.isUploadable) {
                        self.addToStack(undefined);
                    }
                    setTimeout(function () {
                        readFile(index + 1);
                    }, 100);
                    self._initFileActions();
                    if (self.removeFromPreviewOnError) {
                        $('#' + previewId).remove();
                    }
                    return self.isUploadable ? self._showUploadError(msg, p1) : self._showError(msg, p2);
                };

            self.loadedImages = [];
            self.totalImagesCount = 0;

            $.each(files, function (key, file) {
                var func = self.fileTypeSettings.image || defaultFileTypeSettings.image;
                if (func && func(file.type)) {
                    self.totalImagesCount++;
                }
            });
            readFile = function (i) {
                if (isEmpty($el.attr('multiple'))) {
                    numFiles = 1;
                }
                if (i >= numFiles) {
                    if (self.isUploadable && self.filestack.length > 0) {
                        self._raise('filebatchselected', [self.getFileStack()]);
                    } else {
                        self._raise('filebatchselected', [files]);
                    }
                    $container.removeClass('file-thumb-loading');
                    $status.html('');
                    return;
                }
                var node = ctr + i, previewId = previewInitId + "-" + node, isText, isImage, file = files[i],
                    caption = self.slug(file.name), fileSize = (file.size || 0) / 1000, checkFile, fileExtExpr = '',
                    previewData = objUrl.createObjectURL(file), fileCount = 0, j, msg, typ, chk,
                    fileTypes = self.allowedFileTypes, strTypes = isEmpty(fileTypes) ? '' : fileTypes.join(', '),
                    fileExt = self.allowedFileExtensions, strExt = isEmpty(fileExt) ? '' : fileExt.join(', ');
                if (!isEmpty(fileExt)) {
                    fileExtExpr = new RegExp('\\.(' + fileExt.join('|') + ')$', 'i');
                }
                fileSize = fileSize.toFixed(2);
                if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {
                    msg = self.msgSizeTooLarge.replace('{name}', caption)
                        .replace('{size}', fileSize)
                        .replace('{maxSize}', self.maxFileSize);
                    self.isError = throwError(msg, file, previewId, i);
                    return;
                }
                if (!isEmpty(fileTypes) && isArray(fileTypes)) {
                    for (j = 0; j < fileTypes.length; j += 1) {
                        typ = fileTypes[j];
                        checkFile = settings[typ];
                        chk = (checkFile !== undefined && checkFile(file.type, caption));
                        fileCount += isEmpty(chk) ? 0 : chk.length;
                    }
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileType.replace('{name}', caption).replace('{types}', strTypes);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (fileCount === 0 && !isEmpty(fileExt) && isArray(fileExt) && !isEmpty(fileExtExpr)) {
                    chk = compare(caption, fileExtExpr);
                    fileCount += isEmpty(chk) ? 0 : chk.length;
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileExtension.replace('{name}', caption).replace('{extensions}',
                            strExt);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (!self.showPreview) {
                    self.addToStack(file);
                    setTimeout(function () {
                        readFile(i + 1);
                    }, 100);
                    self._raise('fileloaded', [file, previewId, i, reader]);
                    return;
                }
                if (!canPreview && fileSize > maxPreviewSize) {
                    self.addToStack(file);
                    $container.addClass('file-thumb-loading');
                    self._previewDefault(file, previewId);
                    self._initFileActions();
                    self._updateFileDetails(numFiles);
                    readFile(i + 1);
                    return;
                }
                if ($preview.length && FileReader !== undefined) {
                    $status.html(msgLoading.replace('{index}', i + 1).replace('{files}', numFiles));
                    $container.addClass('file-thumb-loading');
                    reader.onerror = function (evt) {
                        self._errorHandler(evt, caption);
                    };
                    reader.onload = function (theFile) {
                        self._previewFile(i, file, theFile, previewId, previewData);
                        self._initFileActions();
                    };
                    reader.onloadend = function () {
                        msg = msgProgress.replace('{index}', i + 1).replace('{files}', numFiles)
                            .replace('{percent}', 50).replace('{name}', caption);
                        setTimeout(function () {
                            $status.html(msg);
                            self._updateFileDetails(numFiles);
                            readFile(i + 1);
                        }, 100);
                        self._raise('fileloaded', [file, previewId, i, reader]);
                    };
                    reader.onprogress = function (data) {
                        if (data.lengthComputable) {
                            var fact = (data.loaded / data.total) * 100, progress = Math.ceil(fact);
                            msg = msgProgress.replace('{index}', i + 1).replace('{files}', numFiles)
                                .replace('{percent}', progress).replace('{name}', caption);
                            setTimeout(function () {
                                $status.html(msg);
                            }, 100);
                        }
                    };
                    isText = ifSet('text', settings, defaultFileTypeSettings.text);
                    isImage = ifSet('image', settings, defaultFileTypeSettings.image);

                    if (isText(file.type, caption)) {
                        reader.readAsText(file, self.textEncoding);
                    } else {
                        if (isImage(file.type, caption)) {
                            reader.readAsDataURL(file);
                        } else {
                            reader.readAsArrayBuffer(file);
                        }
                    }
                } else {
                    self._previewDefault(file, previewId);
                    setTimeout(function () {
                        readFile(i + 1);
                        self._updateFileDetails(numFiles);
                    }, 100);
                    self._raise('fileloaded', [file, previewId, i, reader]);
                }
                self.addToStack(file);
            };

            readFile(0);
            self._updateFileDetails(numFiles, false);
        },
        _updateFileDetails: function (numFiles) {
            var self = this, $el = self.$element, fileStack = self.getFileStack(),
                name = (isIE(9) && findFileName($el.val())) ||
                    ($el[0].files[0] && $el[0].files[0].name) || (fileStack.length && fileStack[0].name) || '',
                label = self.slug(name), n = self.isUploadable ? fileStack.length : numFiles,
                nFiles = previewCache.count(self.id) + n, log = n > 1 ? self._getMsgSelected(nFiles) : label;
            if (self.isError) {
                self.$previewContainer.removeClass('file-thumb-loading');
                self.$previewStatus.html('');
                self.$captionContainer.find('.kv-caption-icon').hide();
            } else {
                self._showFileIcon();
            }
            self._setCaption(log, self.isError);
            self.$container.removeClass('file-input-new file-input-ajax-new');
            if (arguments.length === 1) {
                self._raise('fileselect', [numFiles, label]);
            }
            if (previewCache.count(self.id)) {
                self._initPreviewActions();
            }
        },
        _setThumbStatus: function ($thumb, status) {
            var self = this;
            if (!self.showPreview) {
                return;
            }
            var icon = 'indicator' + status, msg = icon + 'Title',
                css = 'file-preview-' + status.toLowerCase(),
                $indicator = $thumb.find('.file-upload-indicator'),
                config = self.fileActionSettings;
            $thumb.removeClass('file-preview-success file-preview-error file-preview-loading');
            if (status === 'Error') {
                $thumb.find('.kv-file-upload').attr('disabled', true);
            }
            if (status === 'Success') {
                $thumb.find('.file-drag-handle').remove();
                $indicator.css('margin-left', 0);
            }
            $indicator.html(config[icon]);
            $indicator.attr('title', config[msg]);
            $thumb.addClass(css);
        },
        _setProgressCancelled: function () {
            var self = this;
            self._setProgress(100, self.$progress, self.msgCancelled);
        },
        _setProgress: function (p, $el, error) {
            var self = this, pct = Math.min(p, 100), template = pct < 100 ? self.progressTemplate :
                (error ? self.progressErrorTemplate : self.progressCompleteTemplate);
            $el = $el || self.$progress;
            if (!isEmpty(template)) {
                $el.html(template.replace(/\{percent}/g, pct));
                if (error) {
                    $el.find('[role="progressbar"]').html(error);
                }
            }
        },
        _setFileDropZoneTitle: function () {
            var self = this, $zone = self.$container.find('.file-drop-zone'), title = self.dropZoneTitle, strFiles;
            if (self.isClickable) {
                strFiles = isEmpty(self.$element.attr('multiple')) ? self.fileSingle : self.filePlural;
                title += self.dropZoneClickTitle.replace('{files}', strFiles);
            }
            $zone.find('.' + self.dropZoneTitleClass).remove();
            if (!self.isUploadable || !self.showPreview || $zone.length === 0 || self.getFileStack().length > 0 || !self.dropZoneEnabled) {
                return;
            }
            if ($zone.find('.file-preview-frame').length === 0 && isEmpty(self.defaultPreviewContent)) {
                $zone.prepend('<div class="' + self.dropZoneTitleClass + '">' + title + '</div>');
            }
            self.$container.removeClass('file-input-new');
            addCss(self.$container, 'file-input-ajax-new');
        },
        _setAsyncUploadStatus: function (previewId, pct, total) {
            var self = this, sum = 0;
            self._setProgress(pct, $('#' + previewId).find('.file-thumb-progress'));
            self.uploadStatus[previewId] = pct;
            $.each(self.uploadStatus, function (key, value) {
                sum += value;
            });
            self._setProgress(Math.ceil(sum / total));

        },
        _validateMinCount: function () {
            var self = this, len = self.isUploadable ? self.getFileStack().length : self.$element.get(0).files.length;
            if (self.validateInitialCount && self.minFileCount > 0 && self._getFileCount(
                    len - 1) < self.minFileCount) {
                self._noFilesError({});
                return false;
            }
            return true;
        },
        _getFileCount: function (fileCount) {
            var self = this, addCount = 0;
            if (self.validateInitialCount && !self.overwriteInitial) {
                addCount = previewCache.count(self.id);
                fileCount += addCount;
            }
            return fileCount;
        },
        _getFileName: function (file) {
            return file && file.name ? this.slug(file.name) : undefined;
        },
        _getFileNames: function (skipNull) {
            var self = this;
            return self.filenames.filter(function (n) {
                return (skipNull ? n !== undefined : n !== undefined && n !== null);
            });
        },
        _setPreviewError: function ($thumb, i, val) {
            var self = this;
            if (i !== undefined) {
                self.updateStack(i, val);
            }
            if (self.removeFromPreviewOnError) {
                $thumb.remove();
            } else {
                self._setThumbStatus($thumb, 'Error');
            }
        },
        _checkDimensions: function (i, chk, $img, $thumb, fname, type, params) {
            var self = this, msg, dim, tag = chk === 'Small' ? 'min' : 'max', limit = self[tag + 'Image' + type],
                $imgEl, isValid;
            if (isEmpty(limit) || !$img.length) {
                return;
            }
            $imgEl = $img[0];
            dim = (type === 'Width') ? $imgEl.naturalWidth || $imgEl.width : $imgEl.naturalHeight || $imgEl.height;
            isValid = chk === 'Small' ? dim >= limit : dim <= limit;
            if (isValid) {
                return;
            }
            msg = self['msgImage' + type + chk].replace('{name}', fname).replace('{size}', limit);
            self._showUploadError(msg, params);
            self._setPreviewError($thumb, i, null);
        },
        _validateImage: function (i, previewId, fname, ftype) {
            var self = this, $preview = self.$preview, params, w1, w2,
                $thumb = $preview.find("#" + previewId), $img = $thumb.find('img');
            fname = fname || 'Untitled';
            if (!$img.length) {
                return;
            }
            handler($img, 'load', function () {
                w1 = $thumb.width();
                w2 = $preview.width();
                if (w1 > w2) {
                    $img.css('width', '100%');
                    $thumb.css('width', '97%');
                }
                params = {ind: i, id: previewId};
                self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Width', params);
                self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Height', params);
                if (!self.resizeImage) {
                    self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Width', params);
                    self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Height', params);
                }
                self._raise('fileimageloaded', [previewId]);
                self.loadedImages.push({ind: i, img: $img, thumb: $thumb, pid: previewId, typ: ftype});
                self._validateAllImages();
                objUrl.revokeObjectURL($img.attr('src'));
            });
        },
        _validateAllImages: function () {
            var self = this, i, config, $img, $thumb, pid, ind, params = {}, errFunc;
            if (self.loadedImages.length !== self.totalImagesCount) {
                return;
            }
            self._raise('fileimagesloaded');
            if (!self.resizeImage) {
                return;
            }
            errFunc = self.isUploadable ? self._showUploadError : self._showError;
            for (i = 0; i < self.loadedImages.length; i++) {
                config = self.loadedImages[i];
                $img = config.img;
                $thumb = config.thumb;
                pid = config.pid;
                ind = config.ind;
                params = {id: pid, 'index': ind};
                if (!self._getResizedImage($img[0], config.typ, pid, ind)) {
                    errFunc(self.msgImageResizeError, params, 'fileimageresizeerror');
                    self._setPreviewError($thumb, ind);
                }
            }
            self._raise('fileimagesresized');
        },
        _getResizedImage: function (image, type, pid, ind) {
            var self = this, width = image.naturalWidth, height = image.naturalHeight, ratio = 1,
                maxWidth = self.maxImageWidth || width, maxHeight = self.maxImageHeight || height,
                isValidImage = (width && height), chkWidth, chkHeight,
                canvas = self.imageCanvas, context = self.imageCanvasContext;
            if (!isValidImage) {
                return false;
            }
            if (width === maxWidth && height === maxHeight) {
                return true;
            }
            type = type || self.resizeDefaultImageType;
            chkWidth = width > maxWidth;
            chkHeight = height > maxHeight;
            if (self.resizePreference === 'width') {
                ratio = chkWidth ? maxWidth / width : (chkHeight ? maxHeight / height : 1);
            } else {
                ratio = chkHeight ? maxHeight / height : (chkWidth ? maxWidth / width : 1);
            }
            self._resetCanvas();
            width *= ratio;
            height *= ratio;
            canvas.width = width;
            canvas.height = height;
            try {
                context.drawImage(image, 0, 0, width, height);
                canvas.toBlob(function (blob) {
                    self._raise('fileimageresized', [pid, ind]);
                    self.filestack[ind] = blob;
                }, type, self.resizeQuality);
                return true;
            }
            catch (err) {
                return false;
            }
        },
        _initBrowse: function ($container) {
            var self = this;
            if (self.showBrowse) {
                self.$btnFile = $container.find('.btn-file');
                self.$btnFile.append(self.$element);
            } else {
                self.$element.hide();
            }
        },
        _initCaption: function () {
            var self = this, cap = self.initialCaption || '';
            if (self.overwriteInitial || isEmpty(cap)) {
                self.$caption.html('');
                return false;
            }
            self._setCaption(cap);
            return true;
        },
        _setCaption: function (content, isError) {
            var self = this, title, out, n, cap, stack = self.getFileStack();
            if (!self.$caption.length) {
                return;
            }
            if (isError) {
                title = $('<div>' + self.msgValidationError + '</div>').text();
                n = stack.length;
                if (n) {
                    cap = n === 1 && stack[0] ? self._getFileNames()[0] : self._getMsgSelected(n);
                } else {
                    cap = self._getMsgSelected(self.msgNo);
                }
                out = '<span class="' + self.msgValidationErrorClass + '">' + self.msgValidationErrorIcon +
                    (isEmpty(content) ? cap : content) + '</span>';
            } else {
                if (isEmpty(content)) {
                    return;
                }
                title = $('<div>' + content + '</div>').text();
                out = self._getLayoutTemplate('fileIcon') + title;
            }
            self.$caption.html(out);
            self.$caption.attr('title', title);
            self.$captionContainer.find('.file-caption-ellipsis').attr('title', title);
        },
        _createContainer: function () {
            var self = this, $container = $(document.createElement("div"))
                .attr({"class": 'file-input file-input-new'})
                .html(self._renderMain());
            self.$element.before($container);
            self._initBrowse($container);
            if (self.theme) {
                $container.addClass('theme-' + self.theme);
            }
            return $container;
        },
        _refreshContainer: function () {
            var self = this, $container = self.$container;
            $container.before(self.$element);
            $container.html(self._renderMain());
            self._initBrowse($container);
        },
        _renderMain: function () {
            var self = this, dropCss = (self.isUploadable && self.dropZoneEnabled) ? ' file-drop-zone' : 'file-drop-disabled',
                close = !self.showClose ? '' : self._getLayoutTemplate('close'),
                preview = !self.showPreview ? '' : self._getLayoutTemplate('preview')
                    .replace(/\{class}/g, self.previewClass)
                    .replace(/\{dropClass}/g, dropCss),
                css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,
                caption = self.captionTemplate.replace(/\{class}/g, css + ' kv-fileinput-caption');
            return self.mainTemplate.replace(/\{class}/g, self.mainClass +
                (!self.showBrowse && self.showCaption ? ' no-browse' : ''))
                .replace(/\{preview}/g, preview)
                .replace(/\{close}/g, close)
                .replace(/\{caption}/g, caption)
                .replace(/\{upload}/g, self._renderButton('upload'))
                .replace(/\{remove}/g, self._renderButton('remove'))
                .replace(/\{cancel}/g, self._renderButton('cancel'))
                .replace(/\{browse}/g, self._renderButton('browse'));
        },
        _renderButton: function (type) {
            var self = this, tmplt = self._getLayoutTemplate('btnDefault'), css = self[type + 'Class'],
                title = self[type + 'Title'], icon = self[type + 'Icon'], label = self[type + 'Label'],
                status = self.isDisabled ? ' disabled' : '', btnType = 'button';
            switch (type) {
                case 'remove':
                    if (!self.showRemove) {
                        return '';
                    }
                    break;
                case 'cancel':
                    if (!self.showCancel) {
                        return '';
                    }
                    css += ' hide';
                    break;
                case 'upload':
                    if (!self.showUpload) {
                        return '';
                    }
                    if (self.isUploadable && !self.isDisabled) {
                        tmplt = self._getLayoutTemplate('btnLink').replace('{href}', self.uploadUrl);
                    } else {
                        btnType = 'submit';
                    }
                    break;
                case 'browse':
                    if (!self.showBrowse) {
                        return '';
                    }
                    tmplt = self._getLayoutTemplate('btnBrowse');
                    break;
                default:
                    return '';
            }

            css += type === 'browse' ? ' btn-file' : ' fileinput-' + type + ' fileinput-' + type + '-button';
            if (!isEmpty(label)) {
                label = ' <span class="' + self.buttonLabelClass + '">' + label + '</span>';
            }
            return tmplt.replace('{type}', btnType).replace('{css}', css).replace('{title}', title)
                .replace('{status}', status).replace('{icon}', icon).replace('{label}', label);
        },
        _renderThumbProgress: function () {
            return '<div class="file-thumb-progress hide">' + this.progressTemplate.replace(/\{percent}/g,
                    '0') + '</div>';
        },
        _renderFileFooter: function (caption, size, width, isError) {
            var self = this, config = self.fileActionSettings, rem = config.showRemove, drg = config.showDrag,
                upl = config.showUpload, zoom = config.showZoom, out, template = self._getLayoutTemplate('footer'),
                indicator = isError ? config.indicatorError : config.indicatorNew,
                title = isError ? config.indicatorErrorTitle : config.indicatorNewTitle;
            size = self._getSize(size);
            if (self.isUploadable) {
                out = template.replace(/\{actions}/g, self._renderFileActions(upl, rem, zoom, drg, false, false, false))
                    .replace(/\{caption}/g, caption).replace(/\{size}/g, size).replace(/\{width}/g, width)
                    .replace(/\{progress}/g, self._renderThumbProgress()).replace(/\{indicator}/g, indicator)
                    .replace(/\{indicatorTitle}/g, title);
            } else {
                out = template.replace(/\{actions}/g,
                    self._renderFileActions(false, false, zoom, drg, false, false, false))
                    .replace(/\{caption}/g, caption).replace(/\{size}/g, size).replace(/\{width}/g, width)
                    .replace(/\{progress}/g, '').replace(/\{indicator}/g, indicator)
                    .replace(/\{indicatorTitle}/g, title);
            }
            out = replaceTags(out, self.previewThumbTags);
            return out;
        },
        _renderFileActions: function (showUpload, showDelete, showZoom, showDrag, disabled, url, key, isInit) {
            if (!showUpload && !showDelete && !showZoom && !showDrag) {
                return '';
            }
            var self = this,
                vUrl = url === false ? '' : ' data-url="' + url + '"',
                vKey = key === false ? '' : ' data-key="' + key + '"',
                btnDelete = '', btnUpload = '', btnZoom = '', btnDrag = '', css,
                template = self._getLayoutTemplate('actions'), config = self.fileActionSettings,
                otherButtons = self.otherActionButtons.replace(/\{dataKey}/g, vKey),
                removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;
            if (showDelete) {
                btnDelete = self._getLayoutTemplate('actionDelete')
                    .replace(/\{removeClass}/g, removeClass)
                    .replace(/\{removeIcon}/g, config.removeIcon)
                    .replace(/\{removeTitle}/g, config.removeTitle)
                    .replace(/\{dataUrl}/g, vUrl)
                    .replace(/\{dataKey}/g, vKey);
            }
            if (showUpload) {
                btnUpload = self._getLayoutTemplate('actionUpload')
                    .replace(/\{uploadClass}/g, config.uploadClass)
                    .replace(/\{uploadIcon}/g, config.uploadIcon)
                    .replace(/\{uploadTitle}/g, config.uploadTitle);
            }
            if (showZoom) {
                btnZoom = self._getLayoutTemplate('actionZoom')
                    .replace(/\{zoomClass}/g, config.zoomClass)
                    .replace(/\{zoomIcon}/g, config.zoomIcon)
                    .replace(/\{zoomTitle}/g, config.zoomTitle);
            }
            if (showDrag && isInit) {
                css = 'drag-handle-init ' + config.dragClass;
                btnDrag = self._getLayoutTemplate('actionDrag').replace(/\{dragClass}/g, css)
                    .replace(/\{dragTitle}/g, config.dragTitle)
                    .replace(/\{dragIcon}/g, config.dragIcon);
            }
            return template.replace(/\{delete}/g, btnDelete)
                .replace(/\{upload}/g, btnUpload)
                .replace(/\{zoom}/g, btnZoom)
                .replace(/\{drag}/g, btnDrag)
                .replace(/\{other}/g, otherButtons);
        },
        _browse: function (e) {
            var self = this;
            self._raise('filebrowse');
            if (e && e.isDefaultPrevented()) {
                return;
            }
            if (self.isError && !self.isUploadable) {
                self.clear();
            }
            self.$captionContainer.focus();
        },
        _change: function (e) {
            var self = this, $el = self.$element;
            if (!self.isUploadable && isEmpty($el.val()) && self.fileInputCleared) { // IE 11 fix
                self.fileInputCleared = false;
                return;
            }
            self.fileInputCleared = false;
            var tfiles, msg, total, isDragDrop = arguments.length > 1, isAjaxUpload = self.isUploadable, i = 0, f, n, len,
                files = isDragDrop ? e.originalEvent.dataTransfer.files : $el.get(0).files, ctr = self.filestack.length,
                isSingleUpload = isEmpty($el.attr('multiple')), flagSingle = (isSingleUpload && ctr > 0), folders = 0,
                throwError = function (mesg, file, previewId, index) {
                    var p1 = $.extend(true, {}, self._getOutData({}, {}, files), {id: previewId, index: index}),
                        p2 = {id: previewId, index: index, file: file, files: files};
                    return self.isUploadable ? self._showUploadError(mesg, p1) : self._showError(mesg, p2);
                };
            self.reader = null;
            self._resetUpload();
            self._hideFileIcon();
            if (self.isUploadable) {
                self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();
            }
            if (isDragDrop) {
                tfiles = [];
                while (files[i]) {
                    f = files[i];
                    if (!f.type && f.size % 4096 === 0) {
                        folders++;
                    } else {
                        tfiles.push(f);
                    }
                    i++;
                }
            } else {
                if (e.target.files === undefined) {
                    tfiles = e.target && e.target.value ? [
                        {name: e.target.value.replace(/^.+\\/, '')}
                    ] : [];
                } else {
                    tfiles = e.target.files;
                }
            }
            if (isEmpty(tfiles) || tfiles.length === 0) {
                if (!isAjaxUpload) {
                    self.clear();
                }
                self._showFolderError(folders);
                self._raise('fileselectnone');
                return;
            }
            self._resetErrors();
            len = tfiles.length;
            total = self._getFileCount(self.isUploadable ? (self.getFileStack().length + len) : len);
            if (self.maxFileCount > 0 && total > self.maxFileCount) {
                if (!self.autoReplace || len > self.maxFileCount) {
                    n = (self.autoReplace && len > self.maxFileCount) ? len : total;
                    msg = self.msgFilesTooMany.replace('{m}', self.maxFileCount).replace('{n}', n);
                    self.isError = throwError(msg, null, null, null);
                    self.$captionContainer.find('.kv-caption-icon').hide();
                    self._setCaption('', true);
                    self.$container.removeClass('file-input-new file-input-ajax-new');
                    return;
                }
                if (total > self.maxFileCount) {
                    self._resetPreviewThumbs(isAjaxUpload);
                }
            } else {
                if (!isAjaxUpload || flagSingle) {
                    self._resetPreviewThumbs(false);
                    if (flagSingle) {
                        self.clearStack();
                    }
                } else {
                    if (isAjaxUpload && ctr === 0 && (!previewCache.count(self.id) || self.overwriteInitial)) {
                        self._resetPreviewThumbs(true);
                    }
                }
            }
            if (self.isPreviewable) {
                self._readFiles(tfiles);
            } else {
                self._updateFileDetails(1);
            }
            self._showFolderError(folders);
        },
        _abort: function (params) {
            var self = this, data;
            if (self.ajaxAborted && typeof self.ajaxAborted === "object" && self.ajaxAborted.message !== undefined) {
                data = $.extend(true, {}, self._getOutData(), params);
                data.abortData = self.ajaxAborted.data || {};
                data.abortMessage = self.ajaxAborted.message;
                self.cancel();
                self._setProgress(100, self.$progress, self.msgCancelled);
                self._showUploadError(self.ajaxAborted.message, data, 'filecustomerror');
                return true;
            }
            return false;
        },
        _resetFileStack: function () {
            var self = this, i = 0, newstack = [], newnames = [];
            self._getThumbs().each(function () {
                var $thumb = $(this), ind = $thumb.attr('data-fileindex'),
                    file = self.filestack[ind];
                if (ind === -1) {
                    return;
                }
                if (file !== undefined) {
                    newstack[i] = file;
                    newnames[i] = self._getFileName(file);
                    $thumb.attr({
                        'id': self.previewInitId + '-' + i,
                        'data-fileindex': i
                    });
                    i++;
                } else {
                    $thumb.attr({
                        'id': 'uploaded-' + uniqId(),
                        'data-fileindex': '-1'
                    });
                }
            });
            self.filestack = newstack;
            self.filenames = newnames;
        },
        clearStack: function () {
            var self = this;
            self.filestack = [];
            self.filenames = [];
            return self.$element;
        },
        updateStack: function (i, file) {
            var self = this;
            self.filestack[i] = file;
            self.filenames[i] = self._getFileName(file);
            return self.$element;
        },
        addToStack: function (file) {
            var self = this;
            self.filestack.push(file);
            self.filenames.push(self._getFileName(file));
            return self.$element;
        },
        getFileStack: function (skipNull) {
            var self = this;
            return self.filestack.filter(function (n) {
                return (skipNull ? n !== undefined : n !== undefined && n !== null);
            });
        },
        lock: function () {
            var self = this;
            self._resetErrors();
            self.disable();
            if (self.showRemove) {
                addCss(self.$container.find('.fileinput-remove'), 'hide');
            }
            if (self.showCancel) {
                self.$container.find('.fileinput-cancel').removeClass('hide');
            }
            self._raise('filelock', [self.filestack, self._getExtraData()]);
            return self.$element;
        },
        unlock: function (reset) {
            var self = this;
            if (reset === undefined) {
                reset = true;
            }
            self.enable();
            if (self.showCancel) {
                addCss(self.$container.find('.fileinput-cancel'), 'hide');
            }
            if (self.showRemove) {
                self.$container.find('.fileinput-remove').removeClass('hide');
            }
            if (reset) {
                self._resetFileStack();
            }
            self._raise('fileunlock', [self.filestack, self._getExtraData()]);
            return self.$element;
        },
        cancel: function () {
            var self = this, xhr = self.ajaxRequests, len = xhr.length, i;
            if (len > 0) {
                for (i = 0; i < len; i += 1) {
                    self.cancelling = true;
                    xhr[i].abort();
                }
            }
            self._setProgressCancelled();
            self._getThumbs().each(function () {
                var $thumb = $(this), ind = $thumb.attr('data-fileindex');
                $thumb.removeClass('file-uploading');
                if (self.filestack[ind] !== undefined) {
                    $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');
                    $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');
                }
                self.unlock();
            });
            return self.$element;
        },
        clear: function () {
            var self = this, cap;
            self.$btnUpload.removeAttr('disabled');
            self._getThumbs().find('video,audio,img').each(function () {
                cleanMemory($(this));
            });
            self._resetUpload();
            self.clearStack();
            self._clearFileInput();
            self._resetErrors(true);
            self._raise('fileclear');
            if (self._hasInitialPreview()) {
                self._showFileIcon();
                self._resetPreview();
                self._initPreviewActions();
                self.$container.removeClass('file-input-new');
            } else {
                self._getThumbs().each(function () {
                    self._clearObjects($(this));
                });
                if (self.isUploadable) {
                    previewCache.data[self.id] = {};
                }
                self.$preview.html('');
                cap = (!self.overwriteInitial && self.initialCaption.length > 0) ? self.initialCaption : '';
                self._setCaption(cap);
                self.$caption.attr('title', '');
                addCss(self.$container, 'file-input-new');
                self._validateDefaultPreview();
            }
            if (self.$container.find('.file-preview-frame').length === 0) {
                if (!self._initCaption()) {
                    self.$captionContainer.find('.kv-caption-icon').hide();
                }
            }
            self._hideFileIcon();
            self._raise('filecleared');
            self.$captionContainer.focus();
            self._setFileDropZoneTitle();
            return self.$element;
        },
        reset: function () {
            var self = this;
            self._resetPreview();
            self.$container.find('.fileinput-filename').text('');
            self._raise('filereset');
            addCss(self.$container, 'file-input-new');
            if (self.$preview.find('.file-preview-frame').length || self.isUploadable && self.dropZoneEnabled) {
                self.$container.removeClass('file-input-new');
            }
            self._setFileDropZoneTitle();
            self.clearStack();
            self.formdata = {};
            return self.$element;
        },
        disable: function () {
            var self = this;
            self.isDisabled = true;
            self._raise('filedisabled');
            self.$element.attr('disabled', 'disabled');
            self.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");
            self.$container.find(".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button").attr(
                "disabled",
                true);
            self._initDragDrop();
            return self.$element;
        },
        enable: function () {
            var self = this;
            self.isDisabled = false;
            self._raise('fileenabled');
            self.$element.removeAttr('disabled');
            self.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");
            self.$container.find(
                ".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button").removeAttr("disabled");
            self._initDragDrop();
            return self.$element;
        },
        upload: function () {
            var self = this, totLen = self.getFileStack().length, params = {},
                i, outData, len, hasExtraData = !$.isEmptyObject(self._getExtraData());
            if (self.minFileCount > 0 && self._getFileCount(totLen) < self.minFileCount) {
                self._noFilesError(params);
                return;
            }
            if (!self.isUploadable || self.isDisabled || (totLen === 0 && !hasExtraData)) {
                return;
            }
            self._resetUpload();
            self.$progress.removeClass('hide');
            self.uploadCount = 0;
            self.uploadStatus = {};
            self.uploadLog = [];
            self.lock();
            self._setProgress(2);
            if (totLen === 0 && hasExtraData) {
                self._uploadExtraOnly();
                return;
            }
            len = self.filestack.length;
            self.hasInitData = false;
            if (self.uploadAsync) {
                outData = self._getOutData();
                self._raise('filebatchpreupload', [outData]);
                self.fileBatchCompleted = false;
                self.uploadCache = {content: [], config: [], tags: [], append: true};
                self.uploadAsyncCount = self.getFileStack().length;
                for (i = 0; i < len; i++) {
                    self.uploadCache.content[i] = null;
                    self.uploadCache.config[i] = null;
                    self.uploadCache.tags[i] = null;
                }
                for (i = 0; i < len; i++) {
                    if (self.filestack[i] !== undefined) {
                        self._uploadSingle(i, self.filestack, true);
                    }
                }
                return;
            }
            self._uploadBatch();
            return self.$element;
        },
        destroy: function () {
            var self = this, $cont = self.$container;
            $cont.find('.file-drop-zone').off();
            self.$element.insertBefore($cont).off(NAMESPACE).removeData();
            $cont.off().remove();
            return self.$element;
        },
        refresh: function (options) {
            var self = this, $el = self.$element;
            options = options ? $.extend(true, {}, self.options, options) : self.options;
            self.destroy();
            $el.fileinput(options);
            if ($el.val()) {
                $el.trigger('change.fileinput');
            }
            return $el;
        }
    };

    $.fn.fileinput = function (option) {
        if (!hasFileAPISupport() && !isIE(9)) {
            return;
        }
        var args = Array.apply(null, arguments), retvals = [];
        args.shift();
        this.each(function () {
            var self = $(this), data = self.data('fileinput'), options = typeof option === 'object' && option,
                theme = options.theme || self.data('theme'), l = {}, t = {},
                lang = options.language || self.data('language') || 'en', opts;
            if (!data) {
                if (theme) {
                    t = $.fn.fileinputThemes[theme] || {};
                }
                if (lang !== 'en' && !isEmpty($.fn.fileinputLocales[lang])) {
                    l = $.fn.fileinputLocales[lang] || {};
                }
                opts = $.extend(true, {}, $.fn.fileinput.defaults, t, $.fn.fileinputLocales.en, l, options,
                    self.data());
                data = new FileInput(this, opts);
                self.data('fileinput', data);
            }

            if (typeof option === 'string') {
                retvals.push(data[option].apply(data, args));
            }
        });
        switch (retvals.length) {
            case 0:
                return this;
            case 1:
                return retvals[0];
            default:
                return retvals;
        }
    };

    $.fn.fileinput.defaults = {
        language: 'en',
        showCaption: true,
        showBrowse: true,
        showPreview: true,
        showRemove: true,
        showUpload: true,
        showCancel: true,
        showClose: true,
        showUploadedThumbs: true,
        browseOnZoneClick: false,
        autoReplace: false,
        previewClass: '',
        captionClass: '',
        mainClass: 'file-caption-main',
        mainTemplate: null,
        purifyHtml: true,
        fileSizeGetter: null,
        initialCaption: '',
        initialPreview: [],
        initialPreviewDelimiter: '*$$*',
        initialPreviewAsData: false,
        initialPreviewFileType: 'image',
        initialPreviewConfig: [],
        initialPreviewThumbTags: [],
        previewThumbTags: {},
        initialPreviewShowDelete: true,
        removeFromPreviewOnError: false,
        deleteUrl: '',
        deleteExtraData: {},
        overwriteInitial: true,
        layoutTemplates: defaultLayoutTemplates,
        previewTemplates: defaultPreviewTemplates,
        previewZoomSettings: defaultPreviewZoomSettings,
        previewZoomButtonIcons: {
            prev: '<i class="glyphicon glyphicon-triangle-left"></i>',
            next: '<i class="glyphicon glyphicon-triangle-right"></i>',
            toggleheader: '<i class="glyphicon glyphicon-resize-vertical"></i>',
            fullscreen: '<i class="glyphicon glyphicon-fullscreen"></i>',
            borderless: '<i class="glyphicon glyphicon-resize-full"></i>',
            close: '<i class="glyphicon glyphicon-remove"></i>'
        },
        previewZoomButtonClasses: {
            prev: 'btn btn-navigate',
            next: 'btn btn-navigate',
            toggleheader: 'btn btn-default btn-header-toggle',
            fullscreen: 'btn btn-default',
            borderless: 'btn btn-default',
            close: 'btn btn-default'
        },
        allowedPreviewTypes: defaultPreviewTypes,
        allowedPreviewMimeTypes: null,
        allowedFileTypes: null,
        allowedFileExtensions: null,
        defaultPreviewContent: null,
        customLayoutTags: {},
        customPreviewTags: {},
        previewSettings: defaultPreviewSettings,
        fileTypeSettings: defaultFileTypeSettings,
        previewFileIcon: '<i class="glyphicon glyphicon-file"></i>',
        previewFileIconClass: 'file-other-icon',
        previewFileIconSettings: {},
        previewFileExtSettings: {},
        buttonLabelClass: 'hidden-xs',
        browseIcon: '<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',
        browseClass: 'btn btn-primary',
        removeIcon: '<i class="glyphicon glyphicon-trash"></i>',
        removeClass: 'btn btn-default',
        cancelIcon: '<i class="glyphicon glyphicon-ban-circle"></i>',
        cancelClass: 'btn btn-default',
        uploadIcon: '<i class="glyphicon glyphicon-upload"></i>',
        uploadClass: 'btn btn-default',
        uploadUrl: null,
        uploadAsync: true,
        uploadExtraData: {},
        zoomModalHeight: 480,
        minImageWidth: null,
        minImageHeight: null,
        maxImageWidth: null,
        maxImageHeight: null,
        resizeImage: false,
        resizePreference: 'width',
        resizeQuality: 0.92,
        resizeDefaultImageType: 'image/jpeg',
        maxFileSize: 0,
        maxFilePreviewSize: 25600, // 25 MB
        minFileCount: 0,
        maxFileCount: 0,
        validateInitialCount: false,
        msgValidationErrorClass: 'text-danger',
        msgValidationErrorIcon: '<i class="glyphicon glyphicon-exclamation-sign"></i> ',
        msgErrorClass: 'file-error-message',
        progressThumbClass: "progress-bar progress-bar-success progress-bar-striped active",
        progressClass: "progress-bar progress-bar-success progress-bar-striped active",
        progressCompleteClass: "progress-bar progress-bar-success",
        progressErrorClass: "progress-bar progress-bar-danger",
        previewFileType: 'image',
        elCaptionContainer: null,
        elCaptionText: null,
        elPreviewContainer: null,
        elPreviewImage: null,
        elPreviewStatus: null,
        elErrorContainer: null,
        errorCloseButton: '<span class="close kv-error-close">&times;</span>',
        slugCallback: null,
        dropZoneEnabled: true,
        dropZoneTitleClass: 'file-drop-zone-title',
        fileActionSettings: {},
        otherActionButtons: '',
        textEncoding: 'UTF-8',
        ajaxSettings: {},
        ajaxDeleteSettings: {},
        showAjaxErrorDetails: true
    };

    $.fn.fileinputLocales.en = {
        fileSingle: 'file',
        filePlural: 'files',
        browseLabel: 'Browse &hellip;',
        removeLabel: 'Remove',
        removeTitle: 'Clear selected files',
        cancelLabel: 'Cancel',
        cancelTitle: 'Abort ongoing upload',
        uploadLabel: 'Upload',
        uploadTitle: 'Upload selected files',
        msgNo: 'No',
        msgNoFilesSelected: 'No files selected',
        msgCancelled: 'Cancelled',
        msgZoomModalHeading: 'Detailed Preview',
        msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',
        msgFilesTooLess: 'You must select at least <b>{n}</b> {files} to upload.',
        msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.',
        msgFileNotFound: 'File "{name}" not found!',
        msgFileSecured: 'Security restrictions prevent reading the file "{name}".',
        msgFileNotReadable: 'File "{name}" is not readable.',
        msgFilePreviewAborted: 'File preview aborted for "{name}".',
        msgFilePreviewError: 'An error occurred while reading the file "{name}".',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
        msgUploadAborted: 'The file upload was aborted',
        msgValidationError: 'Validation Error',
        msgLoading: 'Loading file {index} of {files} &hellip;',
        msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',
        msgSelected: '{n} {files} selected',
        msgFoldersNotAllowed: 'Drag & drop files only! {n} folder(s) dropped were skipped.',
        msgImageWidthSmall: 'Width of image file "{name}" must be at least {size} px.',
        msgImageHeightSmall: 'Height of image file "{name}" must be at least {size} px.',
        msgImageWidthLarge: 'Width of image file "{name}" cannot exceed {size} px.',
        msgImageHeightLarge: 'Height of image file "{name}" cannot exceed {size} px.',
        msgImageResizeError: 'Could not get the image dimensions to resize.',
        msgImageResizeException: 'Error while resizing the image.<pre>{errors}</pre>',
        dropZoneTitle: 'Drag & drop files here &hellip;',
        dropZoneClickTitle: '<br>(or click to select {files})',
        previewZoomButtonTitles: {
            prev: 'View previous file',
            next: 'View next file',
            toggleheader: 'Toggle header',
            fullscreen: 'Toggle full screen',
            borderless: 'Toggle borderless mode',
            close: 'Close detailed preview'
        }
    };

    $.fn.fileinput.Constructor = FileInput;

    /**
     * Convert automatically file inputs with class 'file' into a bootstrap fileinput control.
     */
//    $(document).ready(function () {
//        var $input = $('input.file[type=file]');
//        if ($input.length) {
//            $input.fileinput();
//        }
//    });
}));
/*!
 * FileInput Chinese Translations
 *
 * This file must be loaded after 'fileinput.js'. Patterns in braces '{}', or
 * any HTML markup tags in the messages must not be converted or translated.
 *
 * @see http://github.com/kartik-v/bootstrap-fileinput
 * @author kangqf <kangqingfei@gmail.com>
 *
 * NOTE: this file must be saved in UTF-8 encoding.
 */
(function ($) {
    "use strict";

    $.fn.fileinputLocales['zh'] = {
        fileSingle: '文件',
        filePlural: '多个文件',
        browseLabel: '选择 &hellip;',
        removeLabel: '移除',
        removeTitle: '清除选中文件',
        cancelLabel: '取消',
        cancelTitle: '取消进行中的上传',
        uploadLabel: '上传',
        uploadTitle: '上传选中文件',
        msgNo: '没有',
        msgNoFilesSelected: '',
        msgCancelled: '取消',
        msgZoomModalHeading: '详细预览',
        msgSizeTooLarge: '文件 "{name}" (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>.',
        msgFilesTooLess: '你必须选择最少 <b>{n}</b> {files} 来上传. ',
        msgFilesTooMany: '选择的上传文件个数 <b>({n})</b> 超出最大文件的限制个数 <b>{m}</b>.',
        msgFileNotFound: '文件 "{name}" 未找到!',
        msgFileSecured: '安全限制，为了防止读取文件 "{name}".',
        msgFileNotReadable: '文件 "{name}" 不可读.',
        msgFilePreviewAborted: '取消 "{name}" 的预览.',
        msgFilePreviewError: '读取 "{name}" 时出现了一个错误.',
        msgInvalidFileType: '不正确的类型 "{name}". 只支持 "{types}" 类型的文件.',
        msgInvalidFileExtension: '不正确的文件扩展名 "{name}". 只支持 "{extensions}" 的文件扩展名.',
        msgUploadAborted: '该文件上传被中止',
        msgValidationError: '验证错误',
        msgLoading: '加载第 {index} 文件 共 {files} &hellip;',
        msgProgress: '加载第 {index} 文件 共 {files} - {name} - {percent}% 完成.',
        msgSelected: '{n} {files} 选中',
        msgFoldersNotAllowed: '只支持拖拽文件! 跳过 {n} 拖拽的文件夹.',
        msgImageWidthSmall: '宽度的图像文件的"{name}"的必须是至少{size}像素.',
        msgImageHeightSmall: '图像文件的"{name}"的高度必须至少为{size}像素.',
        msgImageWidthLarge: '宽度的图像文件"{name}"不能超过{size}像素.',
        msgImageHeightLarge: '图像文件"{name}"的高度不能超过{size}像素.',
        msgImageResizeError: '无法获取的图像尺寸调整。',
        msgImageResizeException: '错误而调整图像大小。<pre>{errors}</pre>',
        dropZoneTitle: '拖拽文件到这里 &hellip;',
        dropZoneClickTitle: '<br>(or click to select {files})',
        fileActionSettings: {
            removeTitle: '删除文件',
            uploadTitle: '上传文件',
            zoomTitle: '查看详情',
            dragTitle: 'Move / Rearrange',
            indicatorNewTitle: '没有上传',
            indicatorSuccessTitle: '上传',
            indicatorErrorTitle: '上传错误',
            indicatorLoadingTitle: '上传 ...'
        },
        previewZoomButtonTitles: {
            prev: 'View previous file',
            next: 'View next file',
            toggleheader: 'Toggle header',
            fullscreen: 'Toggle full screen',
            borderless: 'Toggle borderless mode',
            close: 'Close detailed preview'
        }
    };
})(window.jQuery);
/*!
 * bootstrap-fileinput v4.3.4
 * http://plugins.krajee.com/file-input
 *
 * Font Awesome icon theme configuration for bootstrap-fileinput. Requires font awesome assets to be loaded.
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2016, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD 3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
(function ($) {
    "use strict";

    $.fn.fileinputThemes.fa = {
        fileActionSettings: {
            removeIcon: '<i class="fa fa-trash text-danger"></i>',
            uploadIcon: '<i class="fa fa-upload text-info"></i>',
            zoomIcon: '<i class="fa fa-search-plus"></i>',
            dragIcon: '<i class="fa fa-bars"></i>',
            indicatorNew: '<i class="fa fa-hand-o-down text-warning"></i>',
            indicatorSuccess: '<i class="fa fa-check-circle text-success"></i>',
            indicatorError: '<i class="fa fa-exclamation-circle text-danger"></i>',
            indicatorLoading: '<i class="fa fa-hand-o-up text-muted"></i>'
        },
        layoutTemplates: {
            fileIcon: '<i class="fa fa-file kv-caption-icon"></i> '
        },
        previewZoomButtonIcons: {
            prev: '<i class="fa fa-caret-left fa-lg"></i>',
            next: '<i class="fa fa-caret-right fa-lg"></i>',
            toggleheader: '<i class="fa fa-arrows-v"></i>',
            fullscreen: '<i class="fa fa-arrows-alt"></i>',
            borderless: '<i class="fa fa-external-link"></i>',
            close: '<i class="fa fa-remove"></i>'
        },
        previewFileIcon: '<i class="fa fa-file"></i>',
        browseIcon: '<i class="fa fa-folder-open"></i>',
        removeIcon: '<i class="fa fa-trash"></i>',
        cancelIcon: '<i class="fa fa-ban"></i>',
        uploadIcon: '<i class="fa fa-upload"></i>',
        msgValidationErrorIcon: '<i class="fa fa-exclamation-circle"></i> '
    };
})(window.jQuery);

; (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('jquery'));
    } else {
        root.sortable = factory(root.jQuery);
    }
}(this, function ($) {
    /*
     * HTML5 Sortable jQuery Plugin
     * https://github.com/voidberg/html5sortable
     *
     * Original code copyright 2012 Ali Farhadi.
     * This version is mantained by Alexandru Badiu <andu@ctrlz.ro> & Lukas Oppermann <lukas@vea.re>
     *
     *
     * Released under the MIT license.
     */
    'use strict';
    /*
     * variables global to the plugin
     */
    var dragging;
    var draggingHeight;
    var placeholders = $();
    var sortables = [];
    /*
     * remove event handlers from items
     * @param [jquery Collection] items
     * @info event.h5s (jquery way of namespacing events, to bind multiple handlers to the event)
     */
    var _removeItemEvents = function (items) {
        items.off('dragstart.h5s');
        items.off('dragend.h5s');
        items.off('selectstart.h5s');
        items.off('dragover.h5s');
        items.off('dragenter.h5s');
        items.off('drop.h5s');
    };
    /*
     * remove event handlers from sortable
     * @param [jquery Collection] sortable
     * @info event.h5s (jquery way of namespacing events, to bind multiple handlers to the event)
     */
    var _removeSortableEvents = function (sortable) {
        sortable.off('dragover.h5s');
        sortable.off('dragenter.h5s');
        sortable.off('drop.h5s');
    };
    /*
     * attache ghost to dataTransfer object
     * @param [event] original event
     * @param [object] ghost-object with item, x and y coordinates
     */
    var _attachGhost = function (event, ghost) {
        // this needs to be set for HTML5 drag & drop to work
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text', '');

        // check if setDragImage method is available
        if (event.dataTransfer.setDragImage) {
            event.dataTransfer.setDragImage(ghost.item, ghost.x, ghost.y);
        }
    };
    /**
     * _addGhostPos clones the dragged item and adds it as a Ghost item
     * @param [object] event - the event fired when dragstart is triggered
     * @param [object] ghost - .item = node, draggedItem = jQuery collection
     */
    var _addGhostPos = function (e, ghost) {
        if (!ghost.x) {
            ghost.x = parseInt(e.pageX - ghost.draggedItem.offset().left);
        }
        if (!ghost.y) {
            ghost.y = parseInt(e.pageY - ghost.draggedItem.offset().top);
        }
        return ghost;
    };
    /**
     * _makeGhost decides which way to make a ghost and passes it to attachGhost
     * @param [jQuery selection] $draggedItem - the item that the user drags
     */
    var _makeGhost = function ($draggedItem) {
        return {
            item: $draggedItem[0],
            draggedItem: $draggedItem
        };
    };
    /**
     * _getGhost constructs ghost and attaches it to dataTransfer
     * @param [event] event - the original drag event object
     * @param [jQuery selection] $draggedItem - the item that the user drags
     * @param [object] ghostOpt - the ghost options
     */
    // TODO: could $draggedItem be replaced by event.target in all instances
    var _getGhost = function (event, $draggedItem) {
        // add ghost item & draggedItem to ghost object
        var ghost = _makeGhost($draggedItem);
        // attach ghost position
        ghost = _addGhostPos(event, ghost);
        // attach ghost to dataTransfer
        _attachGhost(event, ghost);
    };
    /*
     * return options if not set on sortable already
     * @param [object] soptions
     * @param [object] options
     */
    var _getOptions = function (soptions, options) {
        if (typeof soptions === 'undefined') {
            return options;
        }
        return soptions;
    };
    /*
     * remove data from sortable
     * @param [jquery Collection] a single sortable
     */
    var _removeSortableData = function (sortable) {
        sortable.removeData('opts');
        sortable.removeData('connectWith');
        sortable.removeData('items');
        sortable.removeAttr('aria-dropeffect');
    };
    /*
     * remove data from items
     * @param [jquery Collection] items
     */
    var _removeItemData = function (items) {
        items.removeAttr('aria-grabbed');
        items.removeAttr('draggable');
        items.removeAttr('role');
    };
    /*
     * check if two lists are connected
     * @param [jquery Collection] items
     */
    var _listsConnected = function (curList, destList) {
        if (curList[0] === destList[0]) {
            return true;
        }
        if (curList.data('connectWith') !== undefined) {
            return curList.data('connectWith') === destList.data('connectWith');
        }
        return false;
    };
    /*
     * destroy the sortable
     * @param [jquery Collection] a single sortable
     */
    var _destroySortable = function (sortable) {
        var opts = sortable.data('opts') || {};
        var items = sortable.children(opts.items);
        var handles = opts.handle ? items.find(opts.handle) : items;
        // remove event handlers & data from sortable
        _removeSortableEvents(sortable);
        _removeSortableData(sortable);
        // remove event handlers & data from items
        handles.off('mousedown.h5s');
        _removeItemEvents(items);
        _removeItemData(items);
    };
    /*
     * enable the sortable
     * @param [jquery Collection] a single sortable
     */
    var _enableSortable = function (sortable) {
        var opts = sortable.data('opts');
        var items = sortable.children(opts.items);
        var handles = opts.handle ? items.find(opts.handle) : items;
        sortable.attr('aria-dropeffect', 'move');
        handles.attr('draggable', 'true');
        // IE FIX for ghost
        // can be disabled as it has the side effect that other events
        // (e.g. click) will be ignored
        var spanEl = (document || window.document).createElement('span');
        if (typeof spanEl.dragDrop === 'function' && !opts.disableIEFix) {
            handles.on('mousedown.h5s', function () {
                if (items.index(this) !== -1) {
                    this.dragDrop();
                } else {
                    $(this).parents(opts.items)[0].dragDrop();
                }
            });
        }
    };
    /*
     * disable the sortable
     * @param [jquery Collection] a single sortable
     */
    var _disableSortable = function (sortable) {
        var opts = sortable.data('opts');
        var items = sortable.children(opts.items);
        var handles = opts.handle ? items.find(opts.handle) : items;
        sortable.attr('aria-dropeffect', 'none');
        handles.attr('draggable', false);
        handles.off('mousedown.h5s');
    };
    /*
     * reload the sortable
     * @param [jquery Collection] a single sortable
     * @description events need to be removed to not be double bound
     */
    var _reloadSortable = function (sortable) {
        var opts = sortable.data('opts');
        var items = sortable.children(opts.items);
        var handles = opts.handle ? items.find(opts.handle) : items;
        // remove event handlers from items
        _removeItemEvents(items);
        handles.off('mousedown.h5s');
        // remove event handlers from sortable
        _removeSortableEvents(sortable);
    };
    /*
     * public sortable object
     * @param [object|string] options|method
     */
    var sortable = function (selector, options) {

        var $sortables = $(selector);
        var method = String(options);

        options = $.extend({
            connectWith: false,
            placeholder: null,
            // dragImage can be null or a jQuery element
            dragImage: null,
            disableIEFix: false,
            placeholderClass: 'sortable-placeholder',
            draggingClass: 'sortable-dragging',
            hoverClass: false
        }, options);

        /* TODO: maxstatements should be 25, fix and remove line below */
        /*jshint maxstatements:false */
        return $sortables.each(function () {

            var $sortable = $(this);

            if (/enable|disable|destroy/.test(method)) {
                sortable[method]($sortable);
                return;
            }

            // get options & set options on sortable
            options = _getOptions($sortable.data('opts'), options);
            $sortable.data('opts', options);
            // reset sortable
            _reloadSortable($sortable);
            // initialize
            var items = $sortable.children(options.items);
            var index;
            var startParent;
            var newParent;
            var placeholder = (options.placeholder === null) ? $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class="' + options.placeholderClass + '"/>') : $(options.placeholder).addClass(options.placeholderClass);

            // setup sortable ids
            if (!$sortable.attr('data-sortable-id')) {
                var id = sortables.length;
                sortables[id] = $sortable;
                $sortable.attr('data-sortable-id', id);
                items.attr('data-item-sortable-id', id);
            }

            $sortable.data('items', options.items);
            placeholders = placeholders.add(placeholder);
            if (options.connectWith) {
                $sortable.data('connectWith', options.connectWith);
            }

            _enableSortable($sortable);
            items.attr('role', 'option');
            items.attr('aria-grabbed', 'false');

            // Mouse over class
            if (options.hoverClass) {
                var hoverClass = 'sortable-over';
                if (typeof options.hoverClass === 'string') {
                    hoverClass = options.hoverClass;
                }

                items.hover(function () {
                    $(this).addClass(hoverClass);
                }, function () {
                    $(this).removeClass(hoverClass);
                });
            }

            // Handle drag events on draggable items
            items.on('dragstart.h5s', function (e) {
                e.stopImmediatePropagation();

                if (options.dragImage) {
                    _attachGhost(e.originalEvent, {
                        item: options.dragImage,
                        x: 0,
                        y: 0
                    });
                    console.log('WARNING: dragImage option is deprecated' +
                    ' and will be removed in the future!');
                } else {
                    // add transparent clone or other ghost to cursor
                    _getGhost(e.originalEvent, $(this), options.dragImage);
                }
                // cache selsection & add attr for dragging
                dragging = $(this);
                dragging.addClass(options.draggingClass);
                dragging.attr('aria-grabbed', 'true');
                // grab values
                index = dragging.index();
                draggingHeight = dragging.height();
                startParent = $(this).parent();
                // trigger sortstar update
                dragging.parent().triggerHandler('sortstart', {
                    item: dragging,
                    placeholder: placeholder,
                    startparent: startParent
                });
            });
            // Handle drag events on draggable items
            items.on('dragend.h5s', function () {
                if (!dragging) {
                    return;
                }
                // remove dragging attributes and show item
                dragging.removeClass(options.draggingClass);
                dragging.attr('aria-grabbed', 'false');
                dragging.show();

                placeholders.detach();
                newParent = $(this).parent();
                dragging.parent().triggerHandler('sortstop', {
                    item: dragging,
                    startparent: startParent,
                });
                if (index !== dragging.index() ||
                    startParent.get(0) !== newParent.get(0)) {
                    dragging.parent().triggerHandler('sortupdate', {
                        item: dragging,
                        index: newParent.children(newParent.data('items')).index(dragging),
                        oldindex: items.index(dragging),
                        elementIndex: dragging.index(),
                        oldElementIndex: index,
                        startparent: startParent,
                        endparent: newParent
                    });
                }
                dragging = null;
                draggingHeight = null;
            });
            // Handle drop event on sortable & placeholder
            // TODO: REMOVE placeholder?????
            $(this).add([placeholder]).on('drop.h5s', function (e) {
                if (!_listsConnected($sortable, $(dragging).parent())) {
                    return;
                }

                e.stopPropagation();
                placeholders.filter(':visible').after(dragging);
                dragging.trigger('dragend.h5s');
                return false;
            });

            // Handle dragover and dragenter events on draggable items
            items.add([this]).on('dragover.h5s dragenter.h5s', function (e) {
                if (!_listsConnected($sortable, $(dragging).parent())) {
                    return;
                }

                e.preventDefault();
                e.originalEvent.dataTransfer.dropEffect = 'move';
                if (items.is(this)) {
                    var thisHeight = $(this).height();
                    if (options.forcePlaceholderSize) {
                        placeholder.height(draggingHeight);
                    }

                    // Check if $(this) is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering
                    if (thisHeight > draggingHeight) {
                        // Dead zone?
                        var deadZone = thisHeight - draggingHeight;
                        var offsetTop = $(this).offset().top;
                        if (placeholder.index() < $(this).index() &&
                            e.originalEvent.pageY < offsetTop + deadZone) {
                            return false;
                        }
                        if (placeholder.index() > $(this).index() &&
                            e.originalEvent.pageY > offsetTop + thisHeight - deadZone) {
                            return false;
                        }
                    }

                    dragging.hide();
                    if (placeholder.index() < $(this).index()) {
                        $(this).after(placeholder);
                    } else {
                        $(this).before(placeholder);
                    }
                    placeholders.not(placeholder).detach();
                } else {
                    if (!placeholders.is(this) && !$(this).children(options.items).length) {
                        placeholders.detach();
                        $(this).append(placeholder);
                    }
                }
                return false;
            });
        });
    };

    sortable.destroy = function (sortable) {
        _destroySortable(sortable);
    };

    sortable.enable = function (sortable) {
        _enableSortable(sortable);
    };

    sortable.disable = function (sortable) {
        _disableSortable(sortable);
    };

    $.fn.sortable = function (options) {
        return sortable(this, options);
    };

    return sortable;
}));
/*!
 * iCheck v1.0.2, http://git.io/arlzeA
 * ===================================
 * Powerful jQuery and Zepto plugin for checkboxes and radio buttons customization
 *
 * (c) 2013 Damir Sultanov, http://fronteed.com
 * MIT Licensed
 */

(function($) {

  // Cached vars
  var _iCheck = 'iCheck',
    _iCheckHelper = _iCheck + '-helper',
    _checkbox = 'checkbox',
    _radio = 'radio',
    _checked = 'checked',
    _unchecked = 'un' + _checked,
    _disabled = 'disabled',
    _determinate = 'determinate',
    _indeterminate = 'in' + _determinate,
    _update = 'update',
    _type = 'type',
    _click = 'click',
    _touch = 'touchbegin.i touchend.i',
    _add = 'addClass',
    _remove = 'removeClass',
    _callback = 'trigger',
    _label = 'label',
    _cursor = 'cursor',
    _mobile = /ipad|iphone|ipod|android|blackberry|windows phone|opera mini|silk/i.test(navigator.userAgent);

  // Plugin init
  $.fn[_iCheck] = function(options, fire) {

    // Walker
    var handle = 'input[type="' + _checkbox + '"], input[type="' + _radio + '"]',
      stack = $(),
      walker = function(object) {
        object.each(function() {
          var self = $(this);

          if (self.is(handle)) {
            stack = stack.add(self);
          } else {
            stack = stack.add(self.find(handle));
          }
        });
      };

    // Check if we should operate with some method
    if (/^(check|uncheck|toggle|indeterminate|determinate|disable|enable|update|destroy)$/i.test(options)) {

      // Normalize method's name
      options = options.toLowerCase();

      // Find checkboxes and radio buttons
      walker(this);

      return stack.each(function() {
        var self = $(this);

        if (options == 'destroy') {
          tidy(self, 'ifDestroyed');
        } else {
          operate(self, true, options);
        }

        // Fire method's callback
        if ($.isFunction(fire)) {
          fire();
        }
      });

    // Customization
    } else if (typeof options == 'object' || !options) {

      // Check if any options were passed
      var settings = $.extend({
          checkedClass: _checked,
          disabledClass: _disabled,
          indeterminateClass: _indeterminate,
          labelHover: true
        }, options),

        selector = settings.handle,
        hoverClass = settings.hoverClass || 'hover',
        focusClass = settings.focusClass || 'focus',
        activeClass = settings.activeClass || 'active',
        labelHover = !!settings.labelHover,
        labelHoverClass = settings.labelHoverClass || 'hover',

        // Setup clickable area
        area = ('' + settings.increaseArea).replace('%', '') | 0;

      // Selector limit
      if (selector == _checkbox || selector == _radio) {
        handle = 'input[type="' + selector + '"]';
      }

      // Clickable area limit
      if (area < -50) {
        area = -50;
      }

      // Walk around the selector
      walker(this);

      return stack.each(function() {
        var self = $(this);

        // If already customized
        tidy(self);

        var node = this,
          id = node.id,

          // Layer styles
          offset = -area + '%',
          size = 100 + (area * 2) + '%',
          layer = {
            position: 'absolute',
            top: offset,
            left: offset,
            display: 'block',
            width: size,
            height: size,
            margin: 0,
            padding: 0,
            background: '#fff',
            border: 0,
            opacity: 0
          },

          // Choose how to hide input
          hide = _mobile ? {
            position: 'absolute',
            visibility: 'hidden'
          } : area ? layer : {
            position: 'absolute',
            opacity: 0
          },

          // Get proper class
          className = node[_type] == _checkbox ? settings.checkboxClass || 'i' + _checkbox : settings.radioClass || 'i' + _radio,

          // Find assigned labels
          label = $(_label + '[for="' + id + '"]').add(self.closest(_label)),

          // Check ARIA option
          aria = !!settings.aria,

          // Set ARIA placeholder
          ariaID = _iCheck + '-' + Math.random().toString(36).substr(2,6),

          // Parent & helper
          parent = '<div class="' + className + '" ' + (aria ? 'role="' + node[_type] + '" ' : ''),
          helper;

        // Set ARIA "labelledby"
        if (aria) {
          label.each(function() {
            parent += 'aria-labelledby="';

            if (this.id) {
              parent += this.id;
            } else {
              this.id = ariaID;
              parent += ariaID;
            }

            parent += '"';
          });
        }

        // Wrap input
        parent = self.wrap(parent + '/>')[_callback]('ifCreated').parent().append(settings.insert);

        // Layer addition
        helper = $('<ins class="' + _iCheckHelper + '"/>').css(layer).appendTo(parent);

        // Finalize customization
        self.data(_iCheck, {o: settings, s: self.attr('style')}).css(hide);
        !!settings.inheritClass && parent[_add](node.className || '');
        !!settings.inheritID && id && parent.attr('id', _iCheck + '-' + id);
        parent.css('position') == 'static' && parent.css('position', 'relative');
        operate(self, true, _update);

        // Label events
        if (label.length) {
          label.on(_click + '.i mouseover.i mouseout.i ' + _touch, function(event) {
            var type = event[_type],
              item = $(this);

            // Do nothing if input is disabled
            if (!node[_disabled]) {

              // Click
              if (type == _click) {
                if ($(event.target).is('a')) {
                  return;
                }
                operate(self, false, true);

              // Hover state
              } else if (labelHover) {

                // mouseout|touchend
                if (/ut|nd/.test(type)) {
                  parent[_remove](hoverClass);
                  item[_remove](labelHoverClass);
                } else {
                  parent[_add](hoverClass);
                  item[_add](labelHoverClass);
                }
              }

              if (_mobile) {
                event.stopPropagation();
              } else {
                return false;
              }
            }
          });
        }

        // Input events
        self.on(_click + '.i focus.i blur.i keyup.i keydown.i keypress.i', function(event) {
          var type = event[_type],
            key = event.keyCode;

          // Click
          if (type == _click) {
            return false;

          // Keydown
          } else if (type == 'keydown' && key == 32) {
            if (!(node[_type] == _radio && node[_checked])) {
              if (node[_checked]) {
                off(self, _checked);
              } else {
                on(self, _checked);
              }
            }

            return false;

          // Keyup
          } else if (type == 'keyup' && node[_type] == _radio) {
            !node[_checked] && on(self, _checked);

          // Focus/blur
          } else if (/us|ur/.test(type)) {
            parent[type == 'blur' ? _remove : _add](focusClass);
          }
        });

        // Helper events
        helper.on(_click + ' mousedown mouseup mouseover mouseout ' + _touch, function(event) {
          var type = event[_type],

            // mousedown|mouseup
            toggle = /wn|up/.test(type) ? activeClass : hoverClass;

          // Do nothing if input is disabled
          if (!node[_disabled]) {

            // Click
            if (type == _click) {
              operate(self, false, true);

            // Active and hover states
            } else {

              // State is on
              if (/wn|er|in/.test(type)) {

                // mousedown|mouseover|touchbegin
                parent[_add](toggle);

              // State is off
              } else {
                parent[_remove](toggle + ' ' + activeClass);
              }

              // Label hover
              if (label.length && labelHover && toggle == hoverClass) {

                // mouseout|touchend
                label[/ut|nd/.test(type) ? _remove : _add](labelHoverClass);
              }
            }

            if (_mobile) {
              event.stopPropagation();
            } else {
              return false;
            }
          }
        });
      });
    } else {
      return this;
    }
  };

  // Do something with inputs
  function operate(input, direct, method) {
    var node = input[0],
      state = /er/.test(method) ? _indeterminate : /bl/.test(method) ? _disabled : _checked,
      active = method == _update ? {
        checked: node[_checked],
        disabled: node[_disabled],
        indeterminate: input.attr(_indeterminate) == 'true' || input.attr(_determinate) == 'false'
      } : node[state];

    // Check, disable or indeterminate
    if (/^(ch|di|in)/.test(method) && !active) {
      on(input, state);

    // Uncheck, enable or determinate
    } else if (/^(un|en|de)/.test(method) && active) {
      off(input, state);

    // Update
    } else if (method == _update) {

      // Handle states
      for (var each in active) {
        if (active[each]) {
          on(input, each, true);
        } else {
          off(input, each, true);
        }
      }

    } else if (!direct || method == 'toggle') {

      // Helper or label was clicked
      if (!direct) {
        input[_callback]('ifClicked');
      }

      // Toggle checked state
      if (active) {
        if (node[_type] !== _radio) {
          off(input, state);
        }
      } else {
        on(input, state);
      }
    }
  }

  // Add checked, disabled or indeterminate state
  function on(input, state, keep) {
    var node = input[0],
      parent = input.parent(),
      checked = state == _checked,
      indeterminate = state == _indeterminate,
      disabled = state == _disabled,
      callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',
      regular = option(input, callback + capitalize(node[_type])),
      specific = option(input, state + capitalize(node[_type]));

    // Prevent unnecessary actions
    if (node[state] !== true) {

      // Toggle assigned radio buttons
      if (!keep && state == _checked && node[_type] == _radio && node.name) {
        var form = input.closest('form'),
          inputs = 'input[name="' + node.name + '"]';

        inputs = form.length ? form.find(inputs) : $(inputs);

        inputs.each(function() {
          if (this !== node && $(this).data(_iCheck)) {
            off($(this), state);
          }
        });
      }

      // Indeterminate state
      if (indeterminate) {

        // Add indeterminate state
        node[state] = true;

        // Remove checked state
        if (node[_checked]) {
          off(input, _checked, 'force');
        }

      // Checked or disabled state
      } else {

        // Add checked or disabled state
        if (!keep) {
          node[state] = true;
        }

        // Remove indeterminate state
        if (checked && node[_indeterminate]) {
          off(input, _indeterminate, false);
        }
      }

      // Trigger callbacks
      callbacks(input, checked, state, keep);
    }

    // Add proper cursor
    if (node[_disabled] && !!option(input, _cursor, true)) {
      parent.find('.' + _iCheckHelper).css(_cursor, 'default');
    }

    // Add state class
    parent[_add](specific || option(input, state) || '');

    // Set ARIA attribute
    if (!!parent.attr('role') && !indeterminate) {
      parent.attr('aria-' + (disabled ? _disabled : _checked), 'true');
    }

    // Remove regular state class
    parent[_remove](regular || option(input, callback) || '');
  }

  // Remove checked, disabled or indeterminate state
  function off(input, state, keep) {
    var node = input[0],
      parent = input.parent(),
      checked = state == _checked,
      indeterminate = state == _indeterminate,
      disabled = state == _disabled,
      callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',
      regular = option(input, callback + capitalize(node[_type])),
      specific = option(input, state + capitalize(node[_type]));

    // Prevent unnecessary actions
    if (node[state] !== false) {

      // Toggle state
      if (indeterminate || !keep || keep == 'force') {
        node[state] = false;
      }

      // Trigger callbacks
      callbacks(input, checked, callback, keep);
    }

    // Add proper cursor
    if (!node[_disabled] && !!option(input, _cursor, true)) {
      parent.find('.' + _iCheckHelper).css(_cursor, 'pointer');
    }

    // Remove state class
    parent[_remove](specific || option(input, state) || '');

    // Set ARIA attribute
    if (!!parent.attr('role') && !indeterminate) {
      parent.attr('aria-' + (disabled ? _disabled : _checked), 'false');
    }

    // Add regular state class
    parent[_add](regular || option(input, callback) || '');
  }

  // Remove all traces
  function tidy(input, callback) {
    if (input.data(_iCheck)) {

      // Remove everything except input
      input.parent().html(input.attr('style', input.data(_iCheck).s || ''));

      // Callback
      if (callback) {
        input[_callback](callback);
      }

      // Unbind events
      input.off('.i').unwrap();
      $(_label + '[for="' + input[0].id + '"]').add(input.closest(_label)).off('.i');
    }
  }

  // Get some option
  function option(input, state, regular) {
    if (input.data(_iCheck)) {
      return input.data(_iCheck).o[state + (regular ? '' : 'Class')];
    }
  }

  // Capitalize some string
  function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // Executable handlers
  function callbacks(input, checked, callback, keep) {
    if (!keep) {
      if (checked) {
        input[_callback]('ifToggled');
      }

      input[_callback]('ifChanged')[_callback]('if' + capitalize(callback));
    }
  }
})(window.jQuery || window.Zepto);

/*!
 * Select2 4.0.3
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function (jQuery) {
    // This is needed so we can catch the AMD loader configuration and use it
    // The inner file should be wrapped (by `banner.start.js`) in a function that
    // returns the AMD loader references.
    var S2 =
  (function () {
      // Restore the Select2 AMD loader so it can be used
      // Needed mostly in the language files, where the loader is not inserted
      if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
          var S2 = jQuery.fn.select2.amd;
      }
      var S2; (function () {
          if (!S2 || !S2.requirejs) {
              if (!S2) { S2 = {}; } else { require = S2; }
              /**
               * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
               * Available via the MIT or new BSD license.
               * see: http://github.com/jrburke/almond for details
               */
              //Going sloppy to avoid 'use strict' string cost, but strict practices should
              //be followed.
              /*jslint sloppy: true */
              /*global setTimeout: false */

              var requirejs, require, define;
              (function (undef) {
                  var main, req, makeMap, handlers,
                      defined = {},
                      waiting = {},
                      config = {},
                      defining = {},
                      hasOwn = Object.prototype.hasOwnProperty,
                      aps = [].slice,
                      jsSuffixRegExp = /\.js$/;

                  function hasProp(obj, prop) {
                      return hasOwn.call(obj, prop);
                  }

                  /**
                   * Given a relative module name, like ./something, normalize it to
                   * a real name that can be mapped to a path.
                   * @param {String} name the relative name
                   * @param {String} baseName a real name that the name arg is relative
                   * to.
                   * @returns {String} normalized name
                   */
                  function normalize(name, baseName) {
                      var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                          foundI, foundStarMap, starI, i, j, part,
                          baseParts = baseName && baseName.split("/"),
                          map = config.map,
                          starMap = (map && map['*']) || {};

                      //Adjust any relative paths.
                      if (name && name.charAt(0) === ".") {
                          //If have a base name, try to normalize against it,
                          //otherwise, assume it is a top-level require that will
                          //be relative to baseUrl in the end.
                          if (baseName) {
                              name = name.split('/');
                              lastIndex = name.length - 1;

                              // Node .js allowance:
                              if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                                  name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                              }

                              //Lop off the last part of baseParts, so that . matches the
                              //"directory" and not name of the baseName's module. For instance,
                              //baseName of "one/two/three", maps to "one/two/three.js", but we
                              //want the directory, "one/two" for this normalization.
                              name = baseParts.slice(0, baseParts.length - 1).concat(name);

                              //start trimDots
                              for (i = 0; i < name.length; i += 1) {
                                  part = name[i];
                                  if (part === ".") {
                                      name.splice(i, 1);
                                      i -= 1;
                                  } else if (part === "..") {
                                      if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                                          //End of the line. Keep at least one non-dot
                                          //path segment at the front so it can be mapped
                                          //correctly to disk. Otherwise, there is likely
                                          //no path mapping for a path starting with '..'.
                                          //This can still fail, but catches the most reasonable
                                          //uses of ..
                                          break;
                                      } else if (i > 0) {
                                          name.splice(i - 1, 2);
                                          i -= 2;
                                      }
                                  }
                              }
                              //end trimDots

                              name = name.join("/");
                          } else if (name.indexOf('./') === 0) {
                              // No baseName, so this is ID is resolved relative
                              // to baseUrl, pull off the leading dot.
                              name = name.substring(2);
                          }
                      }

                      //Apply map config if available.
                      if ((baseParts || starMap) && map) {
                          nameParts = name.split('/');

                          for (i = nameParts.length; i > 0; i -= 1) {
                              nameSegment = nameParts.slice(0, i).join("/");

                              if (baseParts) {
                                  //Find the longest baseName segment match in the config.
                                  //So, do joins on the biggest to smallest lengths of baseParts.
                                  for (j = baseParts.length; j > 0; j -= 1) {
                                      mapValue = map[baseParts.slice(0, j).join('/')];

                                      //baseName segment has  config, find if it has one for
                                      //this name.
                                      if (mapValue) {
                                          mapValue = mapValue[nameSegment];
                                          if (mapValue) {
                                              //Match, update name to the new value.
                                              foundMap = mapValue;
                                              foundI = i;
                                              break;
                                          }
                                      }
                                  }
                              }

                              if (foundMap) {
                                  break;
                              }

                              //Check for a star map match, but just hold on to it,
                              //if there is a shorter segment match later in a matching
                              //config, then favor over this star map.
                              if (!foundStarMap && starMap && starMap[nameSegment]) {
                                  foundStarMap = starMap[nameSegment];
                                  starI = i;
                              }
                          }

                          if (!foundMap && foundStarMap) {
                              foundMap = foundStarMap;
                              foundI = starI;
                          }

                          if (foundMap) {
                              nameParts.splice(0, foundI, foundMap);
                              name = nameParts.join('/');
                          }
                      }

                      return name;
                  }

                  function makeRequire(relName, forceSync) {
                      return function () {
                          //A version of a require function that passes a moduleName
                          //value for items that may need to
                          //look up paths relative to the moduleName
                          var args = aps.call(arguments, 0);

                          //If first arg is not require('string'), and there is only
                          //one arg, it is the array form without a callback. Insert
                          //a null so that the following concat is correct.
                          if (typeof args[0] !== 'string' && args.length === 1) {
                              args.push(null);
                          }
                          return req.apply(undef, args.concat([relName, forceSync]));
                      };
                  }

                  function makeNormalize(relName) {
                      return function (name) {
                          return normalize(name, relName);
                      };
                  }

                  function makeLoad(depName) {
                      return function (value) {
                          defined[depName] = value;
                      };
                  }

                  function callDep(name) {
                      if (hasProp(waiting, name)) {
                          var args = waiting[name];
                          delete waiting[name];
                          defining[name] = true;
                          main.apply(undef, args);
                      }

                      if (!hasProp(defined, name) && !hasProp(defining, name)) {
                          throw new Error('No ' + name);
                      }
                      return defined[name];
                  }

                  //Turns a plugin!resource to [plugin, resource]
                  //with the plugin being undefined if the name
                  //did not have a plugin prefix.
                  function splitPrefix(name) {
                      var prefix,
                          index = name ? name.indexOf('!') : -1;
                      if (index > -1) {
                          prefix = name.substring(0, index);
                          name = name.substring(index + 1, name.length);
                      }
                      return [prefix, name];
                  }

                  /**
                   * Makes a name map, normalizing the name, and using a plugin
                   * for normalization if necessary. Grabs a ref to plugin
                   * too, as an optimization.
                   */
                  makeMap = function (name, relName) {
                      var plugin,
                          parts = splitPrefix(name),
                          prefix = parts[0];

                      name = parts[1];

                      if (prefix) {
                          prefix = normalize(prefix, relName);
                          plugin = callDep(prefix);
                      }

                      //Normalize according
                      if (prefix) {
                          if (plugin && plugin.normalize) {
                              name = plugin.normalize(name, makeNormalize(relName));
                          } else {
                              name = normalize(name, relName);
                          }
                      } else {
                          name = normalize(name, relName);
                          parts = splitPrefix(name);
                          prefix = parts[0];
                          name = parts[1];
                          if (prefix) {
                              plugin = callDep(prefix);
                          }
                      }

                      //Using ridiculous property names for space reasons
                      return {
                          f: prefix ? prefix + '!' + name : name, //fullName
                          n: name,
                          pr: prefix,
                          p: plugin
                      };
                  };

                  function makeConfig(name) {
                      return function () {
                          return (config && config.config && config.config[name]) || {};
                      };
                  }

                  handlers = {
                      require: function (name) {
                          return makeRequire(name);
                      },
                      exports: function (name) {
                          var e = defined[name];
                          if (typeof e !== 'undefined') {
                              return e;
                          } else {
                              return (defined[name] = {});
                          }
                      },
                      module: function (name) {
                          return {
                              id: name,
                              uri: '',
                              exports: defined[name],
                              config: makeConfig(name)
                          };
                      }
                  };

                  main = function (name, deps, callback, relName) {
                      var cjsModule, depName, ret, map, i,
                          args = [],
                          callbackType = typeof callback,
                          usingExports;

                      //Use name if no relName
                      relName = relName || name;

                      //Call the callback to define the module, if necessary.
                      if (callbackType === 'undefined' || callbackType === 'function') {
                          //Pull out the defined dependencies and pass the ordered
                          //values to the callback.
                          //Default to [require, exports, module] if no deps
                          deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                          for (i = 0; i < deps.length; i += 1) {
                              map = makeMap(deps[i], relName);
                              depName = map.f;

                              //Fast path CommonJS standard dependencies.
                              if (depName === "require") {
                                  args[i] = handlers.require(name);
                              } else if (depName === "exports") {
                                  //CommonJS module spec 1.1
                                  args[i] = handlers.exports(name);
                                  usingExports = true;
                              } else if (depName === "module") {
                                  //CommonJS module spec 1.1
                                  cjsModule = args[i] = handlers.module(name);
                              } else if (hasProp(defined, depName) ||
                                         hasProp(waiting, depName) ||
                                         hasProp(defining, depName)) {
                                  args[i] = callDep(depName);
                              } else if (map.p) {
                                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                                  args[i] = defined[depName];
                              } else {
                                  throw new Error(name + ' missing ' + depName);
                              }
                          }

                          ret = callback ? callback.apply(defined[name], args) : undefined;

                          if (name) {
                              //If setting exports via "module" is in play,
                              //favor that over return value and exports. After that,
                              //favor a non-undefined return value over exports use.
                              if (cjsModule && cjsModule.exports !== undef &&
                                      cjsModule.exports !== defined[name]) {
                                  defined[name] = cjsModule.exports;
                              } else if (ret !== undef || !usingExports) {
                                  //Use the return value from the function.
                                  defined[name] = ret;
                              }
                          }
                      } else if (name) {
                          //May just be an object definition for the module. Only
                          //worry about defining if have a module name.
                          defined[name] = callback;
                      }
                  };

                  requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
                      if (typeof deps === "string") {
                          if (handlers[deps]) {
                              //callback in this case is really relName
                              return handlers[deps](callback);
                          }
                          //Just return the module wanted. In this scenario, the
                          //deps arg is the module name, and second arg (if passed)
                          //is just the relName.
                          //Normalize module name, if it contains . or ..
                          return callDep(makeMap(deps, callback).f);
                      } else if (!deps.splice) {
                          //deps is a config object, not an array.
                          config = deps;
                          if (config.deps) {
                              req(config.deps, config.callback);
                          }
                          if (!callback) {
                              return;
                          }

                          if (callback.splice) {
                              //callback is an array, which means it is a dependency list.
                              //Adjust args if there are dependencies
                              deps = callback;
                              callback = relName;
                              relName = null;
                          } else {
                              deps = undef;
                          }
                      }

                      //Support require(['a'])
                      callback = callback || function () { };

                      //If relName is a function, it is an errback handler,
                      //so remove it.
                      if (typeof relName === 'function') {
                          relName = forceSync;
                          forceSync = alt;
                      }

                      //Simulate async callback;
                      if (forceSync) {
                          main(undef, deps, callback, relName);
                      } else {
                          //Using a non-zero value because of concern for what old browsers
                          //do, and latest browsers "upgrade" to 4 if lower value is used:
                          //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                          //If want a value immediately, use require('id') instead -- something
                          //that works in almond on the global level, but not guaranteed and
                          //unlikely to work in other AMD implementations.
                          setTimeout(function () {
                              main(undef, deps, callback, relName);
                          }, 4);
                      }

                      return req;
                  };

                  /**
                   * Just drops the config on the floor, but returns req in case
                   * the config return value is used.
                   */
                  req.config = function (cfg) {
                      return req(cfg);
                  };

                  /**
                   * Expose module registry for debugging and tooling
                   */
                  requirejs._defined = defined;

                  define = function (name, deps, callback) {
                      if (typeof name !== 'string') {
                          throw new Error('See almond README: incorrect module build, no module name');
                      }

                      //This module may not have dependencies
                      if (!deps.splice) {
                          //deps is not an array, so probably means
                          //an object literal or factory function for
                          //the value. Adjust args.
                          callback = deps;
                          deps = [];
                      }

                      if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                          waiting[name] = [name, deps, callback];
                      }
                  };

                  define.amd = {
                      jQuery: true
                  };
              }());

              S2.requirejs = requirejs; S2.require = require; S2.define = define;
          }
      }());
      S2.define("almond", function () { });

      /* global jQuery:false, $:false */
      S2.define('jquery', [], function () {
          var _$ = jQuery || $;

          if (_$ == null && console && console.error) {
              console.error(
                'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
                'found. Make sure that you are including jQuery before Select2 on your ' +
                'web page.'
              );
          }

          return _$;
      });

      S2.define('select2/utils', [
        'jquery'
      ], function ($) {
          var Utils = {};

          Utils.Extend = function (ChildClass, SuperClass) {
              var __hasProp = {}.hasOwnProperty;

              function BaseConstructor() {
                  this.constructor = ChildClass;
              }

              for (var key in SuperClass) {
                  if (__hasProp.call(SuperClass, key)) {
                      ChildClass[key] = SuperClass[key];
                  }
              }

              BaseConstructor.prototype = SuperClass.prototype;
              ChildClass.prototype = new BaseConstructor();
              ChildClass.__super__ = SuperClass.prototype;

              return ChildClass;
          };

          function getMethods(theClass) {
              var proto = theClass.prototype;

              var methods = [];

              for (var methodName in proto) {
                  var m = proto[methodName];

                  if (typeof m !== 'function') {
                      continue;
                  }

                  if (methodName === 'constructor') {
                      continue;
                  }

                  methods.push(methodName);
              }

              return methods;
          }

          Utils.Decorate = function (SuperClass, DecoratorClass) {
              var decoratedMethods = getMethods(DecoratorClass);
              var superMethods = getMethods(SuperClass);

              function DecoratedClass() {
                  var unshift = Array.prototype.unshift;

                  var argCount = DecoratorClass.prototype.constructor.length;

                  var calledConstructor = SuperClass.prototype.constructor;

                  if (argCount > 0) {
                      unshift.call(arguments, SuperClass.prototype.constructor);

                      calledConstructor = DecoratorClass.prototype.constructor;
                  }

                  calledConstructor.apply(this, arguments);
              }

              DecoratorClass.displayName = SuperClass.displayName;

              function ctr() {
                  this.constructor = DecoratedClass;
              }

              DecoratedClass.prototype = new ctr();

              for (var m = 0; m < superMethods.length; m++) {
                  var superMethod = superMethods[m];

                  DecoratedClass.prototype[superMethod] =
                    SuperClass.prototype[superMethod];
              }

              var calledMethod = function (methodName) {
                  // Stub out the original method if it's not decorating an actual method
                  var originalMethod = function () { };

                  if (methodName in DecoratedClass.prototype) {
                      originalMethod = DecoratedClass.prototype[methodName];
                  }

                  var decoratedMethod = DecoratorClass.prototype[methodName];

                  return function () {
                      var unshift = Array.prototype.unshift;

                      unshift.call(arguments, originalMethod);

                      return decoratedMethod.apply(this, arguments);
                  };
              };

              for (var d = 0; d < decoratedMethods.length; d++) {
                  var decoratedMethod = decoratedMethods[d];

                  DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
              }

              return DecoratedClass;
          };

          var Observable = function () {
              this.listeners = {};
          };

          Observable.prototype.on = function (event, callback) {
              this.listeners = this.listeners || {};

              if (event in this.listeners) {
                  this.listeners[event].push(callback);
              } else {
                  this.listeners[event] = [callback];
              }
          };

          Observable.prototype.trigger = function (event) {
              var slice = Array.prototype.slice;
              var params = slice.call(arguments, 1);

              this.listeners = this.listeners || {};

              // Params should always come in as an array
              if (params == null) {
                  params = [];
              }

              // If there are no arguments to the event, use a temporary object
              if (params.length === 0) {
                  params.push({});
              }

              // Set the `_type` of the first object to the event
              params[0]._type = event;

              if (event in this.listeners) {
                  this.invoke(this.listeners[event], slice.call(arguments, 1));
              }

              if ('*' in this.listeners) {
                  this.invoke(this.listeners['*'], arguments);
              }
          };

          Observable.prototype.invoke = function (listeners, params) {
              for (var i = 0, len = listeners.length; i < len; i++) {
                  listeners[i].apply(this, params);
              }
          };

          Utils.Observable = Observable;

          Utils.generateChars = function (length) {
              var chars = '';

              for (var i = 0; i < length; i++) {
                  var randomChar = Math.floor(Math.random() * 36);
                  chars += randomChar.toString(36);
              }

              return chars;
          };

          Utils.bind = function (func, context) {
              return function () {
                  func.apply(context, arguments);
              };
          };

          Utils._convertData = function (data) {
              for (var originalKey in data) {
                  var keys = originalKey.split('-');

                  var dataLevel = data;

                  if (keys.length === 1) {
                      continue;
                  }

                  for (var k = 0; k < keys.length; k++) {
                      var key = keys[k];

                      // Lowercase the first letter
                      // By default, dash-separated becomes camelCase
                      key = key.substring(0, 1).toLowerCase() + key.substring(1);

                      if (!(key in dataLevel)) {
                          dataLevel[key] = {};
                      }

                      if (k == keys.length - 1) {
                          dataLevel[key] = data[originalKey];
                      }

                      dataLevel = dataLevel[key];
                  }

                  delete data[originalKey];
              }

              return data;
          };

          Utils.hasScroll = function (index, el) {
              // Adapted from the function created by @ShadowScripter
              // and adapted by @BillBarry on the Stack Exchange Code Review website.
              // The original code can be found at
              // http://codereview.stackexchange.com/q/13338
              // and was designed to be used with the Sizzle selector engine.

              var $el = $(el);
              var overflowX = el.style.overflowX;
              var overflowY = el.style.overflowY;

              //Check both x and y declarations
              if (overflowX === overflowY &&
                  (overflowY === 'hidden' || overflowY === 'visible')) {
                  return false;
              }

              if (overflowX === 'scroll' || overflowY === 'scroll') {
                  return true;
              }

              return ($el.innerHeight() < el.scrollHeight ||
                $el.innerWidth() < el.scrollWidth);
          };

          Utils.escapeMarkup = function (markup) {
              var replaceMap = {
                  '\\': '&#92;',
                  '&': '&amp;',
                  '<': '&lt;',
                  '>': '&gt;',
                  '"': '&quot;',
                  '\'': '&#39;',
                  '/': '&#47;'
              };

              // Do not try to escape the markup if it's not a string
              if (typeof markup !== 'string') {
                  return markup;
              }

              return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
                  return replaceMap[match];
              });
          };

          // Append an array of jQuery nodes to a given element.
          Utils.appendMany = function ($element, $nodes) {
              // jQuery 1.7.x does not support $.fn.append() with an array
              // Fall back to a jQuery object collection using $.fn.add()
              if ($.fn.jquery.substr(0, 3) === '1.7') {
                  var $jqNodes = $();

                  $.map($nodes, function (node) {
                      $jqNodes = $jqNodes.add(node);
                  });

                  $nodes = $jqNodes;
              }

              $element.append($nodes);
          };

          return Utils;
      });

      S2.define('select2/results', [
        'jquery',
        './utils'
      ], function ($, Utils) {
          function Results($element, options, dataAdapter) {
              this.$element = $element;
              this.data = dataAdapter;
              this.options = options;

              Results.__super__.constructor.call(this);
          }

          Utils.Extend(Results, Utils.Observable);

          Results.prototype.render = function () {
              var $results = $(
                '<ul class="select2-results__options" role="tree"></ul>'
              );

              if (this.options.get('multiple')) {
                  $results.attr('aria-multiselectable', 'true');
              }

              this.$results = $results;

              return $results;
          };

          Results.prototype.clear = function () {
              this.$results.empty();
          };

          Results.prototype.displayMessage = function (params) {
              var escapeMarkup = this.options.get('escapeMarkup');

              this.clear();
              this.hideLoading();

              var $message = $(
                '<li role="treeitem" aria-live="assertive"' +
                ' class="select2-results__option"></li>'
              );

              var message = this.options.get('translations').get(params.message);

              $message.append(
                escapeMarkup(
                  message(params.args)
                )
              );

              $message[0].className += ' select2-results__message';

              this.$results.append($message);
          };

          Results.prototype.hideMessages = function () {
              this.$results.find('.select2-results__message').remove();
          };

          Results.prototype.append = function (data) {
              this.hideLoading();

              var $options = [];

              if (data.results == null || data.results.length === 0) {
                  if (this.$results.children().length === 0) {
                      this.trigger('results:message', {
                          message: 'noResults'
                      });
                  }

                  return;
              }

              data.results = this.sort(data.results);

              for (var d = 0; d < data.results.length; d++) {
                  var item = data.results[d];

                  var $option = this.option(item);

                  $options.push($option);
              }

              this.$results.append($options);
          };

          Results.prototype.position = function ($results, $dropdown) {
              var $resultsContainer = $dropdown.find('.select2-results');
              $resultsContainer.append($results);
          };

          Results.prototype.sort = function (data) {
              var sorter = this.options.get('sorter');

              return sorter(data);
          };

          Results.prototype.highlightFirstItem = function () {
              var $options = this.$results
                .find('.select2-results__option[aria-selected]');

              var $selected = $options.filter('[aria-selected=true]');

              // Check if there are any selected options
              if ($selected.length > 0) {
                  // If there are selected options, highlight the first
                  $selected.first().trigger('mouseenter');
              } else {
                  // If there are no selected options, highlight the first option
                  // in the dropdown
                  $options.first().trigger('mouseenter');
              }

              this.ensureHighlightVisible();
          };

          Results.prototype.setClasses = function () {
              var self = this;

              this.data.current(function (selected) {
                  var selectedIds = $.map(selected, function (s) {
                      return s.id.toString();
                  });

                  var $options = self.$results
                    .find('.select2-results__option[aria-selected]');

                  $options.each(function () {
                      var $option = $(this);

                      var item = $.data(this, 'data');

                      // id needs to be converted to a string when comparing
                      var id = '' + item.id;

                      if ((item.element != null && item.element.selected) ||
                          (item.element == null && $.inArray(id, selectedIds) > -1)) {
                          $option.attr('aria-selected', 'true');
                      } else {
                          $option.attr('aria-selected', 'false');
                      }
                  });

              });
          };

          Results.prototype.showLoading = function (params) {
              this.hideLoading();

              var loadingMore = this.options.get('translations').get('searching');

              var loading = {
                  disabled: true,
                  loading: true,
                  text: loadingMore(params)
              };
              var $loading = this.option(loading);
              $loading.className += ' loading-results';

              this.$results.prepend($loading);
          };

          Results.prototype.hideLoading = function () {
              this.$results.find('.loading-results').remove();
          };

          Results.prototype.option = function (data) {
              var option = document.createElement('li');
              option.className = 'select2-results__option';

              var attrs = {
                  'role': 'treeitem',
                  'aria-selected': 'false'
              };

              if (data.disabled) {
                  delete attrs['aria-selected'];
                  attrs['aria-disabled'] = 'true';
              }

              if (data.id == null) {
                  delete attrs['aria-selected'];
              }

              if (data._resultId != null) {
                  option.id = data._resultId;
              }

              if (data.title) {
                  option.title = data.title;
              }

              if (data.children) {
                  attrs.role = 'group';
                  attrs['aria-label'] = data.text;
                  delete attrs['aria-selected'];
              }

              for (var attr in attrs) {
                  var val = attrs[attr];

                  option.setAttribute(attr, val);
              }

              if (data.children) {
                  var $option = $(option);

                  var label = document.createElement('strong');
                  label.className = 'select2-results__group';

                  var $label = $(label);
                  this.template(data, label);

                  var $children = [];

                  for (var c = 0; c < data.children.length; c++) {
                      var child = data.children[c];

                      var $child = this.option(child);

                      $children.push($child);
                  }

                  var $childrenContainer = $('<ul></ul>', {
                      'class': 'select2-results__options select2-results__options--nested'
                  });

                  $childrenContainer.append($children);

                  $option.append(label);
                  $option.append($childrenContainer);
              } else {
                  this.template(data, option);
              }

              $.data(option, 'data', data);

              return option;
          };

          Results.prototype.bind = function (container, $container) {
              var self = this;

              var id = container.id + '-results';

              this.$results.attr('id', id);

              container.on('results:all', function (params) {
                  self.clear();
                  self.append(params.data);

                  if (container.isOpen()) {
                      self.setClasses();
                      self.highlightFirstItem();
                  }
              });

              container.on('results:append', function (params) {
                  self.append(params.data);

                  if (container.isOpen()) {
                      self.setClasses();
                  }
              });

              container.on('query', function (params) {
                  self.hideMessages();
                  self.showLoading(params);
              });

              container.on('select', function () {
                  if (!container.isOpen()) {
                      return;
                  }

                  self.setClasses();
                  self.highlightFirstItem();
              });

              container.on('unselect', function () {
                  if (!container.isOpen()) {
                      return;
                  }

                  self.setClasses();
                  self.highlightFirstItem();
              });

              container.on('open', function () {
                  // When the dropdown is open, aria-expended="true"
                  self.$results.attr('aria-expanded', 'true');
                  self.$results.attr('aria-hidden', 'false');

                  self.setClasses();
                  self.ensureHighlightVisible();
              });

              container.on('close', function () {
                  // When the dropdown is closed, aria-expended="false"
                  self.$results.attr('aria-expanded', 'false');
                  self.$results.attr('aria-hidden', 'true');
                  self.$results.removeAttr('aria-activedescendant');
              });

              container.on('results:toggle', function () {
                  var $highlighted = self.getHighlightedResults();

                  if ($highlighted.length === 0) {
                      return;
                  }

                  $highlighted.trigger('mouseup');
              });

              container.on('results:select', function () {
                  var $highlighted = self.getHighlightedResults();

                  if ($highlighted.length === 0) {
                      return;
                  }

                  var data = $highlighted.data('data');

                  if ($highlighted.attr('aria-selected') == 'true') {
                      self.trigger('close', {});
                  } else {
                      self.trigger('select', {
                          data: data
                      });
                  }
              });

              container.on('results:previous', function () {
                  var $highlighted = self.getHighlightedResults();

                  var $options = self.$results.find('[aria-selected]');

                  var currentIndex = $options.index($highlighted);

                  // If we are already at te top, don't move further
                  if (currentIndex === 0) {
                      return;
                  }

                  var nextIndex = currentIndex - 1;

                  // If none are highlighted, highlight the first
                  if ($highlighted.length === 0) {
                      nextIndex = 0;
                  }

                  var $next = $options.eq(nextIndex);

                  $next.trigger('mouseenter');

                  var currentOffset = self.$results.offset().top;
                  var nextTop = $next.offset().top;
                  var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

                  if (nextIndex === 0) {
                      self.$results.scrollTop(0);
                  } else if (nextTop - currentOffset < 0) {
                      self.$results.scrollTop(nextOffset);
                  }
              });

              container.on('results:next', function () {
                  var $highlighted = self.getHighlightedResults();

                  var $options = self.$results.find('[aria-selected]');

                  var currentIndex = $options.index($highlighted);

                  var nextIndex = currentIndex + 1;

                  // If we are at the last option, stay there
                  if (nextIndex >= $options.length) {
                      return;
                  }

                  var $next = $options.eq(nextIndex);

                  $next.trigger('mouseenter');

                  var currentOffset = self.$results.offset().top +
                    self.$results.outerHeight(false);
                  var nextBottom = $next.offset().top + $next.outerHeight(false);
                  var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

                  if (nextIndex === 0) {
                      self.$results.scrollTop(0);
                  } else if (nextBottom > currentOffset) {
                      self.$results.scrollTop(nextOffset);
                  }
              });

              container.on('results:focus', function (params) {
                  params.element.addClass('select2-results__option--highlighted');
              });

              container.on('results:message', function (params) {
                  self.displayMessage(params);
              });

              if ($.fn.mousewheel) {
                  this.$results.on('mousewheel', function (e) {
                      var top = self.$results.scrollTop();

                      var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

                      var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                      var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

                      if (isAtTop) {
                          self.$results.scrollTop(0);

                          e.preventDefault();
                          e.stopPropagation();
                      } else if (isAtBottom) {
                          self.$results.scrollTop(
                            self.$results.get(0).scrollHeight - self.$results.height()
                          );

                          e.preventDefault();
                          e.stopPropagation();
                      }
                  });
              }

              this.$results.on('mouseup', '.select2-results__option[aria-selected]',
                function (evt) {
                    var $this = $(this);

                    var data = $this.data('data');

                    if ($this.attr('aria-selected') === 'true') {
                        if (self.options.get('multiple')) {
                            self.trigger('unselect', {
                                originalEvent: evt,
                                data: data
                            });
                        } else {
                            self.trigger('close', {});
                        }

                        return;
                    }

                    self.trigger('select', {
                        originalEvent: evt,
                        data: data
                    });
                });

              this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
                function (evt) {
                    var data = $(this).data('data');

                    self.getHighlightedResults()
                        .removeClass('select2-results__option--highlighted');

                    self.trigger('results:focus', {
                        data: data,
                        element: $(this)
                    });
                });
          };

          Results.prototype.getHighlightedResults = function () {
              var $highlighted = this.$results
              .find('.select2-results__option--highlighted');

              return $highlighted;
          };

          Results.prototype.destroy = function () {
              this.$results.remove();
          };

          Results.prototype.ensureHighlightVisible = function () {
              var $highlighted = this.getHighlightedResults();

              if ($highlighted.length === 0) {
                  return;
              }

              var $options = this.$results.find('[aria-selected]');

              var currentIndex = $options.index($highlighted);

              var currentOffset = this.$results.offset().top;
              var nextTop = $highlighted.offset().top;
              var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

              var offsetDelta = nextTop - currentOffset;
              nextOffset -= $highlighted.outerHeight(false) * 2;

              if (currentIndex <= 2) {
                  this.$results.scrollTop(0);
              } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
                  this.$results.scrollTop(nextOffset);
              }
          };

          Results.prototype.template = function (result, container) {
              var template = this.options.get('templateResult');
              var escapeMarkup = this.options.get('escapeMarkup');

              var content = template(result, container);

              if (content == null) {
                  container.style.display = 'none';
              } else if (typeof content === 'string') {
                  container.innerHTML = escapeMarkup(content);
              } else {
                  $(container).append(content);
              }
          };

          return Results;
      });

      S2.define('select2/keys', [

      ], function () {
          var KEYS = {
              BACKSPACE: 8,
              TAB: 9,
              ENTER: 13,
              SHIFT: 16,
              CTRL: 17,
              ALT: 18,
              ESC: 27,
              SPACE: 32,
              PAGE_UP: 33,
              PAGE_DOWN: 34,
              END: 35,
              HOME: 36,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              DELETE: 46
          };

          return KEYS;
      });

      S2.define('select2/selection/base', [
        'jquery',
        '../utils',
        '../keys'
      ], function ($, Utils, KEYS) {
          function BaseSelection($element, options) {
              this.$element = $element;
              this.options = options;

              BaseSelection.__super__.constructor.call(this);
          }

          Utils.Extend(BaseSelection, Utils.Observable);

          BaseSelection.prototype.render = function () {
              var $selection = $(
                '<span class="select2-selection" role="combobox" ' +
                ' aria-haspopup="true" aria-expanded="false">' +
                '</span>'
              );

              this._tabindex = 0;

              if (this.$element.data('old-tabindex') != null) {
                  this._tabindex = this.$element.data('old-tabindex');
              } else if (this.$element.attr('tabindex') != null) {
                  this._tabindex = this.$element.attr('tabindex');
              }

              $selection.attr('title', this.$element.attr('title'));
              $selection.attr('tabindex', this._tabindex);

              this.$selection = $selection;

              return $selection;
          };

          BaseSelection.prototype.bind = function (container, $container) {
              var self = this;

              var id = container.id + '-container';
              var resultsId = container.id + '-results';

              this.container = container;

              this.$selection.on('focus', function (evt) {
                  self.trigger('focus', evt);
              });

              this.$selection.on('blur', function (evt) {
                  self._handleBlur(evt);
              });

              this.$selection.on('keydown', function (evt) {
                  self.trigger('keypress', evt);

                  if (evt.which === KEYS.SPACE) {
                      evt.preventDefault();
                  }
              });

              container.on('results:focus', function (params) {
                  self.$selection.attr('aria-activedescendant', params.data._resultId);
              });

              container.on('selection:update', function (params) {
                  self.update(params.data);
              });

              container.on('open', function () {
                  // When the dropdown is open, aria-expanded="true"
                  self.$selection.attr('aria-expanded', 'true');
                  self.$selection.attr('aria-owns', resultsId);

                  self._attachCloseHandler(container);
              });

              container.on('close', function () {
                  // When the dropdown is closed, aria-expanded="false"
                  self.$selection.attr('aria-expanded', 'false');
                  self.$selection.removeAttr('aria-activedescendant');
                  self.$selection.removeAttr('aria-owns');

                  self.$selection.focus();

                  self._detachCloseHandler(container);
              });

              container.on('enable', function () {
                  self.$selection.attr('tabindex', self._tabindex);
              });

              container.on('disable', function () {
                  self.$selection.attr('tabindex', '-1');
              });
          };

          BaseSelection.prototype._handleBlur = function (evt) {
              var self = this;

              // This needs to be delayed as the active element is the body when the tab
              // key is pressed, possibly along with others.
              window.setTimeout(function () {
                  // Don't trigger `blur` if the focus is still in the selection
                  if (
                    (document.activeElement == self.$selection[0]) ||
                    ($.contains(self.$selection[0], document.activeElement))
                  ) {
                      return;
                  }

                  self.trigger('blur', evt);
              }, 1);
          };

          BaseSelection.prototype._attachCloseHandler = function (container) {
              var self = this;

              $(document.body).on('mousedown.select2.' + container.id, function (e) {
                  var $target = $(e.target);

                  var $select = $target.closest('.select2');

                  var $all = $('.select2.select2-container--open');

                  $all.each(function () {
                      var $this = $(this);

                      if (this == $select[0]) {
                          return;
                      }

                      var $element = $this.data('element');

                      $element.select2('close');
                  });
              });
          };

          BaseSelection.prototype._detachCloseHandler = function (container) {
              $(document.body).off('mousedown.select2.' + container.id);
          };

          BaseSelection.prototype.position = function ($selection, $container) {
              var $selectionContainer = $container.find('.selection');
              $selectionContainer.append($selection);
          };

          BaseSelection.prototype.destroy = function () {
              this._detachCloseHandler(this.container);
          };

          BaseSelection.prototype.update = function (data) {
              throw new Error('The `update` method must be defined in child classes.');
          };

          return BaseSelection;
      });

      S2.define('select2/selection/single', [
        'jquery',
        './base',
        '../utils',
        '../keys'
      ], function ($, BaseSelection, Utils, KEYS) {
          function SingleSelection() {
              SingleSelection.__super__.constructor.apply(this, arguments);
          }

          Utils.Extend(SingleSelection, BaseSelection);

          SingleSelection.prototype.render = function () {
              var $selection = SingleSelection.__super__.render.call(this);

              $selection.addClass('select2-selection--single');

              $selection.html(
                '<span class="select2-selection__rendered"></span>' +
                '<span class="select2-selection__arrow" role="presentation">' +
                  '<b role="presentation"></b>' +
                '</span>'
              );

              return $selection;
          };

          SingleSelection.prototype.bind = function (container, $container) {
              var self = this;

              SingleSelection.__super__.bind.apply(this, arguments);

              var id = container.id + '-container';

              this.$selection.find('.select2-selection__rendered').attr('id', id);
              this.$selection.attr('aria-labelledby', id);

              this.$selection.on('mousedown', function (evt) {
                  // Only respond to left clicks
                  if (evt.which !== 1) {
                      return;
                  }

                  self.trigger('toggle', {
                      originalEvent: evt
                  });
              });

              this.$selection.on('focus', function (evt) {
                  // User focuses on the container
              });

              this.$selection.on('blur', function (evt) {
                  // User exits the container
              });

              container.on('focus', function (evt) {
                  if (!container.isOpen()) {
                      self.$selection.focus();
                  }
              });

              container.on('selection:update', function (params) {
                  self.update(params.data);
              });
          };

          SingleSelection.prototype.clear = function () {
              this.$selection.find('.select2-selection__rendered').empty();
          };

          SingleSelection.prototype.display = function (data, container) {
              var template = this.options.get('templateSelection');
              var escapeMarkup = this.options.get('escapeMarkup');

              return escapeMarkup(template(data, container));
          };

          SingleSelection.prototype.selectionContainer = function () {
              return $('<span></span>');
          };

          SingleSelection.prototype.update = function (data) {
              if (data.length === 0) {
                  this.clear();
                  return;
              }

              var selection = data[0];

              var $rendered = this.$selection.find('.select2-selection__rendered');
              var formatted = this.display(selection, $rendered);

              $rendered.empty().append(formatted);
              $rendered.prop('title', selection.title || selection.text);
          };

          return SingleSelection;
      });

      S2.define('select2/selection/multiple', [
        'jquery',
        './base',
        '../utils'
      ], function ($, BaseSelection, Utils) {
          function MultipleSelection($element, options) {
              MultipleSelection.__super__.constructor.apply(this, arguments);
          }

          Utils.Extend(MultipleSelection, BaseSelection);

          MultipleSelection.prototype.render = function () {
              var $selection = MultipleSelection.__super__.render.call(this);

              $selection.addClass('select2-selection--multiple');

              $selection.html(
                '<ul class="select2-selection__rendered"></ul>'
              );

              return $selection;
          };

          MultipleSelection.prototype.bind = function (container, $container) {
              var self = this;

              MultipleSelection.__super__.bind.apply(this, arguments);

              this.$selection.on('click', function (evt) {
                  self.trigger('toggle', {
                      originalEvent: evt
                  });
              });

              this.$selection.on(
                'click',
                '.select2-selection__choice__remove',
                function (evt) {
                    // Ignore the event if it is disabled
                    if (self.options.get('disabled')) {
                        return;
                    }

                    var $remove = $(this);
                    var $selection = $remove.parent();

                    var data = $selection.data('data');

                    self.trigger('unselect', {
                        originalEvent: evt,
                        data: data
                    });
                }
              );
          };

          MultipleSelection.prototype.clear = function () {
              this.$selection.find('.select2-selection__rendered').empty();
          };

          MultipleSelection.prototype.display = function (data, container) {
              var template = this.options.get('templateSelection');
              var escapeMarkup = this.options.get('escapeMarkup');

              return escapeMarkup(template(data, container));
          };

          MultipleSelection.prototype.selectionContainer = function () {
              var $container = $(
                '<li class="select2-selection__choice">' +
                  '<span class="select2-selection__choice__remove" role="presentation">' +
                    '&times;' +
                  '</span>' +
                '</li>'
              );

              return $container;
          };

          MultipleSelection.prototype.update = function (data) {
              this.clear();

              if (data.length === 0) {
                  return;
              }

              var $selections = [];

              for (var d = 0; d < data.length; d++) {
                  var selection = data[d];

                  var $selection = this.selectionContainer();
                  var formatted = this.display(selection, $selection);

                  $selection.append(formatted);
                  $selection.prop('title', selection.title || selection.text);

                  $selection.data('data', selection);

                  $selections.push($selection);
              }

              var $rendered = this.$selection.find('.select2-selection__rendered');

              Utils.appendMany($rendered, $selections);
          };

          return MultipleSelection;
      });

      S2.define('select2/selection/placeholder', [
        '../utils'
      ], function (Utils) {
          function Placeholder(decorated, $element, options) {
              this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

              decorated.call(this, $element, options);
          }

          Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
              if (typeof placeholder === 'string') {
                  placeholder = {
                      id: '',
                      text: placeholder
                  };
              }

              return placeholder;
          };

          Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
              var $placeholder = this.selectionContainer();

              $placeholder.html(this.display(placeholder));
              $placeholder.addClass('select2-selection__placeholder')
                          .removeClass('select2-selection__choice');

              return $placeholder;
          };

          Placeholder.prototype.update = function (decorated, data) {
              var singlePlaceholder = (
                data.length == 1 && data[0].id != this.placeholder.id
              );
              var multipleSelections = data.length > 1;

              if (multipleSelections || singlePlaceholder) {
                  return decorated.call(this, data);
              }

              this.clear();

              var $placeholder = this.createPlaceholder(this.placeholder);

              this.$selection.find('.select2-selection__rendered').append($placeholder);
          };

          return Placeholder;
      });

      S2.define('select2/selection/allowClear', [
        'jquery',
        '../keys'
      ], function ($, KEYS) {
          function AllowClear() { }

          AllowClear.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              if (this.placeholder == null) {
                  if (this.options.get('debug') && window.console && console.error) {
                      console.error(
                        'Select2: The `allowClear` option should be used in combination ' +
                        'with the `placeholder` option.'
                      );
                  }
              }

              this.$selection.on('mousedown', '.select2-selection__clear',
                function (evt) {
                    self._handleClear(evt);
                });

              container.on('keypress', function (evt) {
                  self._handleKeyboardClear(evt, container);
              });
          };

          AllowClear.prototype._handleClear = function (_, evt) {
              // Ignore the event if it is disabled
              if (this.options.get('disabled')) {
                  return;
              }

              var $clear = this.$selection.find('.select2-selection__clear');

              // Ignore the event if nothing has been selected
              if ($clear.length === 0) {
                  return;
              }

              evt.stopPropagation();

              var data = $clear.data('data');

              for (var d = 0; d < data.length; d++) {
                  var unselectData = {
                      data: data[d]
                  };

                  // Trigger the `unselect` event, so people can prevent it from being
                  // cleared.
                  this.trigger('unselect', unselectData);

                  // If the event was prevented, don't clear it out.
                  if (unselectData.prevented) {
                      return;
                  }
              }

              this.$element.val(this.placeholder.id).trigger('change');

              this.trigger('toggle', {});
          };

          AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
              if (container.isOpen()) {
                  return;
              }

              if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
                  this._handleClear(evt);
              }
          };

          AllowClear.prototype.update = function (decorated, data) {
              decorated.call(this, data);

              if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
                  data.length === 0) {
                  return;
              }

              var $remove = $(
                '<span class="select2-selection__clear">' +
                  '&times;' +
                '</span>'
              );
              $remove.data('data', data);

              this.$selection.find('.select2-selection__rendered').prepend($remove);
          };

          return AllowClear;
      });

      S2.define('select2/selection/search', [
        'jquery',
        '../utils',
        '../keys'
      ], function ($, Utils, KEYS) {
          function Search(decorated, $element, options) {
              decorated.call(this, $element, options);
          }

          Search.prototype.render = function (decorated) {
              var $search = $(
                '<li class="select2-search select2-search--inline">' +
                  '<input class="select2-search__field" type="search" tabindex="-1"' +
                  ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
                  ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
                '</li>'
              );

              this.$searchContainer = $search;
              this.$search = $search.find('input');

              var $rendered = decorated.call(this);

              this._transferTabIndex();

              return $rendered;
          };

          Search.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              container.on('open', function () {
                  self.$search.trigger('focus');
              });

              container.on('close', function () {
                  self.$search.val('');
                  self.$search.removeAttr('aria-activedescendant');
                  self.$search.trigger('focus');
              });

              container.on('enable', function () {
                  self.$search.prop('disabled', false);

                  self._transferTabIndex();
              });

              container.on('disable', function () {
                  self.$search.prop('disabled', true);
              });

              container.on('focus', function (evt) {
                  self.$search.trigger('focus');
              });

              container.on('results:focus', function (params) {
                  self.$search.attr('aria-activedescendant', params.id);
              });

              this.$selection.on('focusin', '.select2-search--inline', function (evt) {
                  self.trigger('focus', evt);
              });

              this.$selection.on('focusout', '.select2-search--inline', function (evt) {
                  self._handleBlur(evt);
              });

              this.$selection.on('keydown', '.select2-search--inline', function (evt) {
                  evt.stopPropagation();

                  self.trigger('keypress', evt);

                  self._keyUpPrevented = evt.isDefaultPrevented();

                  var key = evt.which;

                  if (key === KEYS.BACKSPACE && self.$search.val() === '') {
                      var $previousChoice = self.$searchContainer
                        .prev('.select2-selection__choice');

                      if ($previousChoice.length > 0) {
                          var item = $previousChoice.data('data');

                          self.searchRemoveChoice(item);

                          evt.preventDefault();
                      }
                  }
              });

              // Try to detect the IE version should the `documentMode` property that
              // is stored on the document. This is only implemented in IE and is
              // slightly cleaner than doing a user agent check.
              // This property is not available in Edge, but Edge also doesn't have
              // this bug.
              var msie = document.documentMode;
              var disableInputEvents = msie && msie <= 11;

              // Workaround for browsers which do not support the `input` event
              // This will prevent double-triggering of events for browsers which support
              // both the `keyup` and `input` events.
              this.$selection.on(
                'input.searchcheck',
                '.select2-search--inline',
                function (evt) {
                    // IE will trigger the `input` event when a placeholder is used on a
                    // search box. To get around this issue, we are forced to ignore all
                    // `input` events in IE and keep using `keyup`.
                    if (disableInputEvents) {
                        self.$selection.off('input.search input.searchcheck');
                        return;
                    }

                    // Unbind the duplicated `keyup` event
                    self.$selection.off('keyup.search');
                }
              );

              this.$selection.on(
                'keyup.search input.search',
                '.select2-search--inline',
                function (evt) {
                    // IE will trigger the `input` event when a placeholder is used on a
                    // search box. To get around this issue, we are forced to ignore all
                    // `input` events in IE and keep using `keyup`.
                    if (disableInputEvents && evt.type === 'input') {
                        self.$selection.off('input.search input.searchcheck');
                        return;
                    }

                    var key = evt.which;

                    // We can freely ignore events from modifier keys
                    if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                        return;
                    }

                    // Tabbing will be handled during the `keydown` phase
                    if (key == KEYS.TAB) {
                        return;
                    }

                    self.handleSearch(evt);
                }
              );
          };

          /**
           * This method will transfer the tabindex attribute from the rendered
           * selection to the search box. This allows for the search box to be used as
           * the primary focus instead of the selection container.
           *
           * @private
           */
          Search.prototype._transferTabIndex = function (decorated) {
              this.$search.attr('tabindex', this.$selection.attr('tabindex'));
              this.$selection.attr('tabindex', '-1');
          };

          Search.prototype.createPlaceholder = function (decorated, placeholder) {
              this.$search.attr('placeholder', placeholder.text);
          };

          Search.prototype.update = function (decorated, data) {
              var searchHadFocus = this.$search[0] == document.activeElement;

              this.$search.attr('placeholder', '');

              decorated.call(this, data);

              this.$selection.find('.select2-selection__rendered')
                             .append(this.$searchContainer);

              this.resizeSearch();
              if (searchHadFocus) {
                  this.$search.focus();
              }
          };

          Search.prototype.handleSearch = function () {
              this.resizeSearch();

              if (!this._keyUpPrevented) {
                  var input = this.$search.val();

                  this.trigger('query', {
                      term: input
                  });
              }

              this._keyUpPrevented = false;
          };

          Search.prototype.searchRemoveChoice = function (decorated, item) {
              this.trigger('unselect', {
                  data: item
              });

              this.$search.val(item.text);
              this.handleSearch();
          };

          Search.prototype.resizeSearch = function () {
              this.$search.css('width', '25px');

              var width = '';

              if (this.$search.attr('placeholder') !== '') {
                  width = this.$selection.find('.select2-selection__rendered').innerWidth();
              } else {
                  var minimumWidth = this.$search.val().length + 1;

                  width = (minimumWidth * 0.75) + 'em';
              }

              this.$search.css('width', width);
          };

          return Search;
      });

      S2.define('select2/selection/eventRelay', [
        'jquery'
      ], function ($) {
          function EventRelay() { }

          EventRelay.prototype.bind = function (decorated, container, $container) {
              var self = this;
              var relayEvents = [
                'open', 'opening',
                'close', 'closing',
                'select', 'selecting',
                'unselect', 'unselecting'
              ];

              var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

              decorated.call(this, container, $container);

              container.on('*', function (name, params) {
                  // Ignore events that should not be relayed
                  if ($.inArray(name, relayEvents) === -1) {
                      return;
                  }

                  // The parameters should always be an object
                  params = params || {};

                  // Generate the jQuery event for the Select2 event
                  var evt = $.Event('select2:' + name, {
                      params: params
                  });

                  self.$element.trigger(evt);

                  // Only handle preventable events if it was one
                  if ($.inArray(name, preventableEvents) === -1) {
                      return;
                  }

                  params.prevented = evt.isDefaultPrevented();
              });
          };

          return EventRelay;
      });

      S2.define('select2/translation', [
        'jquery',
        'require'
      ], function ($, require) {
          function Translation(dict) {
              this.dict = dict || {};
          }

          Translation.prototype.all = function () {
              return this.dict;
          };

          Translation.prototype.get = function (key) {
              return this.dict[key];
          };

          Translation.prototype.extend = function (translation) {
              this.dict = $.extend({}, translation.all(), this.dict);
          };

          // Static functions

          Translation._cache = {};

          Translation.loadPath = function (path) {
              if (!(path in Translation._cache)) {
                  var translations = require(path);

                  Translation._cache[path] = translations;
              }

              return new Translation(Translation._cache[path]);
          };

          return Translation;
      });

      S2.define('select2/diacritics', [

      ], function () {
          var diacritics = {
              '\u24B6': 'A',
              '\uFF21': 'A',
              '\u00C0': 'A',
              '\u00C1': 'A',
              '\u00C2': 'A',
              '\u1EA6': 'A',
              '\u1EA4': 'A',
              '\u1EAA': 'A',
              '\u1EA8': 'A',
              '\u00C3': 'A',
              '\u0100': 'A',
              '\u0102': 'A',
              '\u1EB0': 'A',
              '\u1EAE': 'A',
              '\u1EB4': 'A',
              '\u1EB2': 'A',
              '\u0226': 'A',
              '\u01E0': 'A',
              '\u00C4': 'A',
              '\u01DE': 'A',
              '\u1EA2': 'A',
              '\u00C5': 'A',
              '\u01FA': 'A',
              '\u01CD': 'A',
              '\u0200': 'A',
              '\u0202': 'A',
              '\u1EA0': 'A',
              '\u1EAC': 'A',
              '\u1EB6': 'A',
              '\u1E00': 'A',
              '\u0104': 'A',
              '\u023A': 'A',
              '\u2C6F': 'A',
              '\uA732': 'AA',
              '\u00C6': 'AE',
              '\u01FC': 'AE',
              '\u01E2': 'AE',
              '\uA734': 'AO',
              '\uA736': 'AU',
              '\uA738': 'AV',
              '\uA73A': 'AV',
              '\uA73C': 'AY',
              '\u24B7': 'B',
              '\uFF22': 'B',
              '\u1E02': 'B',
              '\u1E04': 'B',
              '\u1E06': 'B',
              '\u0243': 'B',
              '\u0182': 'B',
              '\u0181': 'B',
              '\u24B8': 'C',
              '\uFF23': 'C',
              '\u0106': 'C',
              '\u0108': 'C',
              '\u010A': 'C',
              '\u010C': 'C',
              '\u00C7': 'C',
              '\u1E08': 'C',
              '\u0187': 'C',
              '\u023B': 'C',
              '\uA73E': 'C',
              '\u24B9': 'D',
              '\uFF24': 'D',
              '\u1E0A': 'D',
              '\u010E': 'D',
              '\u1E0C': 'D',
              '\u1E10': 'D',
              '\u1E12': 'D',
              '\u1E0E': 'D',
              '\u0110': 'D',
              '\u018B': 'D',
              '\u018A': 'D',
              '\u0189': 'D',
              '\uA779': 'D',
              '\u01F1': 'DZ',
              '\u01C4': 'DZ',
              '\u01F2': 'Dz',
              '\u01C5': 'Dz',
              '\u24BA': 'E',
              '\uFF25': 'E',
              '\u00C8': 'E',
              '\u00C9': 'E',
              '\u00CA': 'E',
              '\u1EC0': 'E',
              '\u1EBE': 'E',
              '\u1EC4': 'E',
              '\u1EC2': 'E',
              '\u1EBC': 'E',
              '\u0112': 'E',
              '\u1E14': 'E',
              '\u1E16': 'E',
              '\u0114': 'E',
              '\u0116': 'E',
              '\u00CB': 'E',
              '\u1EBA': 'E',
              '\u011A': 'E',
              '\u0204': 'E',
              '\u0206': 'E',
              '\u1EB8': 'E',
              '\u1EC6': 'E',
              '\u0228': 'E',
              '\u1E1C': 'E',
              '\u0118': 'E',
              '\u1E18': 'E',
              '\u1E1A': 'E',
              '\u0190': 'E',
              '\u018E': 'E',
              '\u24BB': 'F',
              '\uFF26': 'F',
              '\u1E1E': 'F',
              '\u0191': 'F',
              '\uA77B': 'F',
              '\u24BC': 'G',
              '\uFF27': 'G',
              '\u01F4': 'G',
              '\u011C': 'G',
              '\u1E20': 'G',
              '\u011E': 'G',
              '\u0120': 'G',
              '\u01E6': 'G',
              '\u0122': 'G',
              '\u01E4': 'G',
              '\u0193': 'G',
              '\uA7A0': 'G',
              '\uA77D': 'G',
              '\uA77E': 'G',
              '\u24BD': 'H',
              '\uFF28': 'H',
              '\u0124': 'H',
              '\u1E22': 'H',
              '\u1E26': 'H',
              '\u021E': 'H',
              '\u1E24': 'H',
              '\u1E28': 'H',
              '\u1E2A': 'H',
              '\u0126': 'H',
              '\u2C67': 'H',
              '\u2C75': 'H',
              '\uA78D': 'H',
              '\u24BE': 'I',
              '\uFF29': 'I',
              '\u00CC': 'I',
              '\u00CD': 'I',
              '\u00CE': 'I',
              '\u0128': 'I',
              '\u012A': 'I',
              '\u012C': 'I',
              '\u0130': 'I',
              '\u00CF': 'I',
              '\u1E2E': 'I',
              '\u1EC8': 'I',
              '\u01CF': 'I',
              '\u0208': 'I',
              '\u020A': 'I',
              '\u1ECA': 'I',
              '\u012E': 'I',
              '\u1E2C': 'I',
              '\u0197': 'I',
              '\u24BF': 'J',
              '\uFF2A': 'J',
              '\u0134': 'J',
              '\u0248': 'J',
              '\u24C0': 'K',
              '\uFF2B': 'K',
              '\u1E30': 'K',
              '\u01E8': 'K',
              '\u1E32': 'K',
              '\u0136': 'K',
              '\u1E34': 'K',
              '\u0198': 'K',
              '\u2C69': 'K',
              '\uA740': 'K',
              '\uA742': 'K',
              '\uA744': 'K',
              '\uA7A2': 'K',
              '\u24C1': 'L',
              '\uFF2C': 'L',
              '\u013F': 'L',
              '\u0139': 'L',
              '\u013D': 'L',
              '\u1E36': 'L',
              '\u1E38': 'L',
              '\u013B': 'L',
              '\u1E3C': 'L',
              '\u1E3A': 'L',
              '\u0141': 'L',
              '\u023D': 'L',
              '\u2C62': 'L',
              '\u2C60': 'L',
              '\uA748': 'L',
              '\uA746': 'L',
              '\uA780': 'L',
              '\u01C7': 'LJ',
              '\u01C8': 'Lj',
              '\u24C2': 'M',
              '\uFF2D': 'M',
              '\u1E3E': 'M',
              '\u1E40': 'M',
              '\u1E42': 'M',
              '\u2C6E': 'M',
              '\u019C': 'M',
              '\u24C3': 'N',
              '\uFF2E': 'N',
              '\u01F8': 'N',
              '\u0143': 'N',
              '\u00D1': 'N',
              '\u1E44': 'N',
              '\u0147': 'N',
              '\u1E46': 'N',
              '\u0145': 'N',
              '\u1E4A': 'N',
              '\u1E48': 'N',
              '\u0220': 'N',
              '\u019D': 'N',
              '\uA790': 'N',
              '\uA7A4': 'N',
              '\u01CA': 'NJ',
              '\u01CB': 'Nj',
              '\u24C4': 'O',
              '\uFF2F': 'O',
              '\u00D2': 'O',
              '\u00D3': 'O',
              '\u00D4': 'O',
              '\u1ED2': 'O',
              '\u1ED0': 'O',
              '\u1ED6': 'O',
              '\u1ED4': 'O',
              '\u00D5': 'O',
              '\u1E4C': 'O',
              '\u022C': 'O',
              '\u1E4E': 'O',
              '\u014C': 'O',
              '\u1E50': 'O',
              '\u1E52': 'O',
              '\u014E': 'O',
              '\u022E': 'O',
              '\u0230': 'O',
              '\u00D6': 'O',
              '\u022A': 'O',
              '\u1ECE': 'O',
              '\u0150': 'O',
              '\u01D1': 'O',
              '\u020C': 'O',
              '\u020E': 'O',
              '\u01A0': 'O',
              '\u1EDC': 'O',
              '\u1EDA': 'O',
              '\u1EE0': 'O',
              '\u1EDE': 'O',
              '\u1EE2': 'O',
              '\u1ECC': 'O',
              '\u1ED8': 'O',
              '\u01EA': 'O',
              '\u01EC': 'O',
              '\u00D8': 'O',
              '\u01FE': 'O',
              '\u0186': 'O',
              '\u019F': 'O',
              '\uA74A': 'O',
              '\uA74C': 'O',
              '\u01A2': 'OI',
              '\uA74E': 'OO',
              '\u0222': 'OU',
              '\u24C5': 'P',
              '\uFF30': 'P',
              '\u1E54': 'P',
              '\u1E56': 'P',
              '\u01A4': 'P',
              '\u2C63': 'P',
              '\uA750': 'P',
              '\uA752': 'P',
              '\uA754': 'P',
              '\u24C6': 'Q',
              '\uFF31': 'Q',
              '\uA756': 'Q',
              '\uA758': 'Q',
              '\u024A': 'Q',
              '\u24C7': 'R',
              '\uFF32': 'R',
              '\u0154': 'R',
              '\u1E58': 'R',
              '\u0158': 'R',
              '\u0210': 'R',
              '\u0212': 'R',
              '\u1E5A': 'R',
              '\u1E5C': 'R',
              '\u0156': 'R',
              '\u1E5E': 'R',
              '\u024C': 'R',
              '\u2C64': 'R',
              '\uA75A': 'R',
              '\uA7A6': 'R',
              '\uA782': 'R',
              '\u24C8': 'S',
              '\uFF33': 'S',
              '\u1E9E': 'S',
              '\u015A': 'S',
              '\u1E64': 'S',
              '\u015C': 'S',
              '\u1E60': 'S',
              '\u0160': 'S',
              '\u1E66': 'S',
              '\u1E62': 'S',
              '\u1E68': 'S',
              '\u0218': 'S',
              '\u015E': 'S',
              '\u2C7E': 'S',
              '\uA7A8': 'S',
              '\uA784': 'S',
              '\u24C9': 'T',
              '\uFF34': 'T',
              '\u1E6A': 'T',
              '\u0164': 'T',
              '\u1E6C': 'T',
              '\u021A': 'T',
              '\u0162': 'T',
              '\u1E70': 'T',
              '\u1E6E': 'T',
              '\u0166': 'T',
              '\u01AC': 'T',
              '\u01AE': 'T',
              '\u023E': 'T',
              '\uA786': 'T',
              '\uA728': 'TZ',
              '\u24CA': 'U',
              '\uFF35': 'U',
              '\u00D9': 'U',
              '\u00DA': 'U',
              '\u00DB': 'U',
              '\u0168': 'U',
              '\u1E78': 'U',
              '\u016A': 'U',
              '\u1E7A': 'U',
              '\u016C': 'U',
              '\u00DC': 'U',
              '\u01DB': 'U',
              '\u01D7': 'U',
              '\u01D5': 'U',
              '\u01D9': 'U',
              '\u1EE6': 'U',
              '\u016E': 'U',
              '\u0170': 'U',
              '\u01D3': 'U',
              '\u0214': 'U',
              '\u0216': 'U',
              '\u01AF': 'U',
              '\u1EEA': 'U',
              '\u1EE8': 'U',
              '\u1EEE': 'U',
              '\u1EEC': 'U',
              '\u1EF0': 'U',
              '\u1EE4': 'U',
              '\u1E72': 'U',
              '\u0172': 'U',
              '\u1E76': 'U',
              '\u1E74': 'U',
              '\u0244': 'U',
              '\u24CB': 'V',
              '\uFF36': 'V',
              '\u1E7C': 'V',
              '\u1E7E': 'V',
              '\u01B2': 'V',
              '\uA75E': 'V',
              '\u0245': 'V',
              '\uA760': 'VY',
              '\u24CC': 'W',
              '\uFF37': 'W',
              '\u1E80': 'W',
              '\u1E82': 'W',
              '\u0174': 'W',
              '\u1E86': 'W',
              '\u1E84': 'W',
              '\u1E88': 'W',
              '\u2C72': 'W',
              '\u24CD': 'X',
              '\uFF38': 'X',
              '\u1E8A': 'X',
              '\u1E8C': 'X',
              '\u24CE': 'Y',
              '\uFF39': 'Y',
              '\u1EF2': 'Y',
              '\u00DD': 'Y',
              '\u0176': 'Y',
              '\u1EF8': 'Y',
              '\u0232': 'Y',
              '\u1E8E': 'Y',
              '\u0178': 'Y',
              '\u1EF6': 'Y',
              '\u1EF4': 'Y',
              '\u01B3': 'Y',
              '\u024E': 'Y',
              '\u1EFE': 'Y',
              '\u24CF': 'Z',
              '\uFF3A': 'Z',
              '\u0179': 'Z',
              '\u1E90': 'Z',
              '\u017B': 'Z',
              '\u017D': 'Z',
              '\u1E92': 'Z',
              '\u1E94': 'Z',
              '\u01B5': 'Z',
              '\u0224': 'Z',
              '\u2C7F': 'Z',
              '\u2C6B': 'Z',
              '\uA762': 'Z',
              '\u24D0': 'a',
              '\uFF41': 'a',
              '\u1E9A': 'a',
              '\u00E0': 'a',
              '\u00E1': 'a',
              '\u00E2': 'a',
              '\u1EA7': 'a',
              '\u1EA5': 'a',
              '\u1EAB': 'a',
              '\u1EA9': 'a',
              '\u00E3': 'a',
              '\u0101': 'a',
              '\u0103': 'a',
              '\u1EB1': 'a',
              '\u1EAF': 'a',
              '\u1EB5': 'a',
              '\u1EB3': 'a',
              '\u0227': 'a',
              '\u01E1': 'a',
              '\u00E4': 'a',
              '\u01DF': 'a',
              '\u1EA3': 'a',
              '\u00E5': 'a',
              '\u01FB': 'a',
              '\u01CE': 'a',
              '\u0201': 'a',
              '\u0203': 'a',
              '\u1EA1': 'a',
              '\u1EAD': 'a',
              '\u1EB7': 'a',
              '\u1E01': 'a',
              '\u0105': 'a',
              '\u2C65': 'a',
              '\u0250': 'a',
              '\uA733': 'aa',
              '\u00E6': 'ae',
              '\u01FD': 'ae',
              '\u01E3': 'ae',
              '\uA735': 'ao',
              '\uA737': 'au',
              '\uA739': 'av',
              '\uA73B': 'av',
              '\uA73D': 'ay',
              '\u24D1': 'b',
              '\uFF42': 'b',
              '\u1E03': 'b',
              '\u1E05': 'b',
              '\u1E07': 'b',
              '\u0180': 'b',
              '\u0183': 'b',
              '\u0253': 'b',
              '\u24D2': 'c',
              '\uFF43': 'c',
              '\u0107': 'c',
              '\u0109': 'c',
              '\u010B': 'c',
              '\u010D': 'c',
              '\u00E7': 'c',
              '\u1E09': 'c',
              '\u0188': 'c',
              '\u023C': 'c',
              '\uA73F': 'c',
              '\u2184': 'c',
              '\u24D3': 'd',
              '\uFF44': 'd',
              '\u1E0B': 'd',
              '\u010F': 'd',
              '\u1E0D': 'd',
              '\u1E11': 'd',
              '\u1E13': 'd',
              '\u1E0F': 'd',
              '\u0111': 'd',
              '\u018C': 'd',
              '\u0256': 'd',
              '\u0257': 'd',
              '\uA77A': 'd',
              '\u01F3': 'dz',
              '\u01C6': 'dz',
              '\u24D4': 'e',
              '\uFF45': 'e',
              '\u00E8': 'e',
              '\u00E9': 'e',
              '\u00EA': 'e',
              '\u1EC1': 'e',
              '\u1EBF': 'e',
              '\u1EC5': 'e',
              '\u1EC3': 'e',
              '\u1EBD': 'e',
              '\u0113': 'e',
              '\u1E15': 'e',
              '\u1E17': 'e',
              '\u0115': 'e',
              '\u0117': 'e',
              '\u00EB': 'e',
              '\u1EBB': 'e',
              '\u011B': 'e',
              '\u0205': 'e',
              '\u0207': 'e',
              '\u1EB9': 'e',
              '\u1EC7': 'e',
              '\u0229': 'e',
              '\u1E1D': 'e',
              '\u0119': 'e',
              '\u1E19': 'e',
              '\u1E1B': 'e',
              '\u0247': 'e',
              '\u025B': 'e',
              '\u01DD': 'e',
              '\u24D5': 'f',
              '\uFF46': 'f',
              '\u1E1F': 'f',
              '\u0192': 'f',
              '\uA77C': 'f',
              '\u24D6': 'g',
              '\uFF47': 'g',
              '\u01F5': 'g',
              '\u011D': 'g',
              '\u1E21': 'g',
              '\u011F': 'g',
              '\u0121': 'g',
              '\u01E7': 'g',
              '\u0123': 'g',
              '\u01E5': 'g',
              '\u0260': 'g',
              '\uA7A1': 'g',
              '\u1D79': 'g',
              '\uA77F': 'g',
              '\u24D7': 'h',
              '\uFF48': 'h',
              '\u0125': 'h',
              '\u1E23': 'h',
              '\u1E27': 'h',
              '\u021F': 'h',
              '\u1E25': 'h',
              '\u1E29': 'h',
              '\u1E2B': 'h',
              '\u1E96': 'h',
              '\u0127': 'h',
              '\u2C68': 'h',
              '\u2C76': 'h',
              '\u0265': 'h',
              '\u0195': 'hv',
              '\u24D8': 'i',
              '\uFF49': 'i',
              '\u00EC': 'i',
              '\u00ED': 'i',
              '\u00EE': 'i',
              '\u0129': 'i',
              '\u012B': 'i',
              '\u012D': 'i',
              '\u00EF': 'i',
              '\u1E2F': 'i',
              '\u1EC9': 'i',
              '\u01D0': 'i',
              '\u0209': 'i',
              '\u020B': 'i',
              '\u1ECB': 'i',
              '\u012F': 'i',
              '\u1E2D': 'i',
              '\u0268': 'i',
              '\u0131': 'i',
              '\u24D9': 'j',
              '\uFF4A': 'j',
              '\u0135': 'j',
              '\u01F0': 'j',
              '\u0249': 'j',
              '\u24DA': 'k',
              '\uFF4B': 'k',
              '\u1E31': 'k',
              '\u01E9': 'k',
              '\u1E33': 'k',
              '\u0137': 'k',
              '\u1E35': 'k',
              '\u0199': 'k',
              '\u2C6A': 'k',
              '\uA741': 'k',
              '\uA743': 'k',
              '\uA745': 'k',
              '\uA7A3': 'k',
              '\u24DB': 'l',
              '\uFF4C': 'l',
              '\u0140': 'l',
              '\u013A': 'l',
              '\u013E': 'l',
              '\u1E37': 'l',
              '\u1E39': 'l',
              '\u013C': 'l',
              '\u1E3D': 'l',
              '\u1E3B': 'l',
              '\u017F': 'l',
              '\u0142': 'l',
              '\u019A': 'l',
              '\u026B': 'l',
              '\u2C61': 'l',
              '\uA749': 'l',
              '\uA781': 'l',
              '\uA747': 'l',
              '\u01C9': 'lj',
              '\u24DC': 'm',
              '\uFF4D': 'm',
              '\u1E3F': 'm',
              '\u1E41': 'm',
              '\u1E43': 'm',
              '\u0271': 'm',
              '\u026F': 'm',
              '\u24DD': 'n',
              '\uFF4E': 'n',
              '\u01F9': 'n',
              '\u0144': 'n',
              '\u00F1': 'n',
              '\u1E45': 'n',
              '\u0148': 'n',
              '\u1E47': 'n',
              '\u0146': 'n',
              '\u1E4B': 'n',
              '\u1E49': 'n',
              '\u019E': 'n',
              '\u0272': 'n',
              '\u0149': 'n',
              '\uA791': 'n',
              '\uA7A5': 'n',
              '\u01CC': 'nj',
              '\u24DE': 'o',
              '\uFF4F': 'o',
              '\u00F2': 'o',
              '\u00F3': 'o',
              '\u00F4': 'o',
              '\u1ED3': 'o',
              '\u1ED1': 'o',
              '\u1ED7': 'o',
              '\u1ED5': 'o',
              '\u00F5': 'o',
              '\u1E4D': 'o',
              '\u022D': 'o',
              '\u1E4F': 'o',
              '\u014D': 'o',
              '\u1E51': 'o',
              '\u1E53': 'o',
              '\u014F': 'o',
              '\u022F': 'o',
              '\u0231': 'o',
              '\u00F6': 'o',
              '\u022B': 'o',
              '\u1ECF': 'o',
              '\u0151': 'o',
              '\u01D2': 'o',
              '\u020D': 'o',
              '\u020F': 'o',
              '\u01A1': 'o',
              '\u1EDD': 'o',
              '\u1EDB': 'o',
              '\u1EE1': 'o',
              '\u1EDF': 'o',
              '\u1EE3': 'o',
              '\u1ECD': 'o',
              '\u1ED9': 'o',
              '\u01EB': 'o',
              '\u01ED': 'o',
              '\u00F8': 'o',
              '\u01FF': 'o',
              '\u0254': 'o',
              '\uA74B': 'o',
              '\uA74D': 'o',
              '\u0275': 'o',
              '\u01A3': 'oi',
              '\u0223': 'ou',
              '\uA74F': 'oo',
              '\u24DF': 'p',
              '\uFF50': 'p',
              '\u1E55': 'p',
              '\u1E57': 'p',
              '\u01A5': 'p',
              '\u1D7D': 'p',
              '\uA751': 'p',
              '\uA753': 'p',
              '\uA755': 'p',
              '\u24E0': 'q',
              '\uFF51': 'q',
              '\u024B': 'q',
              '\uA757': 'q',
              '\uA759': 'q',
              '\u24E1': 'r',
              '\uFF52': 'r',
              '\u0155': 'r',
              '\u1E59': 'r',
              '\u0159': 'r',
              '\u0211': 'r',
              '\u0213': 'r',
              '\u1E5B': 'r',
              '\u1E5D': 'r',
              '\u0157': 'r',
              '\u1E5F': 'r',
              '\u024D': 'r',
              '\u027D': 'r',
              '\uA75B': 'r',
              '\uA7A7': 'r',
              '\uA783': 'r',
              '\u24E2': 's',
              '\uFF53': 's',
              '\u00DF': 's',
              '\u015B': 's',
              '\u1E65': 's',
              '\u015D': 's',
              '\u1E61': 's',
              '\u0161': 's',
              '\u1E67': 's',
              '\u1E63': 's',
              '\u1E69': 's',
              '\u0219': 's',
              '\u015F': 's',
              '\u023F': 's',
              '\uA7A9': 's',
              '\uA785': 's',
              '\u1E9B': 's',
              '\u24E3': 't',
              '\uFF54': 't',
              '\u1E6B': 't',
              '\u1E97': 't',
              '\u0165': 't',
              '\u1E6D': 't',
              '\u021B': 't',
              '\u0163': 't',
              '\u1E71': 't',
              '\u1E6F': 't',
              '\u0167': 't',
              '\u01AD': 't',
              '\u0288': 't',
              '\u2C66': 't',
              '\uA787': 't',
              '\uA729': 'tz',
              '\u24E4': 'u',
              '\uFF55': 'u',
              '\u00F9': 'u',
              '\u00FA': 'u',
              '\u00FB': 'u',
              '\u0169': 'u',
              '\u1E79': 'u',
              '\u016B': 'u',
              '\u1E7B': 'u',
              '\u016D': 'u',
              '\u00FC': 'u',
              '\u01DC': 'u',
              '\u01D8': 'u',
              '\u01D6': 'u',
              '\u01DA': 'u',
              '\u1EE7': 'u',
              '\u016F': 'u',
              '\u0171': 'u',
              '\u01D4': 'u',
              '\u0215': 'u',
              '\u0217': 'u',
              '\u01B0': 'u',
              '\u1EEB': 'u',
              '\u1EE9': 'u',
              '\u1EEF': 'u',
              '\u1EED': 'u',
              '\u1EF1': 'u',
              '\u1EE5': 'u',
              '\u1E73': 'u',
              '\u0173': 'u',
              '\u1E77': 'u',
              '\u1E75': 'u',
              '\u0289': 'u',
              '\u24E5': 'v',
              '\uFF56': 'v',
              '\u1E7D': 'v',
              '\u1E7F': 'v',
              '\u028B': 'v',
              '\uA75F': 'v',
              '\u028C': 'v',
              '\uA761': 'vy',
              '\u24E6': 'w',
              '\uFF57': 'w',
              '\u1E81': 'w',
              '\u1E83': 'w',
              '\u0175': 'w',
              '\u1E87': 'w',
              '\u1E85': 'w',
              '\u1E98': 'w',
              '\u1E89': 'w',
              '\u2C73': 'w',
              '\u24E7': 'x',
              '\uFF58': 'x',
              '\u1E8B': 'x',
              '\u1E8D': 'x',
              '\u24E8': 'y',
              '\uFF59': 'y',
              '\u1EF3': 'y',
              '\u00FD': 'y',
              '\u0177': 'y',
              '\u1EF9': 'y',
              '\u0233': 'y',
              '\u1E8F': 'y',
              '\u00FF': 'y',
              '\u1EF7': 'y',
              '\u1E99': 'y',
              '\u1EF5': 'y',
              '\u01B4': 'y',
              '\u024F': 'y',
              '\u1EFF': 'y',
              '\u24E9': 'z',
              '\uFF5A': 'z',
              '\u017A': 'z',
              '\u1E91': 'z',
              '\u017C': 'z',
              '\u017E': 'z',
              '\u1E93': 'z',
              '\u1E95': 'z',
              '\u01B6': 'z',
              '\u0225': 'z',
              '\u0240': 'z',
              '\u2C6C': 'z',
              '\uA763': 'z',
              '\u0386': '\u0391',
              '\u0388': '\u0395',
              '\u0389': '\u0397',
              '\u038A': '\u0399',
              '\u03AA': '\u0399',
              '\u038C': '\u039F',
              '\u038E': '\u03A5',
              '\u03AB': '\u03A5',
              '\u038F': '\u03A9',
              '\u03AC': '\u03B1',
              '\u03AD': '\u03B5',
              '\u03AE': '\u03B7',
              '\u03AF': '\u03B9',
              '\u03CA': '\u03B9',
              '\u0390': '\u03B9',
              '\u03CC': '\u03BF',
              '\u03CD': '\u03C5',
              '\u03CB': '\u03C5',
              '\u03B0': '\u03C5',
              '\u03C9': '\u03C9',
              '\u03C2': '\u03C3'
          };

          return diacritics;
      });

      S2.define('select2/data/base', [
        '../utils'
      ], function (Utils) {
          function BaseAdapter($element, options) {
              BaseAdapter.__super__.constructor.call(this);
          }

          Utils.Extend(BaseAdapter, Utils.Observable);

          BaseAdapter.prototype.current = function (callback) {
              throw new Error('The `current` method must be defined in child classes.');
          };

          BaseAdapter.prototype.query = function (params, callback) {
              throw new Error('The `query` method must be defined in child classes.');
          };

          BaseAdapter.prototype.bind = function (container, $container) {
              // Can be implemented in subclasses
          };

          BaseAdapter.prototype.destroy = function () {
              // Can be implemented in subclasses
          };

          BaseAdapter.prototype.generateResultId = function (container, data) {
              var id = container.id + '-result-';

              id += Utils.generateChars(4);

              if (data.id != null) {
                  id += '-' + data.id.toString();
              } else {
                  id += '-' + Utils.generateChars(4);
              }
              return id;
          };

          return BaseAdapter;
      });

      S2.define('select2/data/select', [
        './base',
        '../utils',
        'jquery'
      ], function (BaseAdapter, Utils, $) {
          function SelectAdapter($element, options) {
              this.$element = $element;
              this.options = options;

              SelectAdapter.__super__.constructor.call(this);
          }

          Utils.Extend(SelectAdapter, BaseAdapter);

          SelectAdapter.prototype.current = function (callback) {
              var data = [];
              var self = this;

              this.$element.find(':selected').each(function () {
                  var $option = $(this);

                  var option = self.item($option);

                  data.push(option);
              });

              callback(data);
          };

          SelectAdapter.prototype.select = function (data) {
              var self = this;

              data.selected = true;

              // If data.element is a DOM node, use it instead
              if ($(data.element).is('option')) {
                  data.element.selected = true;

                  this.$element.trigger('change');

                  return;
              }

              if (this.$element.prop('multiple')) {
                  this.current(function (currentData) {
                      var val = [];

                      data = [data];
                      data.push.apply(data, currentData);

                      for (var d = 0; d < data.length; d++) {
                          var id = data[d].id;

                          if ($.inArray(id, val) === -1) {
                              val.push(id);
                          }
                      }

                      self.$element.val(val);
                      self.$element.trigger('change');
                  });
              } else {
                  var val = data.id;

                  this.$element.val(val);
                  this.$element.trigger('change');
              }
          };

          SelectAdapter.prototype.unselect = function (data) {
              var self = this;

              if (!this.$element.prop('multiple')) {
                  return;
              }

              data.selected = false;

              if ($(data.element).is('option')) {
                  data.element.selected = false;

                  this.$element.trigger('change');

                  return;
              }

              this.current(function (currentData) {
                  var val = [];

                  for (var d = 0; d < currentData.length; d++) {
                      var id = currentData[d].id;

                      if (id !== data.id && $.inArray(id, val) === -1) {
                          val.push(id);
                      }
                  }

                  self.$element.val(val);

                  self.$element.trigger('change');
              });
          };

          SelectAdapter.prototype.bind = function (container, $container) {
              var self = this;

              this.container = container;

              container.on('select', function (params) {
                  self.select(params.data);
              });

              container.on('unselect', function (params) {
                  self.unselect(params.data);
              });
          };

          SelectAdapter.prototype.destroy = function () {
              // Remove anything added to child elements
              this.$element.find('*').each(function () {
                  // Remove any custom data set by Select2
                  $.removeData(this, 'data');
              });
          };

          SelectAdapter.prototype.query = function (params, callback) {
              var data = [];
              var self = this;

              var $options = this.$element.children();

              $options.each(function () {
                  var $option = $(this);

                  if (!$option.is('option') && !$option.is('optgroup')) {
                      return;
                  }

                  var option = self.item($option);

                  var matches = self.matches(params, option);

                  if (matches !== null) {
                      data.push(matches);
                  }
              });

              callback({
                  results: data
              });
          };

          SelectAdapter.prototype.addOptions = function ($options) {
              Utils.appendMany(this.$element, $options);
          };

          SelectAdapter.prototype.option = function (data) {
              var option;

              if (data.children) {
                  option = document.createElement('optgroup');
                  option.label = data.text;
              } else {
                  option = document.createElement('option');

                  if (option.textContent !== undefined) {
                      option.textContent = data.text;
                  } else {
                      option.innerText = data.text;
                  }
              }

              if (data.id) {
                  option.value = data.id;
              }

              if (data.disabled) {
                  option.disabled = true;
              }

              if (data.selected) {
                  option.selected = true;
              }

              if (data.title) {
                  option.title = data.title;
              }

              var $option = $(option);

              var normalizedData = this._normalizeItem(data);
              normalizedData.element = option;

              // Override the option's data with the combined data
              $.data(option, 'data', normalizedData);

              return $option;
          };

          SelectAdapter.prototype.item = function ($option) {
              var data = {};

              data = $.data($option[0], 'data');

              if (data != null) {
                  return data;
              }

              if ($option.is('option')) {
                  data = {
                      id: $option.val(),
                      text: $option.text(),
                      disabled: $option.prop('disabled'),
                      selected: $option.prop('selected'),
                      title: $option.prop('title')
                  };
              } else if ($option.is('optgroup')) {
                  data = {
                      text: $option.prop('label'),
                      children: [],
                      title: $option.prop('title')
                  };

                  var $children = $option.children('option');
                  var children = [];

                  for (var c = 0; c < $children.length; c++) {
                      var $child = $($children[c]);

                      var child = this.item($child);

                      children.push(child);
                  }

                  data.children = children;
              }

              data = this._normalizeItem(data);
              data.element = $option[0];

              $.data($option[0], 'data', data);

              return data;
          };

          SelectAdapter.prototype._normalizeItem = function (item) {
              if (!$.isPlainObject(item)) {
                  item = {
                      id: item,
                      text: item
                  };
              }

              item = $.extend({}, {
                  text: ''
              }, item);

              var defaults = {
                  selected: false,
                  disabled: false
              };

              if (item.id != null) {
                  item.id = item.id.toString();
              }

              if (item.text != null) {
                  item.text = item.text.toString();
              }

              if (item._resultId == null && item.id && this.container != null) {
                  item._resultId = this.generateResultId(this.container, item);
              }

              return $.extend({}, defaults, item);
          };

          SelectAdapter.prototype.matches = function (params, data) {
              var matcher = this.options.get('matcher');

              return matcher(params, data);
          };

          return SelectAdapter;
      });

      S2.define('select2/data/array', [
        './select',
        '../utils',
        'jquery'
      ], function (SelectAdapter, Utils, $) {
          function ArrayAdapter($element, options) {
              var data = options.get('data') || [];

              ArrayAdapter.__super__.constructor.call(this, $element, options);

              this.addOptions(this.convertToOptions(data));
          }

          Utils.Extend(ArrayAdapter, SelectAdapter);

          ArrayAdapter.prototype.select = function (data) {
              var $option = this.$element.find('option').filter(function (i, elm) {
                  return elm.value == data.id.toString();
              });

              if ($option.length === 0) {
                  $option = this.option(data);

                  this.addOptions($option);
              }

              ArrayAdapter.__super__.select.call(this, data);
          };

          ArrayAdapter.prototype.convertToOptions = function (data) {
              var self = this;

              var $existing = this.$element.find('option');
              var existingIds = $existing.map(function () {
                  return self.item($(this)).id;
              }).get();

              var $options = [];

              // Filter out all items except for the one passed in the argument
              function onlyItem(item) {
                  return function () {
                      return $(this).val() == item.id;
                  };
              }

              for (var d = 0; d < data.length; d++) {
                  var item = this._normalizeItem(data[d]);

                  // Skip items which were pre-loaded, only merge the data
                  if ($.inArray(item.id, existingIds) >= 0) {
                      var $existingOption = $existing.filter(onlyItem(item));

                      var existingData = this.item($existingOption);
                      var newData = $.extend(true, {}, item, existingData);

                      var $newOption = this.option(newData);

                      $existingOption.replaceWith($newOption);

                      continue;
                  }

                  var $option = this.option(item);

                  if (item.children) {
                      var $children = this.convertToOptions(item.children);

                      Utils.appendMany($option, $children);
                  }

                  $options.push($option);
              }

              return $options;
          };

          return ArrayAdapter;
      });

      S2.define('select2/data/ajax', [
        './array',
        '../utils',
        'jquery'
      ], function (ArrayAdapter, Utils, $) {
          function AjaxAdapter($element, options) {
              this.ajaxOptions = this._applyDefaults(options.get('ajax'));

              if (this.ajaxOptions.processResults != null) {
                  this.processResults = this.ajaxOptions.processResults;
              }

              AjaxAdapter.__super__.constructor.call(this, $element, options);
          }

          Utils.Extend(AjaxAdapter, ArrayAdapter);

          AjaxAdapter.prototype._applyDefaults = function (options) {
              var defaults = {
                  data: function (params) {
                      return $.extend({}, params, {
                          q: params.term
                      });
                  },
                  transport: function (params, success, failure) {
                      var $request = $.ajax(params);

                      $request.then(success);
                      $request.fail(failure);

                      return $request;
                  }
              };

              return $.extend({}, defaults, options, true);
          };

          AjaxAdapter.prototype.processResults = function (results) {
              return results;
          };

          AjaxAdapter.prototype.query = function (params, callback) {
              var matches = [];
              var self = this;

              if (this._request != null) {
                  // JSONP requests cannot always be aborted
                  if ($.isFunction(this._request.abort)) {
                      this._request.abort();
                  }

                  this._request = null;
              }

              var options = $.extend({
                  type: 'GET'
              }, this.ajaxOptions);

              if (typeof options.url === 'function') {
                  options.url = options.url.call(this.$element, params);
              }

              if (typeof options.data === 'function') {
                  options.data = options.data.call(this.$element, params);
              }

              function request() {
                  var $request = options.transport(options, function (data) {
                      var results = self.processResults(data, params);

                      if (self.options.get('debug') && window.console && console.error) {
                          // Check to make sure that the response included a `results` key.
                          if (!results || !results.results || !$.isArray(results.results)) {
                              console.error(
                                'Select2: The AJAX results did not return an array in the ' +
                                '`results` key of the response.'
                              );
                          }
                      }

                      callback(results);
                  }, function () {
                      // Attempt to detect if a request was aborted
                      // Only works if the transport exposes a status property
                      if ($request.status && $request.status === '0') {
                          return;
                      }

                      self.trigger('results:message', {
                          message: 'errorLoading'
                      });
                  });

                  self._request = $request;
              }

              if (this.ajaxOptions.delay && params.term != null) {
                  if (this._queryTimeout) {
                      window.clearTimeout(this._queryTimeout);
                  }

                  this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
              } else {
                  request();
              }
          };

          return AjaxAdapter;
      });

      S2.define('select2/data/tags', [
        'jquery'
      ], function ($) {
          function Tags(decorated, $element, options) {
              var tags = options.get('tags');

              var createTag = options.get('createTag');

              if (createTag !== undefined) {
                  this.createTag = createTag;
              }

              var insertTag = options.get('insertTag');

              if (insertTag !== undefined) {
                  this.insertTag = insertTag;
              }

              decorated.call(this, $element, options);

              if ($.isArray(tags)) {
                  for (var t = 0; t < tags.length; t++) {
                      var tag = tags[t];
                      var item = this._normalizeItem(tag);

                      var $option = this.option(item);

                      this.$element.append($option);
                  }
              }
          }

          Tags.prototype.query = function (decorated, params, callback) {
              var self = this;

              this._removeOldTags();

              if (params.term == null || params.page != null) {
                  decorated.call(this, params, callback);
                  return;
              }

              function wrapper(obj, child) {
                  var data = obj.results;

                  for (var i = 0; i < data.length; i++) {
                      var option = data[i];

                      var checkChildren = (
                        option.children != null &&
                        !wrapper({
                            results: option.children
                        }, true)
                      );

                      var checkText = option.text === params.term;

                      if (checkText || checkChildren) {
                          if (child) {
                              return false;
                          }

                          obj.data = data;
                          callback(obj);

                          return;
                      }
                  }

                  if (child) {
                      return true;
                  }

                  var tag = self.createTag(params);

                  if (tag != null) {
                      var $option = self.option(tag);
                      $option.attr('data-select2-tag', true);

                      self.addOptions([$option]);

                      self.insertTag(data, tag);
                  }

                  obj.results = data;

                  callback(obj);
              }

              decorated.call(this, params, wrapper);
          };

          Tags.prototype.createTag = function (decorated, params) {
              var term = $.trim(params.term);

              if (term === '') {
                  return null;
              }

              return {
                  id: term,
                  text: term
              };
          };

          Tags.prototype.insertTag = function (_, data, tag) {
              data.unshift(tag);
          };

          Tags.prototype._removeOldTags = function (_) {
              var tag = this._lastTag;

              var $options = this.$element.find('option[data-select2-tag]');

              $options.each(function () {
                  if (this.selected) {
                      return;
                  }

                  $(this).remove();
              });
          };

          return Tags;
      });

      S2.define('select2/data/tokenizer', [
        'jquery'
      ], function ($) {
          function Tokenizer(decorated, $element, options) {
              var tokenizer = options.get('tokenizer');

              if (tokenizer !== undefined) {
                  this.tokenizer = tokenizer;
              }

              decorated.call(this, $element, options);
          }

          Tokenizer.prototype.bind = function (decorated, container, $container) {
              decorated.call(this, container, $container);

              this.$search = container.dropdown.$search || container.selection.$search ||
                $container.find('.select2-search__field');
          };

          Tokenizer.prototype.query = function (decorated, params, callback) {
              var self = this;

              function createAndSelect(data) {
                  // Normalize the data object so we can use it for checks
                  var item = self._normalizeItem(data);

                  // Check if the data object already exists as a tag
                  // Select it if it doesn't
                  var $existingOptions = self.$element.find('option').filter(function () {
                      return $(this).val() === item.id;
                  });

                  // If an existing option wasn't found for it, create the option
                  if (!$existingOptions.length) {
                      var $option = self.option(item);
                      $option.attr('data-select2-tag', true);

                      self._removeOldTags();
                      self.addOptions([$option]);
                  }

                  // Select the item, now that we know there is an option for it
                  select(item);
              }

              function select(data) {
                  self.trigger('select', {
                      data: data
                  });
              }

              params.term = params.term || '';

              var tokenData = this.tokenizer(params, this.options, createAndSelect);

              if (tokenData.term !== params.term) {
                  // Replace the search term if we have the search box
                  if (this.$search.length) {
                      this.$search.val(tokenData.term);
                      this.$search.focus();
                  }

                  params.term = tokenData.term;
              }

              decorated.call(this, params, callback);
          };

          Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
              var separators = options.get('tokenSeparators') || [];
              var term = params.term;
              var i = 0;

              var createTag = this.createTag || function (params) {
                  return {
                      id: params.term,
                      text: params.term
                  };
              };

              while (i < term.length) {
                  var termChar = term[i];

                  if ($.inArray(termChar, separators) === -1) {
                      i++;

                      continue;
                  }

                  var part = term.substr(0, i);
                  var partParams = $.extend({}, params, {
                      term: part
                  });

                  var data = createTag(partParams);

                  if (data == null) {
                      i++;
                      continue;
                  }

                  callback(data);

                  // Reset the term to not include the tokenized portion
                  term = term.substr(i + 1) || '';
                  i = 0;
              }

              return {
                  term: term
              };
          };

          return Tokenizer;
      });

      S2.define('select2/data/minimumInputLength', [

      ], function () {
          function MinimumInputLength(decorated, $e, options) {
              this.minimumInputLength = options.get('minimumInputLength');

              decorated.call(this, $e, options);
          }

          MinimumInputLength.prototype.query = function (decorated, params, callback) {
              params.term = params.term || '';

              if (params.term.length < this.minimumInputLength) {
                  this.trigger('results:message', {
                      message: 'inputTooShort',
                      args: {
                          minimum: this.minimumInputLength,
                          input: params.term,
                          params: params
                      }
                  });

                  return;
              }

              decorated.call(this, params, callback);
          };

          return MinimumInputLength;
      });

      S2.define('select2/data/maximumInputLength', [

      ], function () {
          function MaximumInputLength(decorated, $e, options) {
              this.maximumInputLength = options.get('maximumInputLength');

              decorated.call(this, $e, options);
          }

          MaximumInputLength.prototype.query = function (decorated, params, callback) {
              params.term = params.term || '';

              if (this.maximumInputLength > 0 &&
                  params.term.length > this.maximumInputLength) {
                  this.trigger('results:message', {
                      message: 'inputTooLong',
                      args: {
                          maximum: this.maximumInputLength,
                          input: params.term,
                          params: params
                      }
                  });

                  return;
              }

              decorated.call(this, params, callback);
          };

          return MaximumInputLength;
      });

      S2.define('select2/data/maximumSelectionLength', [

      ], function () {
          function MaximumSelectionLength(decorated, $e, options) {
              this.maximumSelectionLength = options.get('maximumSelectionLength');

              decorated.call(this, $e, options);
          }

          MaximumSelectionLength.prototype.query =
            function (decorated, params, callback) {
                var self = this;

                this.current(function (currentData) {
                    var count = currentData != null ? currentData.length : 0;
                    if (self.maximumSelectionLength > 0 &&
                      count >= self.maximumSelectionLength) {
                        self.trigger('results:message', {
                            message: 'maximumSelected',
                            args: {
                                maximum: self.maximumSelectionLength
                            }
                        });
                        return;
                    }
                    decorated.call(self, params, callback);
                });
            };

          return MaximumSelectionLength;
      });

      S2.define('select2/dropdown', [
        'jquery',
        './utils'
      ], function ($, Utils) {
          function Dropdown($element, options) {
              this.$element = $element;
              this.options = options;

              Dropdown.__super__.constructor.call(this);
          }

          Utils.Extend(Dropdown, Utils.Observable);

          Dropdown.prototype.render = function () {
              var $dropdown = $(
                '<span class="select2-dropdown">' +
                  '<span class="select2-results"></span>' +
                '</span>'
              );

              $dropdown.attr('dir', this.options.get('dir'));

              this.$dropdown = $dropdown;

              return $dropdown;
          };

          Dropdown.prototype.bind = function () {
              // Should be implemented in subclasses
          };

          Dropdown.prototype.position = function ($dropdown, $container) {
              // Should be implmented in subclasses
          };

          Dropdown.prototype.destroy = function () {
              // Remove the dropdown from the DOM
              this.$dropdown.remove();
          };

          return Dropdown;
      });

      S2.define('select2/dropdown/search', [
        'jquery',
        '../utils'
      ], function ($, Utils) {
          function Search() { }

          Search.prototype.render = function (decorated) {
              var $rendered = decorated.call(this);

              var $search = $(
                '<span class="select2-search select2-search--dropdown">' +
                  '<input class="select2-search__field" type="search" tabindex="-1"' +
                  ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
                  ' spellcheck="false" role="textbox" />' +
                '</span>'
              );

              this.$searchContainer = $search;
              this.$search = $search.find('input');

              $rendered.prepend($search);

              return $rendered;
          };

          Search.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              this.$search.on('keydown', function (evt) {
                  self.trigger('keypress', evt);

                  self._keyUpPrevented = evt.isDefaultPrevented();
              });

              // Workaround for browsers which do not support the `input` event
              // This will prevent double-triggering of events for browsers which support
              // both the `keyup` and `input` events.
              this.$search.on('input', function (evt) {
                  // Unbind the duplicated `keyup` event
                  $(this).off('keyup');
              });

              this.$search.on('keyup input', function (evt) {
                  self.handleSearch(evt);
              });

              container.on('open', function () {
                  self.$search.attr('tabindex', 0);

                  self.$search.focus();

                  window.setTimeout(function () {
                      self.$search.focus();
                  }, 0);
              });

              container.on('close', function () {
                  self.$search.attr('tabindex', -1);

                  self.$search.val('');
              });

              container.on('focus', function () {
                  if (container.isOpen()) {
                      self.$search.focus();
                  }
              });

              container.on('results:all', function (params) {
                  if (params.query.term == null || params.query.term === '') {
                      var showSearch = self.showSearch(params);

                      if (showSearch) {
                          self.$searchContainer.removeClass('select2-search--hide');
                      } else {
                          self.$searchContainer.addClass('select2-search--hide');
                      }
                  }
              });
          };

          Search.prototype.handleSearch = function (evt) {
              if (!this._keyUpPrevented) {
                  var input = this.$search.val();

                  this.trigger('query', {
                      term: input
                  });
              }

              this._keyUpPrevented = false;
          };

          Search.prototype.showSearch = function (_, params) {
              return true;
          };

          return Search;
      });

      S2.define('select2/dropdown/hidePlaceholder', [

      ], function () {
          function HidePlaceholder(decorated, $element, options, dataAdapter) {
              this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

              decorated.call(this, $element, options, dataAdapter);
          }

          HidePlaceholder.prototype.append = function (decorated, data) {
              data.results = this.removePlaceholder(data.results);

              decorated.call(this, data);
          };

          HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
              if (typeof placeholder === 'string') {
                  placeholder = {
                      id: '',
                      text: placeholder
                  };
              }

              return placeholder;
          };

          HidePlaceholder.prototype.removePlaceholder = function (_, data) {
              var modifiedData = data.slice(0);

              for (var d = data.length - 1; d >= 0; d--) {
                  var item = data[d];

                  if (this.placeholder.id === item.id) {
                      modifiedData.splice(d, 1);
                  }
              }

              return modifiedData;
          };

          return HidePlaceholder;
      });

      S2.define('select2/dropdown/infiniteScroll', [
        'jquery'
      ], function ($) {
          function InfiniteScroll(decorated, $element, options, dataAdapter) {
              this.lastParams = {};

              decorated.call(this, $element, options, dataAdapter);

              this.$loadingMore = this.createLoadingMore();
              this.loading = false;
          }

          InfiniteScroll.prototype.append = function (decorated, data) {
              this.$loadingMore.remove();
              this.loading = false;

              decorated.call(this, data);

              if (this.showLoadingMore(data)) {
                  this.$results.append(this.$loadingMore);
              }
          };

          InfiniteScroll.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              container.on('query', function (params) {
                  self.lastParams = params;
                  self.loading = true;
              });

              container.on('query:append', function (params) {
                  self.lastParams = params;
                  self.loading = true;
              });

              this.$results.on('scroll', function () {
                  var isLoadMoreVisible = $.contains(
                    document.documentElement,
                    self.$loadingMore[0]
                  );

                  if (self.loading || !isLoadMoreVisible) {
                      return;
                  }

                  var currentOffset = self.$results.offset().top +
                    self.$results.outerHeight(false);
                  var loadingMoreOffset = self.$loadingMore.offset().top +
                    self.$loadingMore.outerHeight(false);

                  if (currentOffset + 50 >= loadingMoreOffset) {
                      self.loadMore();
                  }
              });
          };

          InfiniteScroll.prototype.loadMore = function () {
              this.loading = true;

              var params = $.extend({}, { page: 1 }, this.lastParams);

              params.page++;

              this.trigger('query:append', params);
          };

          InfiniteScroll.prototype.showLoadingMore = function (_, data) {
              return data.pagination && data.pagination.more;
          };

          InfiniteScroll.prototype.createLoadingMore = function () {
              var $option = $(
                '<li ' +
                'class="select2-results__option select2-results__option--load-more"' +
                'role="treeitem" aria-disabled="true"></li>'
              );

              var message = this.options.get('translations').get('loadingMore');

              $option.html(message(this.lastParams));

              return $option;
          };

          return InfiniteScroll;
      });

      S2.define('select2/dropdown/attachBody', [
        'jquery',
        '../utils'
      ], function ($, Utils) {
          function AttachBody(decorated, $element, options) {
              this.$dropdownParent = options.get('dropdownParent') || $(document.body);

              decorated.call(this, $element, options);
          }

          AttachBody.prototype.bind = function (decorated, container, $container) {
              var self = this;

              var setupResultsEvents = false;

              decorated.call(this, container, $container);

              container.on('open', function () {
                  self._showDropdown();
                  self._attachPositioningHandler(container);

                  if (!setupResultsEvents) {
                      setupResultsEvents = true;

                      container.on('results:all', function () {
                          self._positionDropdown();
                          self._resizeDropdown();
                      });

                      container.on('results:append', function () {
                          self._positionDropdown();
                          self._resizeDropdown();
                      });
                  }
              });

              container.on('close', function () {
                  self._hideDropdown();
                  self._detachPositioningHandler(container);
              });

              this.$dropdownContainer.on('mousedown', function (evt) {
                  evt.stopPropagation();
              });
          };

          AttachBody.prototype.destroy = function (decorated) {
              decorated.call(this);

              this.$dropdownContainer.remove();
          };

          AttachBody.prototype.position = function (decorated, $dropdown, $container) {
              // Clone all of the container classes
              $dropdown.attr('class', $container.attr('class'));

              $dropdown.removeClass('select2');
              $dropdown.addClass('select2-container--open');

              $dropdown.css({
                  position: 'absolute',
                  top: -999999
              });

              this.$container = $container;
          };

          AttachBody.prototype.render = function (decorated) {
              var $container = $('<span></span>');

              var $dropdown = decorated.call(this);
              $container.append($dropdown);

              this.$dropdownContainer = $container;

              return $container;
          };

          AttachBody.prototype._hideDropdown = function (decorated) {
              this.$dropdownContainer.detach();
          };

          AttachBody.prototype._attachPositioningHandler =
              function (decorated, container) {
                  var self = this;

                  var scrollEvent = 'scroll.select2.' + container.id;
                  var resizeEvent = 'resize.select2.' + container.id;
                  var orientationEvent = 'orientationchange.select2.' + container.id;

                  var $watchers = this.$container.parents().filter(Utils.hasScroll);
                  $watchers.each(function () {
                      $(this).data('select2-scroll-position', {
                          x: $(this).scrollLeft(),
                          y: $(this).scrollTop()
                      });
                  });

                  $watchers.on(scrollEvent, function (ev) {
                      var position = $(this).data('select2-scroll-position');
                      $(this).scrollTop(position.y);
                  });

                  $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
                    function (e) {
                        self._positionDropdown();
                        self._resizeDropdown();
                    });
              };

          AttachBody.prototype._detachPositioningHandler =
              function (decorated, container) {
                  var scrollEvent = 'scroll.select2.' + container.id;
                  var resizeEvent = 'resize.select2.' + container.id;
                  var orientationEvent = 'orientationchange.select2.' + container.id;

                  var $watchers = this.$container.parents().filter(Utils.hasScroll);
                  $watchers.off(scrollEvent);

                  $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
              };

          AttachBody.prototype._positionDropdown = function () {
              var $window = $(window);

              var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
              var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

              var newDirection = null;

              var offset = this.$container.offset();

              offset.bottom = offset.top + this.$container.outerHeight(false);

              var container = {
                  height: this.$container.outerHeight(false)
              };

              container.top = offset.top;
              container.bottom = offset.top + container.height;

              var dropdown = {
                  height: this.$dropdown.outerHeight(false)
              };

              var viewport = {
                  top: $window.scrollTop(),
                  bottom: $window.scrollTop() + $window.height()
              };

              var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
              var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

              var css = {
                  left: offset.left,
                  top: container.bottom
              };

              // Determine what the parent element is to use for calciulating the offset
              var $offsetParent = this.$dropdownParent;

              // For statically positoned elements, we need to get the element
              // that is determining the offset
              if ($offsetParent.css('position') === 'static') {
                  $offsetParent = $offsetParent.offsetParent();
              }

              var parentOffset = $offsetParent.offset();

              css.top -= parentOffset.top;
              css.left -= parentOffset.left;

              if (!isCurrentlyAbove && !isCurrentlyBelow) {
                  newDirection = 'below';
              }

              if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                  newDirection = 'above';
              } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                  newDirection = 'below';
              }

              if (newDirection == 'above' ||
                (isCurrentlyAbove && newDirection !== 'below')) {
                  css.top = container.top - parentOffset.top - dropdown.height;
              }

              if (newDirection != null) {
                  this.$dropdown
                    .removeClass('select2-dropdown--below select2-dropdown--above')
                    .addClass('select2-dropdown--' + newDirection);
                  this.$container
                    .removeClass('select2-container--below select2-container--above')
                    .addClass('select2-container--' + newDirection);
              }

              this.$dropdownContainer.css(css);
          };

          AttachBody.prototype._resizeDropdown = function () {
              var css = {
                  width: this.$container.outerWidth(false) + 'px'
              };

              if (this.options.get('dropdownAutoWidth')) {
                  css.minWidth = css.width;
                  css.position = 'relative';
                  css.width = 'auto';
              }

              this.$dropdown.css(css);
          };

          AttachBody.prototype._showDropdown = function (decorated) {
              this.$dropdownContainer.appendTo(this.$dropdownParent);

              this._positionDropdown();
              this._resizeDropdown();
          };

          return AttachBody;
      });

      S2.define('select2/dropdown/minimumResultsForSearch', [

      ], function () {
          function countResults(data) {
              var count = 0;

              for (var d = 0; d < data.length; d++) {
                  var item = data[d];

                  if (item.children) {
                      count += countResults(item.children);
                  } else {
                      count++;
                  }
              }

              return count;
          }

          function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
              this.minimumResultsForSearch = options.get('minimumResultsForSearch');

              if (this.minimumResultsForSearch < 0) {
                  this.minimumResultsForSearch = Infinity;
              }

              decorated.call(this, $element, options, dataAdapter);
          }

          MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
              if (countResults(params.data.results) < this.minimumResultsForSearch) {
                  return false;
              }

              return decorated.call(this, params);
          };

          return MinimumResultsForSearch;
      });

      S2.define('select2/dropdown/selectOnClose', [

      ], function () {
          function SelectOnClose() { }

          SelectOnClose.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              container.on('close', function (params) {
                  self._handleSelectOnClose(params);
              });
          };

          SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
              if (params && params.originalSelect2Event != null) {
                  var event = params.originalSelect2Event;

                  // Don't select an item if the close event was triggered from a select or
                  // unselect event
                  if (event._type === 'select' || event._type === 'unselect') {
                      return;
                  }
              }

              var $highlightedResults = this.getHighlightedResults();

              // Only select highlighted results
              if ($highlightedResults.length < 1) {
                  return;
              }

              var data = $highlightedResults.data('data');

              // Don't re-select already selected resulte
              if (
                (data.element != null && data.element.selected) ||
                (data.element == null && data.selected)
              ) {
                  return;
              }

              this.trigger('select', {
                  data: data
              });
          };

          return SelectOnClose;
      });

      S2.define('select2/dropdown/closeOnSelect', [

      ], function () {
          function CloseOnSelect() { }

          CloseOnSelect.prototype.bind = function (decorated, container, $container) {
              var self = this;

              decorated.call(this, container, $container);

              container.on('select', function (evt) {
                  self._selectTriggered(evt);
              });

              container.on('unselect', function (evt) {
                  self._selectTriggered(evt);
              });
          };

          CloseOnSelect.prototype._selectTriggered = function (_, evt) {
              var originalEvent = evt.originalEvent;

              // Don't close if the control key is being held
              if (originalEvent && originalEvent.ctrlKey) {
                  return;
              }

              this.trigger('close', {
                  originalEvent: originalEvent,
                  originalSelect2Event: evt
              });
          };

          return CloseOnSelect;
      });

      S2.define('select2/i18n/en', [], function () {
          // English
          return {
              errorLoading: function () {
                  return 'The results could not be loaded.';
              },
              inputTooLong: function (args) {
                  var overChars = args.input.length - args.maximum;

                  var message = 'Please delete ' + overChars + ' character';

                  if (overChars != 1) {
                      message += 's';
                  }

                  return message;
              },
              inputTooShort: function (args) {
                  var remainingChars = args.minimum - args.input.length;

                  var message = 'Please enter ' + remainingChars + ' or more characters';

                  return message;
              },
              loadingMore: function () {
                  return 'Loading more results…';
              },
              maximumSelected: function (args) {
                  var message = 'You can only select ' + args.maximum + ' item';

                  if (args.maximum != 1) {
                      message += 's';
                  }

                  return message;
              },
              noResults: function () {
                  return 'No results found';
              },
              searching: function () {
                  return 'Searching…';
              }
          };
      });

      S2.define('select2/defaults', [
        'jquery',
        'require',

        './results',

        './selection/single',
        './selection/multiple',
        './selection/placeholder',
        './selection/allowClear',
        './selection/search',
        './selection/eventRelay',

        './utils',
        './translation',
        './diacritics',

        './data/select',
        './data/array',
        './data/ajax',
        './data/tags',
        './data/tokenizer',
        './data/minimumInputLength',
        './data/maximumInputLength',
        './data/maximumSelectionLength',

        './dropdown',
        './dropdown/search',
        './dropdown/hidePlaceholder',
        './dropdown/infiniteScroll',
        './dropdown/attachBody',
        './dropdown/minimumResultsForSearch',
        './dropdown/selectOnClose',
        './dropdown/closeOnSelect',

        './i18n/en'
      ], function ($, require,

                   ResultsList,

                   SingleSelection, MultipleSelection, Placeholder, AllowClear,
                   SelectionSearch, EventRelay,

                   Utils, Translation, DIACRITICS,

                   SelectData, ArrayData, AjaxData, Tags, Tokenizer,
                   MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

                   Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
                   AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

                   EnglishTranslation) {
          function Defaults() {
              this.reset();
          }

          Defaults.prototype.apply = function (options) {
              options = $.extend(true, {}, this.defaults, options);

              if (options.dataAdapter == null) {
                  if (options.ajax != null) {
                      options.dataAdapter = AjaxData;
                  } else if (options.data != null) {
                      options.dataAdapter = ArrayData;
                  } else {
                      options.dataAdapter = SelectData;
                  }

                  if (options.minimumInputLength > 0) {
                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        MinimumInputLength
                      );
                  }

                  if (options.maximumInputLength > 0) {
                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        MaximumInputLength
                      );
                  }

                  if (options.maximumSelectionLength > 0) {
                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        MaximumSelectionLength
                      );
                  }

                  if (options.tags) {
                      options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                  }

                  if (options.tokenSeparators != null || options.tokenizer != null) {
                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        Tokenizer
                      );
                  }

                  if (options.query != null) {
                      var Query = require(options.amdBase + 'compat/query');

                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        Query
                      );
                  }

                  if (options.initSelection != null) {
                      var InitSelection = require(options.amdBase + 'compat/initSelection');

                      options.dataAdapter = Utils.Decorate(
                        options.dataAdapter,
                        InitSelection
                      );
                  }
              }

              if (options.resultsAdapter == null) {
                  options.resultsAdapter = ResultsList;

                  if (options.ajax != null) {
                      options.resultsAdapter = Utils.Decorate(
                        options.resultsAdapter,
                        InfiniteScroll
                      );
                  }

                  if (options.placeholder != null) {
                      options.resultsAdapter = Utils.Decorate(
                        options.resultsAdapter,
                        HidePlaceholder
                      );
                  }

                  if (options.selectOnClose) {
                      options.resultsAdapter = Utils.Decorate(
                        options.resultsAdapter,
                        SelectOnClose
                      );
                  }
              }

              if (options.dropdownAdapter == null) {
                  if (options.multiple) {
                      options.dropdownAdapter = Dropdown;
                  } else {
                      var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

                      options.dropdownAdapter = SearchableDropdown;
                  }

                  if (options.minimumResultsForSearch !== 0) {
                      options.dropdownAdapter = Utils.Decorate(
                        options.dropdownAdapter,
                        MinimumResultsForSearch
                      );
                  }

                  if (options.closeOnSelect) {
                      options.dropdownAdapter = Utils.Decorate(
                        options.dropdownAdapter,
                        CloseOnSelect
                      );
                  }

                  if (
                    options.dropdownCssClass != null ||
                    options.dropdownCss != null ||
                    options.adaptDropdownCssClass != null
                  ) {
                      var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

                      options.dropdownAdapter = Utils.Decorate(
                        options.dropdownAdapter,
                        DropdownCSS
                      );
                  }

                  options.dropdownAdapter = Utils.Decorate(
                    options.dropdownAdapter,
                    AttachBody
                  );
              }

              if (options.selectionAdapter == null) {
                  if (options.multiple) {
                      options.selectionAdapter = MultipleSelection;
                  } else {
                      options.selectionAdapter = SingleSelection;
                  }

                  // Add the placeholder mixin if a placeholder was specified
                  if (options.placeholder != null) {
                      options.selectionAdapter = Utils.Decorate(
                        options.selectionAdapter,
                        Placeholder
                      );
                  }

                  if (options.allowClear) {
                      options.selectionAdapter = Utils.Decorate(
                        options.selectionAdapter,
                        AllowClear
                      );
                  }

                  if (options.multiple) {
                      options.selectionAdapter = Utils.Decorate(
                        options.selectionAdapter,
                        SelectionSearch
                      );
                  }

                  if (
                    options.containerCssClass != null ||
                    options.containerCss != null ||
                    options.adaptContainerCssClass != null
                  ) {
                      var ContainerCSS = require(options.amdBase + 'compat/containerCss');

                      options.selectionAdapter = Utils.Decorate(
                        options.selectionAdapter,
                        ContainerCSS
                      );
                  }

                  options.selectionAdapter = Utils.Decorate(
                    options.selectionAdapter,
                    EventRelay
                  );
              }

              if (typeof options.language === 'string') {
                  // Check if the language is specified with a region
                  if (options.language.indexOf('-') > 0) {
                      // Extract the region information if it is included
                      var languageParts = options.language.split('-');
                      var baseLanguage = languageParts[0];

                      options.language = [options.language, baseLanguage];
                  } else {
                      options.language = [options.language];
                  }
              }

              if ($.isArray(options.language)) {
                  var languages = new Translation();
                  options.language.push('en');

                  var languageNames = options.language;

                  for (var l = 0; l < languageNames.length; l++) {
                      var name = languageNames[l];
                      var language = {};

                      try {
                          // Try to load it with the original name
                          language = Translation.loadPath(name);
                      } catch (e) {
                          try {
                              // If we couldn't load it, check if it wasn't the full path
                              name = this.defaults.amdLanguageBase + name;
                              language = Translation.loadPath(name);
                          } catch (ex) {
                              // The translation could not be loaded at all. Sometimes this is
                              // because of a configuration problem, other times this can be
                              // because of how Select2 helps load all possible translation files.
                              if (options.debug && window.console && console.warn) {
                                  console.warn(
                                    'Select2: The language file for "' + name + '" could not be ' +
                                    'automatically loaded. A fallback will be used instead.'
                                  );
                              }

                              continue;
                          }
                      }

                      languages.extend(language);
                  }

                  options.translations = languages;
              } else {
                  var baseTranslation = Translation.loadPath(
                    this.defaults.amdLanguageBase + 'en'
                  );
                  var customTranslation = new Translation(options.language);

                  customTranslation.extend(baseTranslation);

                  options.translations = customTranslation;
              }

              return options;
          };

          Defaults.prototype.reset = function () {
              function stripDiacritics(text) {
                  // Used 'uni range + named function' from http://jsperf.com/diacritics/18
                  function match(a) {
                      return DIACRITICS[a] || a;
                  }

                  return text.replace(/[^\u0000-\u007E]/g, match);
              }

              function matcher(params, data) {
                  // Always return the object if there is nothing to compare
                  if ($.trim(params.term) === '') {
                      return data;
                  }

                  // Do a recursive check for options with children
                  if (data.children && data.children.length > 0) {
                      // Clone the data object if there are children
                      // This is required as we modify the object to remove any non-matches
                      var match = $.extend(true, {}, data);

                      // Check each child of the option
                      for (var c = data.children.length - 1; c >= 0; c--) {
                          var child = data.children[c];

                          var matches = matcher(params, child);

                          // If there wasn't a match, remove the object in the array
                          if (matches == null) {
                              match.children.splice(c, 1);
                          }
                      }

                      // If any children matched, return the new object
                      if (match.children.length > 0) {
                          return match;
                      }

                      // If there were no matching children, check just the plain object
                      return matcher(params, match);
                  }

                  var original = stripDiacritics(data.text).toUpperCase();
                  var term = stripDiacritics(params.term).toUpperCase();

                  // Check if the text contains the term
                  if (original.indexOf(term) > -1) {
                      return data;
                  }

                  // If it doesn't contain the term, don't return anything
                  return null;
              }

              this.defaults = {
                  amdBase: './',
                  amdLanguageBase: './i18n/',
                  closeOnSelect: true,
                  debug: false,
                  dropdownAutoWidth: false,
                  escapeMarkup: Utils.escapeMarkup,
                  language: EnglishTranslation,
                  matcher: matcher,
                  minimumInputLength: 0,
                  maximumInputLength: 0,
                  maximumSelectionLength: 0,
                  minimumResultsForSearch: 0,
                  selectOnClose: false,
                  sorter: function (data) {
                      return data;
                  },
                  templateResult: function (result) {
                      return result.text;
                  },
                  templateSelection: function (selection) {
                      return selection.text;
                  },
                  theme: 'default',
                  width: 'resolve'
              };
          };

          Defaults.prototype.set = function (key, value) {
              var camelKey = $.camelCase(key);

              var data = {};
              data[camelKey] = value;

              var convertedData = Utils._convertData(data);

              $.extend(this.defaults, convertedData);
          };

          var defaults = new Defaults();

          return defaults;
      });

      S2.define('select2/options', [
        'require',
        'jquery',
        './defaults',
        './utils'
      ], function (require, $, Defaults, Utils) {
          function Options(options, $element) {
              this.options = options;

              if ($element != null) {
                  this.fromElement($element);
              }

              this.options = Defaults.apply(this.options);

              if ($element && $element.is('input')) {
                  var InputCompat = require(this.get('amdBase') + 'compat/inputData');

                  this.options.dataAdapter = Utils.Decorate(
                    this.options.dataAdapter,
                    InputCompat
                  );
              }
          }

          Options.prototype.fromElement = function ($e) {
              var excludedData = ['select2'];

              if (this.options.multiple == null) {
                  this.options.multiple = $e.prop('multiple');
              }

              if (this.options.disabled == null) {
                  this.options.disabled = $e.prop('disabled');
              }

              if (this.options.language == null) {
                  if ($e.prop('lang')) {
                      this.options.language = $e.prop('lang').toLowerCase();
                  } else if ($e.closest('[lang]').prop('lang')) {
                      this.options.language = $e.closest('[lang]').prop('lang');
                  }
              }

              if (this.options.dir == null) {
                  if ($e.prop('dir')) {
                      this.options.dir = $e.prop('dir');
                  } else if ($e.closest('[dir]').prop('dir')) {
                      this.options.dir = $e.closest('[dir]').prop('dir');
                  } else {
                      this.options.dir = 'ltr';
                  }
              }

              $e.prop('disabled', this.options.disabled);
              $e.prop('multiple', this.options.multiple);

              if ($e.data('select2Tags')) {
                  if (this.options.debug && window.console && console.warn) {
                      console.warn(
                        'Select2: The `data-select2-tags` attribute has been changed to ' +
                        'use the `data-data` and `data-tags="true"` attributes and will be ' +
                        'removed in future versions of Select2.'
                      );
                  }

                  $e.data('data', $e.data('select2Tags'));
                  $e.data('tags', true);
              }

              if ($e.data('ajaxUrl')) {
                  if (this.options.debug && window.console && console.warn) {
                      console.warn(
                        'Select2: The `data-ajax-url` attribute has been changed to ' +
                        '`data-ajax--url` and support for the old attribute will be removed' +
                        ' in future versions of Select2.'
                      );
                  }

                  $e.attr('ajax--url', $e.data('ajaxUrl'));
                  $e.data('ajax--url', $e.data('ajaxUrl'));
              }

              var dataset = {};

              // Prefer the element's `dataset` attribute if it exists
              // jQuery 1.x does not correctly handle data attributes with multiple dashes
              if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
                  dataset = $.extend(true, {}, $e[0].dataset, $e.data());
              } else {
                  dataset = $e.data();
              }

              var data = $.extend(true, {}, dataset);

              data = Utils._convertData(data);

              for (var key in data) {
                  if ($.inArray(key, excludedData) > -1) {
                      continue;
                  }

                  if ($.isPlainObject(this.options[key])) {
                      $.extend(this.options[key], data[key]);
                  } else {
                      this.options[key] = data[key];
                  }
              }

              return this;
          };

          Options.prototype.get = function (key) {
              return this.options[key];
          };

          Options.prototype.set = function (key, val) {
              this.options[key] = val;
          };

          return Options;
      });

      S2.define('select2/core', [
        'jquery',
        './options',
        './utils',
        './keys'
      ], function ($, Options, Utils, KEYS) {
          var Select2 = function ($element, options) {
              if ($element.data('select2') != null) {
                  $element.data('select2').destroy();
              }

              this.$element = $element;

              this.id = this._generateId($element);

              options = options || {};

              this.options = new Options(options, $element);

              Select2.__super__.constructor.call(this);

              // Set up the tabindex

              var tabindex = $element.attr('tabindex') || 0;
              $element.data('old-tabindex', tabindex);
              $element.attr('tabindex', '-1');

              // Set up containers and adapters

              var DataAdapter = this.options.get('dataAdapter');
              this.dataAdapter = new DataAdapter($element, this.options);

              var $container = this.render();

              this._placeContainer($container);

              var SelectionAdapter = this.options.get('selectionAdapter');
              this.selection = new SelectionAdapter($element, this.options);
              this.$selection = this.selection.render();

              this.selection.position(this.$selection, $container);

              var DropdownAdapter = this.options.get('dropdownAdapter');
              this.dropdown = new DropdownAdapter($element, this.options);
              this.$dropdown = this.dropdown.render();

              this.dropdown.position(this.$dropdown, $container);

              var ResultsAdapter = this.options.get('resultsAdapter');
              this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
              this.$results = this.results.render();

              this.results.position(this.$results, this.$dropdown);

              // Bind events

              var self = this;

              // Bind the container to all of the adapters
              this._bindAdapters();

              // Register any DOM event handlers
              this._registerDomEvents();

              // Register any internal event handlers
              this._registerDataEvents();
              this._registerSelectionEvents();
              this._registerDropdownEvents();
              this._registerResultsEvents();
              this._registerEvents();

              // Set the initial state
              this.dataAdapter.current(function (initialData) {
                  self.trigger('selection:update', {
                      data: initialData
                  });
              });

              // Hide the original select
              $element.addClass('select2-hidden-accessible');
              $element.attr('aria-hidden', 'true');

              // Synchronize any monitored attributes
              this._syncAttributes();

              $element.data('select2', this);
          };

          Utils.Extend(Select2, Utils.Observable);

          Select2.prototype._generateId = function ($element) {
              var id = '';

              if ($element.attr('id') != null) {
                  id = $element.attr('id');
              } else if ($element.attr('name') != null) {
                  id = $element.attr('name') + '-' + Utils.generateChars(2);
              } else {
                  id = Utils.generateChars(4);
              }

              id = id.replace(/(:|\.|\[|\]|,)/g, '');
              id = 'select2-' + id;

              return id;
          };

          Select2.prototype._placeContainer = function ($container) {
              $container.insertAfter(this.$element);

              var width = this._resolveWidth(this.$element, this.options.get('width'));

              if (width != null) {
                  $container.css('width', width);
              }
          };

          Select2.prototype._resolveWidth = function ($element, method) {
              var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

              if (method == 'resolve') {
                  var styleWidth = this._resolveWidth($element, 'style');

                  if (styleWidth != null) {
                      return styleWidth;
                  }

                  return this._resolveWidth($element, 'element');
              }

              if (method == 'element') {
                  var elementWidth = $element.outerWidth(false);

                  if (elementWidth <= 0) {
                      return 'auto';
                  }

                  return elementWidth + 'px';
              }

              if (method == 'style') {
                  var style = $element.attr('style');

                  if (typeof (style) !== 'string') {
                      return null;
                  }

                  var attrs = style.split(';');

                  for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                      var attr = attrs[i].replace(/\s/g, '');
                      var matches = attr.match(WIDTH);

                      if (matches !== null && matches.length >= 1) {
                          return matches[1];
                      }
                  }

                  return null;
              }

              return method;
          };

          Select2.prototype._bindAdapters = function () {
              this.dataAdapter.bind(this, this.$container);
              this.selection.bind(this, this.$container);

              this.dropdown.bind(this, this.$container);
              this.results.bind(this, this.$container);
          };

          Select2.prototype._registerDomEvents = function () {
              var self = this;

              this.$element.on('change.select2', function () {
                  self.dataAdapter.current(function (data) {
                      self.trigger('selection:update', {
                          data: data
                      });
                  });
              });

              this.$element.on('focus.select2', function (evt) {
                  self.trigger('focus', evt);
              });

              this._syncA = Utils.bind(this._syncAttributes, this);
              this._syncS = Utils.bind(this._syncSubtree, this);

              if (this.$element[0].attachEvent) {
                  this.$element[0].attachEvent('onpropertychange', this._syncA);
              }

              var observer = window.MutationObserver ||
                window.WebKitMutationObserver ||
                window.MozMutationObserver
              ;

              if (observer != null) {
                  this._observer = new observer(function (mutations) {
                      $.each(mutations, self._syncA);
                      $.each(mutations, self._syncS);
                  });
                  this._observer.observe(this.$element[0], {
                      attributes: true,
                      childList: true,
                      subtree: false
                  });
              } else if (this.$element[0].addEventListener) {
                  this.$element[0].addEventListener(
                    'DOMAttrModified',
                    self._syncA,
                    false
                  );
                  this.$element[0].addEventListener(
                    'DOMNodeInserted',
                    self._syncS,
                    false
                  );
                  this.$element[0].addEventListener(
                    'DOMNodeRemoved',
                    self._syncS,
                    false
                  );
              }
          };

          Select2.prototype._registerDataEvents = function () {
              var self = this;

              this.dataAdapter.on('*', function (name, params) {
                  self.trigger(name, params);
              });
          };

          Select2.prototype._registerSelectionEvents = function () {
              var self = this;
              var nonRelayEvents = ['toggle', 'focus'];

              this.selection.on('toggle', function () {
                  self.toggleDropdown();
              });

              this.selection.on('focus', function (params) {
                  self.focus(params);
              });

              this.selection.on('*', function (name, params) {
                  if ($.inArray(name, nonRelayEvents) !== -1) {
                      return;
                  }

                  self.trigger(name, params);
              });
          };

          Select2.prototype._registerDropdownEvents = function () {
              var self = this;

              this.dropdown.on('*', function (name, params) {
                  self.trigger(name, params);
              });
          };

          Select2.prototype._registerResultsEvents = function () {
              var self = this;

              this.results.on('*', function (name, params) {
                  self.trigger(name, params);
              });
          };

          Select2.prototype._registerEvents = function () {
              var self = this;

              this.on('open', function () {
                  self.$container.addClass('select2-container--open');
              });

              this.on('close', function () {
                  self.$container.removeClass('select2-container--open');
              });

              this.on('enable', function () {
                  self.$container.removeClass('select2-container--disabled');
              });

              this.on('disable', function () {
                  self.$container.addClass('select2-container--disabled');
              });

              this.on('blur', function () {
                  self.$container.removeClass('select2-container--focus');
              });

              this.on('query', function (params) {
                  if (!self.isOpen()) {
                      self.trigger('open', {});
                  }

                  this.dataAdapter.query(params, function (data) {
                      self.trigger('results:all', {
                          data: data,
                          query: params
                      });
                  });
              });

              this.on('query:append', function (params) {
                  this.dataAdapter.query(params, function (data) {
                      self.trigger('results:append', {
                          data: data,
                          query: params
                      });
                  });
              });

              this.on('keypress', function (evt) {
                  var key = evt.which;

                  if (self.isOpen()) {
                      if (key === KEYS.ESC || key === KEYS.TAB ||
                          (key === KEYS.UP && evt.altKey)) {
                          self.close();

                          evt.preventDefault();
                      } else if (key === KEYS.ENTER) {
                          self.trigger('results:select', {});

                          evt.preventDefault();
                      } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
                          self.trigger('results:toggle', {});

                          evt.preventDefault();
                      } else if (key === KEYS.UP) {
                          self.trigger('results:previous', {});

                          evt.preventDefault();
                      } else if (key === KEYS.DOWN) {
                          self.trigger('results:next', {});

                          evt.preventDefault();
                      }
                  } else {
                      if (key === KEYS.ENTER || key === KEYS.SPACE ||
                          (key === KEYS.DOWN && evt.altKey)) {
                          self.open();

                          evt.preventDefault();
                      }
                  }
              });
          };

          Select2.prototype._syncAttributes = function () {
              this.options.set('disabled', this.$element.prop('disabled'));

              if (this.options.get('disabled')) {
                  if (this.isOpen()) {
                      this.close();
                  }

                  this.trigger('disable', {});
              } else {
                  this.trigger('enable', {});
              }
          };

          Select2.prototype._syncSubtree = function (evt, mutations) {
              var changed = false;
              var self = this;

              // Ignore any mutation events raised for elements that aren't options or
              // optgroups. This handles the case when the select element is destroyed
              if (
                evt && evt.target && (
                  evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
                )
              ) {
                  return;
              }

              if (!mutations) {
                  // If mutation events aren't supported, then we can only assume that the
                  // change affected the selections
                  changed = true;
              } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
                  for (var n = 0; n < mutations.addedNodes.length; n++) {
                      var node = mutations.addedNodes[n];

                      if (node.selected) {
                          changed = true;
                      }
                  }
              } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
                  changed = true;
              }

              // Only re-pull the data if we think there is a change
              if (changed) {
                  this.dataAdapter.current(function (currentData) {
                      self.trigger('selection:update', {
                          data: currentData
                      });
                  });
              }
          };

          /**
           * Override the trigger method to automatically trigger pre-events when
           * there are events that can be prevented.
           */
          Select2.prototype.trigger = function (name, args) {
              var actualTrigger = Select2.__super__.trigger;
              var preTriggerMap = {
                  'open': 'opening',
                  'close': 'closing',
                  'select': 'selecting',
                  'unselect': 'unselecting'
              };

              if (args === undefined) {
                  args = {};
              }

              if (name in preTriggerMap) {
                  var preTriggerName = preTriggerMap[name];
                  var preTriggerArgs = {
                      prevented: false,
                      name: name,
                      args: args
                  };

                  actualTrigger.call(this, preTriggerName, preTriggerArgs);

                  if (preTriggerArgs.prevented) {
                      args.prevented = true;

                      return;
                  }
              }

              actualTrigger.call(this, name, args);
          };

          Select2.prototype.toggleDropdown = function () {
              if (this.options.get('disabled')) {
                  return;
              }

              if (this.isOpen()) {
                  this.close();
              } else {
                  this.open();
              }
          };

          Select2.prototype.open = function () {
              if (this.isOpen()) {
                  return;
              }

              this.trigger('query', {});
          };

          Select2.prototype.close = function () {
              if (!this.isOpen()) {
                  return;
              }

              this.trigger('close', {});
          };

          Select2.prototype.isOpen = function () {
              return this.$container.hasClass('select2-container--open');
          };

          Select2.prototype.hasFocus = function () {
              return this.$container.hasClass('select2-container--focus');
          };

          Select2.prototype.focus = function (data) {
              // No need to re-trigger focus events if we are already focused
              if (this.hasFocus()) {
                  return;
              }

              this.$container.addClass('select2-container--focus');
              this.trigger('focus', {});
          };

          Select2.prototype.enable = function (args) {
              if (this.options.get('debug') && window.console && console.warn) {
                  console.warn(
                    'Select2: The `select2("enable")` method has been deprecated and will' +
                    ' be removed in later Select2 versions. Use $element.prop("disabled")' +
                    ' instead.'
                  );
              }

              if (args == null || args.length === 0) {
                  args = [true];
              }

              var disabled = !args[0];

              this.$element.prop('disabled', disabled);
          };

          Select2.prototype.data = function () {
              if (this.options.get('debug') &&
                  arguments.length > 0 && window.console && console.warn) {
                  console.warn(
                    'Select2: Data can no longer be set using `select2("data")`. You ' +
                    'should consider setting the value instead using `$element.val()`.'
                  );
              }

              var data = [];

              this.dataAdapter.current(function (currentData) {
                  data = currentData;
              });

              return data;
          };

          Select2.prototype.val = function (args) {
              if (this.options.get('debug') && window.console && console.warn) {
                  console.warn(
                    'Select2: The `select2("val")` method has been deprecated and will be' +
                    ' removed in later Select2 versions. Use $element.val() instead.'
                  );
              }

              if (args == null || args.length === 0) {
                  return this.$element.val();
              }

              var newVal = args[0];

              if ($.isArray(newVal)) {
                  newVal = $.map(newVal, function (obj) {
                      return obj.toString();
                  });
              }

              this.$element.val(newVal).trigger('change');
          };

          Select2.prototype.destroy = function () {
              this.$container.remove();

              if (this.$element[0].detachEvent) {
                  this.$element[0].detachEvent('onpropertychange', this._syncA);
              }

              if (this._observer != null) {
                  this._observer.disconnect();
                  this._observer = null;
              } else if (this.$element[0].removeEventListener) {
                  this.$element[0]
                    .removeEventListener('DOMAttrModified', this._syncA, false);
                  this.$element[0]
                    .removeEventListener('DOMNodeInserted', this._syncS, false);
                  this.$element[0]
                    .removeEventListener('DOMNodeRemoved', this._syncS, false);
              }

              this._syncA = null;
              this._syncS = null;

              this.$element.off('.select2');
              this.$element.attr('tabindex', this.$element.data('old-tabindex'));

              this.$element.removeClass('select2-hidden-accessible');
              this.$element.attr('aria-hidden', 'false');
              this.$element.removeData('select2');

              this.dataAdapter.destroy();
              this.selection.destroy();
              this.dropdown.destroy();
              this.results.destroy();

              this.dataAdapter = null;
              this.selection = null;
              this.dropdown = null;
              this.results = null;
          };

          Select2.prototype.render = function () {
              var $container = $(
                '<span class="select2 select2-container">' +
                  '<span class="selection"></span>' +
                  '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
                '</span>'
              );

              $container.attr('dir', this.options.get('dir'));

              this.$container = $container;

              this.$container.addClass('select2-container--' + this.options.get('theme'));

              $container.data('element', this.$element);

              return $container;
          };

          return Select2;
      });

      S2.define('select2/compat/utils', [
        'jquery'
      ], function ($) {
          function syncCssClasses($dest, $src, adapter) {
              var classes, replacements = [], adapted;

              classes = $.trim($dest.attr('class'));

              if (classes) {
                  classes = '' + classes; // for IE which returns object

                  $(classes.split(/\s+/)).each(function () {
                      // Save all Select2 classes
                      if (this.indexOf('select2-') === 0) {
                          replacements.push(this);
                      }
                  });
              }

              classes = $.trim($src.attr('class'));

              if (classes) {
                  classes = '' + classes; // for IE which returns object

                  $(classes.split(/\s+/)).each(function () {
                      // Only adapt non-Select2 classes
                      if (this.indexOf('select2-') !== 0) {
                          adapted = adapter(this);

                          if (adapted != null) {
                              replacements.push(adapted);
                          }
                      }
                  });
              }

              $dest.attr('class', replacements.join(' '));
          }

          return {
              syncCssClasses: syncCssClasses
          };
      });

      S2.define('select2/compat/containerCss', [
        'jquery',
        './utils'
      ], function ($, CompatUtils) {
          // No-op CSS adapter that discards all classes by default
          function _containerAdapter(clazz) {
              return null;
          }

          function ContainerCSS() { }

          ContainerCSS.prototype.render = function (decorated) {
              var $container = decorated.call(this);

              var containerCssClass = this.options.get('containerCssClass') || '';

              if ($.isFunction(containerCssClass)) {
                  containerCssClass = containerCssClass(this.$element);
              }

              var containerCssAdapter = this.options.get('adaptContainerCssClass');
              containerCssAdapter = containerCssAdapter || _containerAdapter;

              if (containerCssClass.indexOf(':all:') !== -1) {
                  containerCssClass = containerCssClass.replace(':all:', '');

                  var _cssAdapter = containerCssAdapter;

                  containerCssAdapter = function (clazz) {
                      var adapted = _cssAdapter(clazz);

                      if (adapted != null) {
                          // Append the old one along with the adapted one
                          return adapted + ' ' + clazz;
                      }

                      return clazz;
                  };
              }

              var containerCss = this.options.get('containerCss') || {};

              if ($.isFunction(containerCss)) {
                  containerCss = containerCss(this.$element);
              }

              CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);

              $container.css(containerCss);
              $container.addClass(containerCssClass);

              return $container;
          };

          return ContainerCSS;
      });

      S2.define('select2/compat/dropdownCss', [
        'jquery',
        './utils'
      ], function ($, CompatUtils) {
          // No-op CSS adapter that discards all classes by default
          function _dropdownAdapter(clazz) {
              return null;
          }

          function DropdownCSS() { }

          DropdownCSS.prototype.render = function (decorated) {
              var $dropdown = decorated.call(this);

              var dropdownCssClass = this.options.get('dropdownCssClass') || '';

              if ($.isFunction(dropdownCssClass)) {
                  dropdownCssClass = dropdownCssClass(this.$element);
              }

              var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');
              dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;

              if (dropdownCssClass.indexOf(':all:') !== -1) {
                  dropdownCssClass = dropdownCssClass.replace(':all:', '');

                  var _cssAdapter = dropdownCssAdapter;

                  dropdownCssAdapter = function (clazz) {
                      var adapted = _cssAdapter(clazz);

                      if (adapted != null) {
                          // Append the old one along with the adapted one
                          return adapted + ' ' + clazz;
                      }

                      return clazz;
                  };
              }

              var dropdownCss = this.options.get('dropdownCss') || {};

              if ($.isFunction(dropdownCss)) {
                  dropdownCss = dropdownCss(this.$element);
              }

              CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);

              $dropdown.css(dropdownCss);
              $dropdown.addClass(dropdownCssClass);

              return $dropdown;
          };

          return DropdownCSS;
      });

      S2.define('select2/compat/initSelection', [
        'jquery'
      ], function ($) {
          function InitSelection(decorated, $element, options) {
              if (options.get('debug') && window.console && console.warn) {
                  console.warn(
                    'Select2: The `initSelection` option has been deprecated in favor' +
                    ' of a custom data adapter that overrides the `current` method. ' +
                    'This method is now called multiple times instead of a single ' +
                    'time when the instance is initialized. Support will be removed ' +
                    'for the `initSelection` option in future versions of Select2'
                  );
              }

              this.initSelection = options.get('initSelection');
              this._isInitialized = false;

              decorated.call(this, $element, options);
          }

          InitSelection.prototype.current = function (decorated, callback) {
              var self = this;

              if (this._isInitialized) {
                  decorated.call(this, callback);

                  return;
              }

              this.initSelection.call(null, this.$element, function (data) {
                  self._isInitialized = true;

                  if (!$.isArray(data)) {
                      data = [data];
                  }

                  callback(data);
              });
          };

          return InitSelection;
      });

      S2.define('select2/compat/inputData', [
        'jquery'
      ], function ($) {
          function InputData(decorated, $element, options) {
              this._currentData = [];
              this._valueSeparator = options.get('valueSeparator') || ',';

              if ($element.prop('type') === 'hidden') {
                  if (options.get('debug') && console && console.warn) {
                      console.warn(
                        'Select2: Using a hidden input with Select2 is no longer ' +
                        'supported and may stop working in the future. It is recommended ' +
                        'to use a `<select>` element instead.'
                      );
                  }
              }

              decorated.call(this, $element, options);
          }

          InputData.prototype.current = function (_, callback) {
              function getSelected(data, selectedIds) {
                  var selected = [];

                  if (data.selected || $.inArray(data.id, selectedIds) !== -1) {
                      data.selected = true;
                      selected.push(data);
                  } else {
                      data.selected = false;
                  }

                  if (data.children) {
                      selected.push.apply(selected, getSelected(data.children, selectedIds));
                  }

                  return selected;
              }

              var selected = [];

              for (var d = 0; d < this._currentData.length; d++) {
                  var data = this._currentData[d];

                  selected.push.apply(
                    selected,
                    getSelected(
                      data,
                      this.$element.val().split(
                        this._valueSeparator
                      )
                    )
                  );
              }

              callback(selected);
          };

          InputData.prototype.select = function (_, data) {
              if (!this.options.get('multiple')) {
                  this.current(function (allData) {
                      $.map(allData, function (data) {
                          data.selected = false;
                      });
                  });

                  this.$element.val(data.id);
                  this.$element.trigger('change');
              } else {
                  var value = this.$element.val();
                  value += this._valueSeparator + data.id;

                  this.$element.val(value);
                  this.$element.trigger('change');
              }
          };

          InputData.prototype.unselect = function (_, data) {
              var self = this;

              data.selected = false;

              this.current(function (allData) {
                  var values = [];

                  for (var d = 0; d < allData.length; d++) {
                      var item = allData[d];

                      if (data.id == item.id) {
                          continue;
                      }

                      values.push(item.id);
                  }

                  self.$element.val(values.join(self._valueSeparator));
                  self.$element.trigger('change');
              });
          };

          InputData.prototype.query = function (_, params, callback) {
              var results = [];

              for (var d = 0; d < this._currentData.length; d++) {
                  var data = this._currentData[d];

                  var matches = this.matches(params, data);

                  if (matches !== null) {
                      results.push(matches);
                  }
              }

              callback({
                  results: results
              });
          };

          InputData.prototype.addOptions = function (_, $options) {
              var options = $.map($options, function ($option) {
                  return $.data($option[0], 'data');
              });

              this._currentData.push.apply(this._currentData, options);
          };

          return InputData;
      });

      S2.define('select2/compat/matcher', [
        'jquery'
      ], function ($) {
          function oldMatcher(matcher) {
              function wrappedMatcher(params, data) {
                  var match = $.extend(true, {}, data);

                  if (params.term == null || $.trim(params.term) === '') {
                      return match;
                  }

                  if (data.children) {
                      for (var c = data.children.length - 1; c >= 0; c--) {
                          var child = data.children[c];

                          // Check if the child object matches
                          // The old matcher returned a boolean true or false
                          var doesMatch = matcher(params.term, child.text, child);

                          // If the child didn't match, pop it off
                          if (!doesMatch) {
                              match.children.splice(c, 1);
                          }
                      }

                      if (match.children.length > 0) {
                          return match;
                      }
                  }

                  if (matcher(params.term, data.text, data)) {
                      return match;
                  }

                  return null;
              }

              return wrappedMatcher;
          }

          return oldMatcher;
      });

      S2.define('select2/compat/query', [

      ], function () {
          function Query(decorated, $element, options) {
              if (options.get('debug') && window.console && console.warn) {
                  console.warn(
                    'Select2: The `query` option has been deprecated in favor of a ' +
                    'custom data adapter that overrides the `query` method. Support ' +
                    'will be removed for the `query` option in future versions of ' +
                    'Select2.'
                  );
              }

              decorated.call(this, $element, options);
          }

          Query.prototype.query = function (_, params, callback) {
              params.callback = callback;

              var query = this.options.get('query');

              query.call(null, params);
          };

          return Query;
      });

      S2.define('select2/dropdown/attachContainer', [

      ], function () {
          function AttachContainer(decorated, $element, options) {
              decorated.call(this, $element, options);
          }

          AttachContainer.prototype.position =
            function (decorated, $dropdown, $container) {
                var $dropdownContainer = $container.find('.dropdown-wrapper');
                $dropdownContainer.append($dropdown);

                $dropdown.addClass('select2-dropdown--below');
                $container.addClass('select2-container--below');
            };

          return AttachContainer;
      });

      S2.define('select2/dropdown/stopPropagation', [

      ], function () {
          function StopPropagation() { }

          StopPropagation.prototype.bind = function (decorated, container, $container) {
              decorated.call(this, container, $container);

              var stoppedEvents = [
              'blur',
              'change',
              'click',
              'dblclick',
              'focus',
              'focusin',
              'focusout',
              'input',
              'keydown',
              'keyup',
              'keypress',
              'mousedown',
              'mouseenter',
              'mouseleave',
              'mousemove',
              'mouseover',
              'mouseup',
              'search',
              'touchend',
              'touchstart'
              ];

              this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
                  evt.stopPropagation();
              });
          };

          return StopPropagation;
      });

      S2.define('select2/selection/stopPropagation', [

      ], function () {
          function StopPropagation() { }

          StopPropagation.prototype.bind = function (decorated, container, $container) {
              decorated.call(this, container, $container);

              var stoppedEvents = [
                'blur',
                'change',
                'click',
                'dblclick',
                'focus',
                'focusin',
                'focusout',
                'input',
                'keydown',
                'keyup',
                'keypress',
                'mousedown',
                'mouseenter',
                'mouseleave',
                'mousemove',
                'mouseover',
                'mouseup',
                'search',
                'touchend',
                'touchstart'
              ];

              this.$selection.on(stoppedEvents.join(' '), function (evt) {
                  evt.stopPropagation();
              });
          };

          return StopPropagation;
      });

      /*!
       * jQuery Mousewheel 3.1.13
       *
       * Copyright jQuery Foundation and other contributors
       * Released under the MIT license
       * http://jquery.org/license
       */

      (function (factory) {
          if (typeof S2.define === 'function' && S2.define.amd) {
              // AMD. Register as an anonymous module.
              S2.define('jquery-mousewheel', ['jquery'], factory);
          } else if (typeof exports === 'object') {
              // Node/CommonJS style for Browserify
              module.exports = factory;
          } else {
              // Browser globals
              factory(jQuery);
          }
      }(function ($) {

          var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
              toBind = ('onwheel' in document || document.documentMode >= 9) ?
                          ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
              slice = Array.prototype.slice,
              nullLowestDeltaTimeout, lowestDelta;

          if ($.event.fixHooks) {
              for (var i = toFix.length; i;) {
                  $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
              }
          }

          var special = $.event.special.mousewheel = {
              version: '3.1.12',

              setup: function () {
                  if (this.addEventListener) {
                      for (var i = toBind.length; i;) {
                          this.addEventListener(toBind[--i], handler, false);
                      }
                  } else {
                      this.onmousewheel = handler;
                  }
                  // Store the line height and page height for this particular element
                  $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
                  $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
              },

              teardown: function () {
                  if (this.removeEventListener) {
                      for (var i = toBind.length; i;) {
                          this.removeEventListener(toBind[--i], handler, false);
                      }
                  } else {
                      this.onmousewheel = null;
                  }
                  // Clean up the data we added to the element
                  $.removeData(this, 'mousewheel-line-height');
                  $.removeData(this, 'mousewheel-page-height');
              },

              getLineHeight: function (elem) {
                  var $elem = $(elem),
                      $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
                  if (!$parent.length) {
                      $parent = $('body');
                  }
                  return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
              },

              getPageHeight: function (elem) {
                  return $(elem).height();
              },

              settings: {
                  adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
                  normalizeOffset: true  // calls getBoundingClientRect for each event
              }
          };

          $.fn.extend({
              mousewheel: function (fn) {
                  return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
              },

              unmousewheel: function (fn) {
                  return this.unbind('mousewheel', fn);
              }
          });


          function handler(event) {
              var orgEvent = event || window.event,
                  args = slice.call(arguments, 1),
                  delta = 0,
                  deltaX = 0,
                  deltaY = 0,
                  absDelta = 0,
                  offsetX = 0,
                  offsetY = 0;
              event = $.event.fix(orgEvent);
              event.type = 'mousewheel';

              // Old school scrollwheel delta
              if ('detail' in orgEvent) { deltaY = orgEvent.detail * -1; }
              if ('wheelDelta' in orgEvent) { deltaY = orgEvent.wheelDelta; }
              if ('wheelDeltaY' in orgEvent) { deltaY = orgEvent.wheelDeltaY; }
              if ('wheelDeltaX' in orgEvent) { deltaX = orgEvent.wheelDeltaX * -1; }

              // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
              if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
                  deltaX = deltaY * -1;
                  deltaY = 0;
              }

              // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
              delta = deltaY === 0 ? deltaX : deltaY;

              // New school wheel delta (wheel event)
              if ('deltaY' in orgEvent) {
                  deltaY = orgEvent.deltaY * -1;
                  delta = deltaY;
              }
              if ('deltaX' in orgEvent) {
                  deltaX = orgEvent.deltaX;
                  if (deltaY === 0) { delta = deltaX * -1; }
              }

              // No change actually happened, no reason to go any further
              if (deltaY === 0 && deltaX === 0) { return; }

              // Need to convert lines and pages to pixels if we aren't already in pixels
              // There are three delta modes:
              //   * deltaMode 0 is by pixels, nothing to do
              //   * deltaMode 1 is by lines
              //   * deltaMode 2 is by pages
              if (orgEvent.deltaMode === 1) {
                  var lineHeight = $.data(this, 'mousewheel-line-height');
                  delta *= lineHeight;
                  deltaY *= lineHeight;
                  deltaX *= lineHeight;
              } else if (orgEvent.deltaMode === 2) {
                  var pageHeight = $.data(this, 'mousewheel-page-height');
                  delta *= pageHeight;
                  deltaY *= pageHeight;
                  deltaX *= pageHeight;
              }

              // Store lowest absolute delta to normalize the delta values
              absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

              if (!lowestDelta || absDelta < lowestDelta) {
                  lowestDelta = absDelta;

                  // Adjust older deltas if necessary
                  if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                      lowestDelta /= 40;
                  }
              }

              // Adjust older deltas if necessary
              if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                  // Divide all the things by 40!
                  delta /= 40;
                  deltaX /= 40;
                  deltaY /= 40;
              }

              // Get a whole, normalized value for the deltas
              delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
              deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
              deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

              // Normalise offsetX and offsetY properties
              if (special.settings.normalizeOffset && this.getBoundingClientRect) {
                  var boundingRect = this.getBoundingClientRect();
                  offsetX = event.clientX - boundingRect.left;
                  offsetY = event.clientY - boundingRect.top;
              }

              // Add information to the event object
              event.deltaX = deltaX;
              event.deltaY = deltaY;
              event.deltaFactor = lowestDelta;
              event.offsetX = offsetX;
              event.offsetY = offsetY;
              // Go ahead and set deltaMode to 0 since we converted to pixels
              // Although this is a little odd since we overwrite the deltaX/Y
              // properties with normalized deltas.
              event.deltaMode = 0;

              // Add event and delta to the front of the arguments
              args.unshift(event, delta, deltaX, deltaY);

              // Clearout lowestDelta after sometime to better
              // handle multiple device types that give different
              // a different lowestDelta
              // Ex: trackpad = 3 and mouse wheel = 120
              if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
              nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

              return ($.event.dispatch || $.event.handle).apply(this, args);
          }

          function nullLowestDelta() {
              lowestDelta = null;
          }

          function shouldAdjustOldDeltas(orgEvent, absDelta) {
              // If this is an older event and the delta is divisable by 120,
              // then we are assuming that the browser is treating this as an
              // older mouse wheel event and that we should divide the deltas
              // by 40 to try and get a more usable deltaFactor.
              // Side note, this actually impacts the reported scroll distance
              // in older browsers and can cause scrolling to be slower than native.
              // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
              return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
          }

      }));

      S2.define('jquery.select2', [
        'jquery',
        'jquery-mousewheel',

        './select2/core',
        './select2/defaults'
      ], function ($, _, Select2, Defaults) {
          if ($.fn.select2 == null) {
              // All methods that should return the element
              var thisMethods = ['open', 'close', 'destroy'];

              $.fn.select2 = function (options) {
                  options = options || {};

                  if (typeof options === 'object') {
                      this.each(function () {
                          var instanceOptions = $.extend(true, {}, options);

                          var instance = new Select2($(this), instanceOptions);
                      });

                      return this;
                  } else if (typeof options === 'string') {
                      var ret;
                      var args = Array.prototype.slice.call(arguments, 1);

                      this.each(function () {
                          var instance = $(this).data('select2');

                          if (instance == null && window.console && console.error) {
                              console.error(
                                'The select2(\'' + options + '\') method was called on an ' +
                                'element that is not using Select2.'
                              );
                          }

                          ret = instance[options].apply(instance, args);
                      });

                      // Check if we should be returning `this`
                      if ($.inArray(options, thisMethods) > -1) {
                          return this;
                      }

                      return ret;
                  } else {
                      throw new Error('Invalid arguments for Select2: ' + options);
                  }
              };
          }

          if ($.fn.select2.defaults == null) {
              $.fn.select2.defaults = Defaults;
          }

          return Select2;
      });

      // Return the AMD loader configuration so it can be used outside of this file
      return {
          define: S2.define,
          require: S2.require
      };
  }());

    // Autoload the jQuery bindings
    // We know that all of the modules exist above this, so we're safe
    var select2 = S2.require('jquery.select2');

    // Hold the AMD module references on the jQuery function that was just loaded
    // This allows Select2 to use the internal loader outside of this file, such
    // as in the language files.
    jQuery.fn.select2.amd = S2;

    // Return the Select2 instance for anyone who is importing it.
    return select2;
}));

/*! Select2 4.0.3 | https://github.com/select2/select2/blob/master/LICENSE.md */

(function () { if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) var e = jQuery.fn.select2.amd; return e.define("select2/i18n/zh-CN", [], function () { return { errorLoading: function () { return "无法载入结果。" }, inputTooLong: function (e) { var t = e.input.length - e.maximum, n = "请删除" + t + "个字符"; return n }, inputTooShort: function (e) { var t = e.minimum - e.input.length, n = "请再输入至少" + t + "个字符"; return n }, loadingMore: function () { return "载入更多结果…" }, maximumSelected: function (e) { var t = "最多只能选择" + e.maximum + "个项目"; return t }, noResults: function () { return "未找到结果" }, searching: function () { return "搜索中…" } } }), { define: e.define, require: e.require } })();
/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Improved by keenthemes for Metronic Theme
 * Version: 1.3.2
 *
 */
(function($) {

    jQuery.fn.extend({
        slimScroll: function(options) {

            var defaults = {

                // width in pixels of the visible scroll area
                width: 'auto',

                // height in pixels of the visible scroll area
                height: '250px',

                // width in pixels of the scrollbar and rail
                size: '7px',

                // scrollbar color, accepts any hex/color value
                color: '#000',

                // scrollbar position - left/right
                position: 'right',

                // distance in pixels between the side edge and the scrollbar
                distance: '1px',

                // default scroll position on load - top / bottom / $('selector')
                start: 'top',

                // sets scrollbar opacity
                opacity: .4,

                // enables always-on mode for the scrollbar
                alwaysVisible: false,

                // check if we should hide the scrollbar when user is hovering over
                disableFadeOut: false,

                // sets visibility of the rail
                railVisible: false,

                // sets rail color
                railColor: '#333',

                // sets rail opacity
                railOpacity: .2,

                // whether  we should use jQuery UI Draggable to enable bar dragging
                railDraggable: true,

                // defautlt CSS class of the slimscroll rail
                railClass: 'slimScrollRail',

                // defautlt CSS class of the slimscroll bar
                barClass: 'slimScrollBar',

                // defautlt CSS class of the slimscroll wrapper
                wrapperClass: 'slimScrollDiv',

                // check if mousewheel should scroll the window if we reach top/bottom
                allowPageScroll: false,

                // scroll amount applied to each mouse wheel step
                wheelStep: 20,

                // scroll amount applied when user is using gestures
                touchScrollStep: 200,

                // sets border radius
                borderRadius: '7px',

                // sets border radius of the rail
                railBorderRadius: '7px',

                // sets animation status on a given scroll(added my keenthemes)
                animate: true
            };

            var o = $.extend(defaults, options);

            // do it for every element that matches selector
            this.each(function() {

                var isOverPanel, isOverBar, isDragg, queueHide, touchDif,
                    barHeight, percentScroll, lastScroll,
                    divS = '<div></div>',
                    minBarHeight = 30,
                    releaseScroll = false;

                // used in event handlers and for better minification
                var me = $(this);

                //begin: windows phone fix added by keenthemes
                if ('ontouchstart' in window && window.navigator.msPointerEnabled) {
                  me.css("-ms-touch-action", "none");
              }
                //end: windows phone fix added by keenthemes

                // ensure we are not binding it again
                if (me.parent().hasClass(o.wrapperClass)) {
                    // start from last bar position
                    var offset = me.scrollTop();

                    // find bar and rail
                    bar = me.parent().find('.' + o.barClass);
                    rail = me.parent().find('.' + o.railClass);

                    getBarHeight();

                    // check if we should scroll existing instance
                    if ($.isPlainObject(options)) {
                        // Pass height: auto to an existing slimscroll object to force a resize after contents have changed
                        if ('height' in options && options.height == 'auto') {
                            me.parent().css('height', 'auto');
                            me.css('height', 'auto');
                            var height = me.parent().parent().height();
                            me.parent().css('height', height);
                            me.css('height', height);
                        }

                        if ('scrollTo' in options) {
                            // jump to a static point
                            offset = parseInt(o.scrollTo);
                        } else if ('scrollBy' in options) {
                            // jump by value pixels
                            offset += parseInt(o.scrollBy);
                        } else if ('destroy' in options) {
                            // remove slimscroll elements
                            bar.remove();
                            rail.remove();
                            me.unwrap();
                            return;
                        }

                        // scroll content by the given offset
                        scrollContent(offset, false, true);
                    }

                    return;
                }

                // optionally set height to the parent's height
                o.height = (options.height == 'auto') ? me.parent().height() : options.height;

                // wrap content
                var wrapper = $(divS)
                    .addClass(o.wrapperClass)
                    .css({
                        position: 'relative',
                        overflow: 'hidden',
                        width: o.width,
                        height: o.height
                    });

                // update style for the div
                me.css({
                    overflow: 'hidden',
                    width: o.width,
                    height: o.height
                });

                // create scrollbar rail
                var rail = $(divS)
                    .addClass(o.railClass)
                    .css({
                        width: o.size,
                        height: '100%',
                        position: 'absolute',
                        top: 0,
                        display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',
                        'border-radius': o.railBorderRadius,
                        background: o.railColor,
                        opacity: o.railOpacity,
                        zIndex: 90
                    });

                // create scrollbar
                var bar = $(divS)
                    .addClass(o.barClass)
                    .css({
                        background: o.color,
                        width: o.size,
                        position: 'absolute',
                        top: 0,
                        opacity: o.opacity,
                        display: o.alwaysVisible ? 'block' : 'none',
                        'border-radius': o.borderRadius,
                        BorderRadius: o.borderRadius,
                        MozBorderRadius: o.borderRadius,
                        WebkitBorderRadius: o.borderRadius,
                        zIndex: 99
                    });

                // set position
                var posCss = (o.position == 'right') ? {
                    right: o.distance
                } : {
                    left: o.distance
                };
                rail.css(posCss);
                bar.css(posCss);

                // wrap it
                me.wrap(wrapper);

                // append to parent div
                me.parent().append(bar);
                me.parent().append(rail);

                // make it draggable and no longer dependent on the jqueryUI
                if (o.railDraggable) {
                    bar.bind("mousedown", function(e) {
                        var $doc = $(document);
                        isDragg = true;
                        t = parseFloat(bar.css('top'));
                        pageY = e.pageY;

                        $doc.bind("mousemove.slimscroll", function(e) {
                            currTop = t + e.pageY - pageY;
                            bar.css('top', currTop);
                            scrollContent(0, bar.position().top, false); // scroll content
                        });

                        $doc.bind("mouseup.slimscroll", function(e) {
                            isDragg = false;
                            hideBar();
                            $doc.unbind('.slimscroll');
                        });
                        return false;
                    }).bind("selectstart.slimscroll", function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        return false;
                    });
                }

                //begin: windows phone fix added by keenthemes
                if ('ontouchstart' in window && window.navigator.msPointerEnabled) {
                    me.bind('MSPointerDown', function(e, b) {
                        // record where touch started
                        touchDif = e.originalEvent.pageY;
                    });

                    me.bind('MSPointerMove', function(e) {
                        // prevent scrolling the page if necessary
                        e.originalEvent.preventDefault();
                        // see how far user swiped
                        var diff = (touchDif - e.originalEvent.pageY) / o.touchScrollStep;
                        // scroll content
                        scrollContent(diff, true);
                        touchDif = e.originalEvent.pageY;
                    });
                }
                //end: windows phone fix added by keenthemes

                // on rail over
                rail.hover(function() {
                    showBar();
                }, function() {
                    hideBar();
                });

                // on bar over
                bar.hover(function() {
                    isOverBar = true;
                }, function() {
                    isOverBar = false;
                });

                // show on parent mouseover
                me.hover(function() {
                    isOverPanel = true;
                    showBar();
                    hideBar();
                }, function() {
                    isOverPanel = false;
                    hideBar();
                });

                // support for mobile
                me.bind('touchstart', function(e, b) {
                    if (e.originalEvent.touches.length) {
                        // record where touch started
                        touchDif = e.originalEvent.touches[0].pageY;
                    }
                });

                me.bind('touchmove', function(e) {
                    // prevent scrolling the page if necessary
                    if (!releaseScroll) {
                        e.originalEvent.preventDefault();
                    }
                    if (e.originalEvent.touches.length) {
                        // see how far user swiped
                        var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
                        // scroll content
                        scrollContent(diff, true);
                        touchDif = e.originalEvent.touches[0].pageY;
                    }
                });

                // set up initial height
                getBarHeight();

                // check start position
                if (o.start === 'bottom') {
                    // scroll content to bottom
                    bar.css({
                        top: me.outerHeight() - bar.outerHeight()
                    });
                    scrollContent(0, true);
                } else if (o.start !== 'top') {
                    // assume jQuery selector
                    scrollContent($(o.start).position().top, null, true);

                    // make sure bar stays hidden
                    if (!o.alwaysVisible) {
                        bar.hide();
                    }
                }

                // attach scroll events
                attachWheel();

                function _onWheel(e) {
                    // use mouse wheel only when mouse is over
                    if (!isOverPanel) {
                        return;
                    }

                    var e = e || window.event;

                    var delta = 0;
                    if (e.wheelDelta) {
                        delta = -e.wheelDelta / 120;
                    }
                    if (e.detail) {
                        delta = e.detail / 3;
                    }

                    var target = e.target || e.srcTarget || e.srcElement;
                    if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {
                        // scroll content
                        scrollContent(delta, true);
                    }

                    // stop window scroll
                    if (e.preventDefault && !releaseScroll) {
                        e.preventDefault();
                    }
                    if (!releaseScroll) {
                        e.returnValue = false;
                    }
                }

                function scrollContent(y, isWheel, isJump) {
                    releaseScroll = false;
                    var delta = y;
                    var maxTop = me.outerHeight() - bar.outerHeight();

                    if (isWheel) {
                        // move bar with mouse wheel
                        delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();

                        // move bar, make sure it doesn't go out
                        delta = Math.min(Math.max(delta, 0), maxTop);

                        // if scrolling down, make sure a fractional change to the
                        // scroll position isn't rounded away when the scrollbar's CSS is set
                        // this flooring of delta would happened automatically when
                        // bar.css is set below, but we floor here for clarity
                        delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);

                        // scroll the scrollbar
                        bar.css({
                            top: delta + 'px'
                        });
                    }

                    // calculate actual scroll amount
                    percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
                    delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

                    if (isJump) {
                        delta = y;
                        var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
                        offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
                        bar.css({
                            top: offsetTop + 'px'
                        });
                    }

                    // scroll content
                    if ('scrollTo' in o && o.animate) {
                        me.animate({
                            scrollTop: delta
                        });
                    } else {
                        me.scrollTop(delta);
                    }

                    // fire scrolling event
                    me.trigger('slimscrolling', ~~delta);

                    // ensure bar is visible
                    showBar();

                    // trigger hide when scroll is stopped
                    hideBar();

                }

                function attachWheel() {
                    if (window.addEventListener) {
                        this.addEventListener('DOMMouseScroll', _onWheel, false);
                        this.addEventListener('mousewheel', _onWheel, false);
                    } else {
                        document.attachEvent("onmousewheel", _onWheel)
                    }
                }

                function getBarHeight() {
                    // calculate scrollbar height and make sure it is not too small
                    barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
                    bar.css({
                        height: barHeight + 'px'
                    });

                    // hide scrollbar if content is not long enough
                    var display = barHeight == me.outerHeight() ? 'none' : 'block';
                    bar.css({
                        display: display
                    });
                }

                function showBar() {
                    // recalculate bar height
                    getBarHeight();
                    clearTimeout(queueHide);

                    // when bar reached top or bottom
                    if (percentScroll == ~~percentScroll) {
                        //release wheel
                        releaseScroll = o.allowPageScroll;

                        // publish approporiate event
                        if (lastScroll != percentScroll) {
                            var msg = (~~percentScroll == 0) ? 'top' : 'bottom';
                            me.trigger('slimscroll', msg);
                        }
                    } else {
                        releaseScroll = false;
                    }
                    lastScroll = percentScroll;

                    // show only when required
                    if (barHeight >= me.outerHeight()) {
                        //allow window scroll
                        releaseScroll = true;
                        return;
                    }
                    bar.stop(true, true).fadeIn('fast');
                    if (o.railVisible) {
                        rail.stop(true, true).fadeIn('fast');
                    }
                }

                function hideBar() {
                    // only hide when options allow it
                    if (!o.alwaysVisible) {
                        queueHide = setTimeout(function() {
                            if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg) {
                                bar.fadeOut('slow');
                                rail.fadeOut('slow');
                            }
                        }, 1000);
                    }
                }

            });

            // maintain chainability
            return this;
        }
    });

    jQuery.fn.extend({
        slimscroll: jQuery.fn.slimScroll
    });

})(jQuery);
/*!
 * jQuery Validation Plugin v1.14.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2015 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend($.fn, {
	// http://jqueryvalidation.org/validate/
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.on( "click.validate", ":submit", function( event ) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = event.target;
				}

				// allow suppressing validation by adding a cancel class to the submit button
				if ( $( this ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( this ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.on( "submit.validate", function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden, result;
					if ( validator.settings.submitHandler ) {
						if ( validator.submitButton ) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $( "<input type='hidden'/>" )
								.attr( "name", validator.submitButton.name )
								.val( $( validator.submitButton ).val() )
								.appendTo( validator.currentForm );
						}
						result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( validator.submitButton ) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if ( result !== undefined ) {
							return result;
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator, errorList;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			errorList = [];
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
				errorList = errorList.concat( validator.errorList );
			});
			validator.errorList = errorList;
		}
		return valid;
	},

	// http://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;

		if ( command ) {
			settings = $.data( element.form, "validator" ).settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );
				// remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
					if ( method === "required" ) {
						$( element ).removeAttr( "aria-required" );
					}
				});
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		// make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
			$( element ).attr( "aria-required", "true" );
		}

		// make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param });
		}

		return data;
	}
});

// Custom selectors
$.extend( $.expr[ ":" ], {
	// http://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		return !!$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		});
	});
	return source;
};

$.extend( $.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// Hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},
		onkeyup: function( element, event ) {
			// Avoid revalidate the field when pressing one of the following keys
			// Shift       => 16
			// Ctrl        => 17
			// Alt         => 18
			// Caps lock   => 20
			// End         => 35
			// Home        => 36
			// Left arrow  => 37
			// Up arrow    => 38
			// Right arrow => 39
			// Down arrow  => 40
			// Insert      => 45
			// Num lock    => 144
			// AltGr key   => 225
			var excludedKeys = [
				16, 17, 18, 20, 35, 36, 37,
				38, 39, 40, 45, 144, 225
			];

			if ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastElement ) {
				this.element( element );
			}
		},
		onclick: function( element ) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// http://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date ( ISO ).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format( "Please enter no more than {0} characters." ),
		minlength: $.validator.format( "Please enter at least {0} characters." ),
		rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
		range: $.validator.format( "Please enter a value between {0} and {1}." ),
		max: $.validator.format( "Please enter a value less than or equal to {0}." ),
		min: $.validator.format( "Please enter a value greater than or equal to {0}." )
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				});
			});
			rules = this.settings.rules;
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			});

			function delegate( event ) {
				var validator = $.data( this.form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {
					settings[ eventType ].call( validator, this, event );
				}
			}

			$( this.currentForm )
				.on( "focusin.validate focusout.validate keyup.validate",
					":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
					"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
					"[type='radio'], [type='checkbox']", delegate)
				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );
			}

			// Add aria-required to any Static/Data/Class required fields before first validation
			// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
			$( this.currentForm ).find( "[required], [data-rule-required], .required" ).attr( "aria-required", "true" );
		},

		// http://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend({}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// http://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				result = true;

			this.lastElement = checkElement;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				result = this.check( checkElement ) !== false;
				if ( result ) {
					delete this.invalid[ checkElement.name ];
				} else {
					this.invalid[ checkElement.name ] = true;
				}
			}
			// Add aria-invalid status for screen readers
			$( element ).attr( "aria-invalid", !result );

			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[ name ],
						element: this.findByName( name )[ 0 ]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				});
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			var i, elements = this.elements()
				.removeData( "previousValue" )
				.removeAttr( "aria-invalid" );

			if ( this.settings.unhighlight ) {
				for ( i = 0; elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ],
						this.settings.errorClass, "" );
				}
			} else {
				elements.removeClass( this.settings.errorClass );
			}
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])
					.filter( ":visible" )
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $( this.currentForm )
			.find( "input, select, textarea" )
			.not( ":submit, :reset, :image, :disabled" )
			.not( this.settings.ignore )
			.filter( function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ this.name ] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var val,
				$element = $( element ),
				type = element.type;

			if ( type === "radio" || type === "checkbox" ) {
				return this.findByName( element.name ).filter(":checked").val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? false : $element.val();
			}

			val = $element.val();
			if ( typeof val === "string" ) {
				return val.replace(/\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				}).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule;

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {

					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					if ( e instanceof TypeError ) {
						e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
					}

					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		defaultMessage: function( element, method ) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[ method ],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}
			this.errorList.push({
				message: message,
				element: element,
				method: rule.method
			});

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map(function() {
				return this.element;
			});
		},

		showLabel: function( element, message ) {
			var place, group, errorID,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );
			if ( error.length ) {
				// refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
				// replace message on existing label
				error.html( message );
			} else {
				// create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement( place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {
					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );
				} else if ( error.parents( "label[for='" + elementID + "']" ).length === 0 ) {
					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby

					errorID = error.attr( "id" ).replace( /(:|\.|\[|\]|\$)/g, "\\$1");
					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\\b" + errorID + "\\b" ) ) ) {
						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						$.each( this.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + name + "']", this.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						});
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.idOrName( element ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";

			// aria-describedby should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + describer.replace( /\s+/g, ", #" );
			}
			return this
				.errors()
				.filter( selector );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {

			// If radio/checkbox, validate first element in group instead
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name );
			}

			// Always apply ignore filter
			return $( element ).not( this.settings.ignore )[ 0 ];
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + name + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$( this.currentForm ).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
				this.formSubmitted = false;
			}
		},

		previousValue: function( element ) {
			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		},

		// cleans up all forms and elements, removes validator-specific events
		destroy: function() {
			this.resetForm();

			$( this.currentForm )
				.off( ".validate" )
				.removeData( "validator" );
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ]);
				}
			});
		}
		return rules;
	},

	normalizeAttributeRule: function( rules, type, method, value ) {

		// convert the value to a number for number inputs, and for text for backwards compability
		// allows type="date" and others to be compared as strings
		if ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
			value = Number( value );

			// Support Opera Mini, which returns NaN for undefined minlength
			if ( isNaN( value ) ) {
				value = undefined;
			}
		}

		if ( value || value === 0 ) {
			rules[ method ] = value;
		} else if ( type === method && type !== "range" ) {

			// exception: the jquery validate 'range' method
			// does not test for the html5 'range' type
			rules[ method ] = true;
		}
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );

				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}

				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			this.normalizeAttributeRule( rules, type, method, value );
		}

		// maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
			this.normalizeAttributeRule( rules, type, method, value );
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {
		// handle dependency check
		$.each( rules, function( prop, val ) {
			// ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[ prop ];
				}
			}
		});

		// evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = $.isFunction( parameter ) ? parameter( element ) : parameter;
		});

		// clean number parameters
		$.each([ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		});
		$.each([ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( $.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ]), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace(/[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ]), Number( parts[ 1 ] ) ];
				}
			}
		});

		if ( $.validator.autoCreateRanges ) {
			// auto-create ranges
			if ( rules.min != null && rules.max != null ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength != null && rules.maxlength != null ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	methods: {

		// http://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {
			// check if dependency is met
			if ( !this.depend( param, element ) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way
				var val = $( element ).val();
				return val && val.length > 0;
			}
			if ( this.checkable( element ) ) {
				return this.getLength( value, element ) > 0;
			}
			return value.length > 0;
		},

		// http://jqueryvalidation.org/email-method/
		email: function( value, element ) {
			// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
		},

		// http://jqueryvalidation.org/url-method/
		url: function( value, element ) {

			// Copyright (c) 2010-2013 Diego Perini, MIT licensed
			// https://gist.github.com/dperini/729294
			// see also https://mathiasbynens.be/demo/url-regex
			// modified to allow protocol-relative URLs
			return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
		},

		// http://jqueryvalidation.org/date-method/
		date: function( value, element ) {
			return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
		},

		// http://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
		},

		// http://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional( element ) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
		},

		// http://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional( element ) || /^\d+$/.test( value );
		},

		// http://jqueryvalidation.org/creditcard-method/
		// based on http://en.wikipedia.org/wiki/Luhn_algorithm
		creditcard: function( value, element ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if ( /[^0-9 \-]+/.test( value ) ) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false,
				n, cDigit;

			value = value.replace( /\D/g, "" );

			// Basing min and max length on
			// http://developer.ean.com/general_info/Valid_Credit_Card_Types
			if ( value.length < 13 || value.length > 19 ) {
				return false;
			}

			for ( n = value.length - 1; n >= 0; n--) {
				cDigit = value.charAt( n );
				nDigit = parseInt( cDigit, 10 );
				if ( bEven ) {
					if ( ( nDigit *= 2 ) > 9 ) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return ( nCheck % 10 ) === 0;
		},

		// http://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length >= param;
		},

		// http://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length <= param;
		},

		// http://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional( element ) || value >= param;
		},

		// http://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional( element ) || value <= param;
		},

		// http://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $( param );
			if ( this.settings.onfocusout ) {
				target.off( ".validate-equalTo" ).on( "blur.validate-equalTo", function() {
					$( element ).valid();
				});
			}
			return value === target.val();
		},

		// http://jqueryvalidation.org/remote-method/
		remote: function( value, element, param ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue( element ),
				validator, data;

			if (!this.settings.messages[ element.name ] ) {
				this.settings.messages[ element.name ] = {};
			}
			previous.originalMessage = this.settings.messages[ element.name ].remote;
			this.settings.messages[ element.name ].remote = previous.message;

			param = typeof param === "string" && { url: param } || param;

			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			validator = this;
			this.startRequest( element );
			data = {};
			data[ element.name ] = value;
			$.ajax( $.extend( true, {
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function( response ) {
					var valid = response === true || response === "true",
						errors, message, submitted;

					validator.settings.messages[ element.name ].remote = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.prepareElement( element );
						validator.formSubmitted = submitted;
						validator.successList.push( element );
						delete validator.invalid[ element.name ];
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, "remote" );
						errors[ element.name ] = previous.message = $.isFunction( message ) ? message( value ) : message;
						validator.invalid[ element.name ] = true;
						validator.showErrors( errors );
					}
					previous.valid = valid;
					validator.stopRequest( element, valid );
				}
			}, param ) );
			return "pending";
		}
	}

});

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;
// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter(function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = xhr;
		}
	});
} else {
	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = ajax.apply(this, arguments);
			return pendingRequests[port];
		}
		return ajax.apply(this, arguments);
	};
}

}));
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery", "../jquery.validate"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

/*
 * Translated default messages for the jQuery validation plugin.
 * Locale: ZH (Chinese, 中文 (Zhōngwén), 汉语, 漢語)
 */
$.extend($.validator.messages, {
	required: "这是必填字段",
	remote: "请修正此字段",
	email: "请输入有效的电子邮件地址",
	url: "请输入有效的网址",
	date: "请输入有效的日期",
	dateISO: "请输入有效的日期 (YYYY-MM-DD)",
	number: "请输入有效的数字",
	digits: "只能输入数字",
	creditcard: "请输入有效的信用卡号码",
	equalTo: "你的输入不相同",
	extension: "请输入有效的后缀",
	maxlength: $.validator.format("最多可以输入 {0} 个字符"),
	minlength: $.validator.format("最少要输入 {0} 个字符"),
	rangelength: $.validator.format("请输入长度在 {0} 到 {1} 之间的字符串"),
	range: $.validator.format("请输入范围在 {0} 到 {1} 之间的数值"),
	max: $.validator.format("请输入不大于 {0} 的数值"),
	min: $.validator.format("请输入不小于 {0} 的数值")
});

}));
/*!
 * jQuery Form Plugin
 * version: 3.51.0-2014.06.20
 * Requires jQuery v1.5 or later
 * Copyright (c) 2014 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
/*global ActiveXObject */

// AMD support
(function (factory) {
    "use strict";
    if (typeof define === 'function' && define.amd) {
        // using AMD; register as anon module
        define(['jquery'], factory);
    } else {
        // no AMD; invoke directly
        factory( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );
    }
}

(function($) {
"use strict";

/*
    Usage Note:
    -----------
    Do not use both ajaxSubmit and ajaxForm on the same form.  These
    functions are mutually exclusive.  Use ajaxSubmit if you want
    to bind your own submit handler to the form.  For example,

    $(document).ready(function() {
        $('#myForm').on('submit', function(e) {
            e.preventDefault(); // <-- important
            $(this).ajaxSubmit({
                target: '#output'
            });
        });
    });

    Use ajaxForm when you want the plugin to manage all the event binding
    for you.  For example,

    $(document).ready(function() {
        $('#myForm').ajaxForm({
            target: '#output'
        });
    });

    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
    form does not have to exist when you invoke ajaxForm:

    $('#myForm').ajaxForm({
        delegation: true,
        target: '#output'
    });

    When using ajaxForm, the ajaxSubmit function will be invoked for you
    at the appropriate time.
*/

/**
 * Feature detection
 */
var feature = {};
feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
feature.formdata = window.FormData !== undefined;

var hasProp = !!$.fn.prop;

// attr2 uses prop when it can but checks the return type for
// an expected string.  this accounts for the case where a form 
// contains inputs with names like "action" or "method"; in those
// cases "prop" returns the element
$.fn.attr2 = function() {
    if ( ! hasProp ) {
        return this.attr.apply(this, arguments);
    }
    var val = this.prop.apply(this, arguments);
    if ( ( val && val.jquery ) || typeof val === 'string' ) {
        return val;
    }
    return this.attr.apply(this, arguments);
};

/**
 * ajaxSubmit() provides a mechanism for immediately submitting
 * an HTML form using AJAX.
 */
$.fn.ajaxSubmit = function(options) {
    /*jshint scripturl:true */

    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
    if (!this.length) {
        log('ajaxSubmit: skipping submit process - no element selected');
        return this;
    }

    var method, action, url, $form = this;

    if (typeof options == 'function') {
        options = { success: options };
    }
    else if ( options === undefined ) {
        options = {};
    }

    method = options.type || this.attr2('method');
    action = options.url  || this.attr2('action');

    url = (typeof action === 'string') ? $.trim(action) : '';
    url = url || window.location.href || '';
    if (url) {
        // clean url (don't include hash vaue)
        url = (url.match(/^([^#]+)/)||[])[1];
    }

    options = $.extend(true, {
        url:  url,
        success: $.ajaxSettings.success,
        type: method || $.ajaxSettings.type,
        iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
    }, options);

    // hook for manipulating the form data before it is extracted;
    // convenient for use with rich editors like tinyMCE or FCKEditor
    var veto = {};
    this.trigger('form-pre-serialize', [this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
        return this;
    }

    // provide opportunity to alter form data before it is serialized
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSerialize callback');
        return this;
    }

    var traditional = options.traditional;
    if ( traditional === undefined ) {
        traditional = $.ajaxSettings.traditional;
    }

    var elements = [];
    var qx, a = this.formToArray(options.semantic, elements);
    if (options.data) {
        options.extraData = options.data;
        qx = $.param(options.data, traditional);
    }

    // give pre-submit callback an opportunity to abort the submit
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSubmit callback');
        return this;
    }

    // fire vetoable 'validate' event
    this.trigger('form-submit-validate', [a, this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
        return this;
    }

    var q = $.param(a, traditional);
    if (qx) {
        q = ( q ? (q + '&' + qx) : qx );
    }
    if (options.type.toUpperCase() == 'GET') {
        options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
        options.data = null;  // data is null for 'get'
    }
    else {
        options.data = q; // data is the query string for 'post'
    }

    var callbacks = [];
    if (options.resetForm) {
        callbacks.push(function() { $form.resetForm(); });
    }
    if (options.clearForm) {
        callbacks.push(function() { $form.clearForm(options.includeHidden); });
    }

    // perform a load on the target only if dataType is not provided
    if (!options.dataType && options.target) {
        var oldSuccess = options.success || function(){};
        callbacks.push(function(data) {
            var fn = options.replaceTarget ? 'replaceWith' : 'html';
            $(options.target)[fn](data).each(oldSuccess, arguments);
        });
    }
    else if (options.success) {
        callbacks.push(options.success);
    }

    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
        var context = options.context || this ;    // jQuery 1.4+ supports scope context
        for (var i=0, max=callbacks.length; i < max; i++) {
            callbacks[i].apply(context, [data, status, xhr || $form, $form]);
        }
    };

    if (options.error) {
        var oldError = options.error;
        options.error = function(xhr, status, error) {
            var context = options.context || this;
            oldError.apply(context, [xhr, status, error, $form]);
        };
    }

     if (options.complete) {
        var oldComplete = options.complete;
        options.complete = function(xhr, status) {
            var context = options.context || this;
            oldComplete.apply(context, [xhr, status, $form]);
        };
    }

    // are there files to upload?

    // [value] (issue #113), also see comment:
    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
    var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

    var hasFileInputs = fileInputs.length > 0;
    var mp = 'multipart/form-data';
    var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

    var jqxhr;

    // options.iframe allows user to force iframe mode
    // 06-NOV-09: now defaulting to iframe mode if file input is detected
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
        // hack to fix Safari hang (thanks to Tim Molendijk for this)
        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
        if (options.closeKeepAlive) {
            $.get(options.closeKeepAlive, function() {
                jqxhr = fileUploadIframe(a);
            });
        }
        else {
            jqxhr = fileUploadIframe(a);
        }
    }
    else if ((hasFileInputs || multipart) && fileAPI) {
        jqxhr = fileUploadXhr(a);
    }
    else {
        jqxhr = $.ajax(options);
    }

    $form.removeData('jqxhr').data('jqxhr', jqxhr);

    // clear element array
    for (var k=0; k < elements.length; k++) {
        elements[k] = null;
    }

    // fire 'notify' event
    this.trigger('form-submit-notify', [this, options]);
    return this;

    // utility fn for deep serialization
    function deepSerialize(extraData){
        var serialized = $.param(extraData, options.traditional).split('&');
        var len = serialized.length;
        var result = [];
        var i, part;
        for (i=0; i < len; i++) {
            // #252; undo param space replacement
            serialized[i] = serialized[i].replace(/\+/g,' ');
            part = serialized[i].split('=');
            // #278; use array instead of object storage, favoring array serializations
            result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
        }
        return result;
    }

     // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
    function fileUploadXhr(a) {
        var formdata = new FormData();

        for (var i=0; i < a.length; i++) {
            formdata.append(a[i].name, a[i].value);
        }

        if (options.extraData) {
            var serializedData = deepSerialize(options.extraData);
            for (i=0; i < serializedData.length; i++) {
                if (serializedData[i]) {
                    formdata.append(serializedData[i][0], serializedData[i][1]);
                }
            }
        }

        options.data = null;

        var s = $.extend(true, {}, $.ajaxSettings, options, {
            contentType: false,
            processData: false,
            cache: false,
            type: method || 'POST'
        });

        if (options.uploadProgress) {
            // workaround because jqXHR does not expose upload property
            s.xhr = function() {
                var xhr = $.ajaxSettings.xhr();
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', function(event) {
                        var percent = 0;
                        var position = event.loaded || event.position; /*event.position is deprecated*/
                        var total = event.total;
                        if (event.lengthComputable) {
                            percent = Math.ceil(position / total * 100);
                        }
                        options.uploadProgress(event, position, total, percent);
                    }, false);
                }
                return xhr;
            };
        }

        s.data = null;
        var beforeSend = s.beforeSend;
        s.beforeSend = function(xhr, o) {
            //Send FormData() provided by user
            if (options.formData) {
                o.data = options.formData;
            }
            else {
                o.data = formdata;
            }
            if(beforeSend) {
                beforeSend.call(this, xhr, o);
            }
        };
        return $.ajax(s);
    }

    // private function for handling file uploads (hat tip to YAHOO!)
    function fileUploadIframe(a) {
        var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
        var deferred = $.Deferred();

        // #341
        deferred.abort = function(status) {
            xhr.abort(status);
        };

        if (a) {
            // ensure that every serialized input is still enabled
            for (i=0; i < elements.length; i++) {
                el = $(elements[i]);
                if ( hasProp ) {
                    el.prop('disabled', false);
                }
                else {
                    el.removeAttr('disabled');
                }
            }
        }

        s = $.extend(true, {}, $.ajaxSettings, options);
        s.context = s.context || s;
        id = 'jqFormIO' + (new Date().getTime());
        if (s.iframeTarget) {
            $io = $(s.iframeTarget);
            n = $io.attr2('name');
            if (!n) {
                $io.attr2('name', id);
            }
            else {
                id = n;
            }
        }
        else {
            $io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
            $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
        }
        io = $io[0];


        xhr = { // mock object
            aborted: 0,
            responseText: null,
            responseXML: null,
            status: 0,
            statusText: 'n/a',
            getAllResponseHeaders: function() {},
            getResponseHeader: function() {},
            setRequestHeader: function() {},
            abort: function(status) {
                var e = (status === 'timeout' ? 'timeout' : 'aborted');
                log('aborting upload... ' + e);
                this.aborted = 1;

                try { // #214, #257
                    if (io.contentWindow.document.execCommand) {
                        io.contentWindow.document.execCommand('Stop');
                    }
                }
                catch(ignore) {}

                $io.attr('src', s.iframeSrc); // abort op in progress
                xhr.error = e;
                if (s.error) {
                    s.error.call(s.context, xhr, e, status);
                }
                if (g) {
                    $.event.trigger("ajaxError", [xhr, s, e]);
                }
                if (s.complete) {
                    s.complete.call(s.context, xhr, e);
                }
            }
        };

        g = s.global;
        // trigger ajax global events so that activity/block indicators work like normal
        if (g && 0 === $.active++) {
            $.event.trigger("ajaxStart");
        }
        if (g) {
            $.event.trigger("ajaxSend", [xhr, s]);
        }

        if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
            if (s.global) {
                $.active--;
            }
            deferred.reject();
            return deferred;
        }
        if (xhr.aborted) {
            deferred.reject();
            return deferred;
        }

        // add submitting element to data if we know it
        sub = form.clk;
        if (sub) {
            n = sub.name;
            if (n && !sub.disabled) {
                s.extraData = s.extraData || {};
                s.extraData[n] = sub.value;
                if (sub.type == "image") {
                    s.extraData[n+'.x'] = form.clk_x;
                    s.extraData[n+'.y'] = form.clk_y;
                }
            }
        }

        var CLIENT_TIMEOUT_ABORT = 1;
        var SERVER_ABORT = 2;
                
        function getDoc(frame) {
            /* it looks like contentWindow or contentDocument do not
             * carry the protocol property in ie8, when running under ssl
             * frame.document is the only valid response document, since
             * the protocol is know but not on the other two objects. strange?
             * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
             */
            
            var doc = null;
            
            // IE8 cascading access check
            try {
                if (frame.contentWindow) {
                    doc = frame.contentWindow.document;
                }
            } catch(err) {
                // IE8 access denied under ssl & missing protocol
                log('cannot get iframe.contentWindow document: ' + err);
            }

            if (doc) { // successful getting content
                return doc;
            }

            try { // simply checking may throw in ie8 under ssl or mismatched protocol
                doc = frame.contentDocument ? frame.contentDocument : frame.document;
            } catch(err) {
                // last attempt
                log('cannot get iframe.contentDocument: ' + err);
                doc = frame.document;
            }
            return doc;
        }

        // Rails CSRF hack (thanks to Yvan Barthelemy)
        var csrf_token = $('meta[name=csrf-token]').attr('content');
        var csrf_param = $('meta[name=csrf-param]').attr('content');
        if (csrf_param && csrf_token) {
            s.extraData = s.extraData || {};
            s.extraData[csrf_param] = csrf_token;
        }

        // take a breath so that pending repaints get some cpu time before the upload starts
        function doSubmit() {
            // make sure form attrs are set
            var t = $form.attr2('target'), 
                a = $form.attr2('action'), 
                mp = 'multipart/form-data',
                et = $form.attr('enctype') || $form.attr('encoding') || mp;

            // update form attrs in IE friendly way
            form.setAttribute('target',id);
            if (!method || /post/i.test(method) ) {
                form.setAttribute('method', 'POST');
            }
            if (a != s.url) {
                form.setAttribute('action', s.url);
            }

            // ie borks in some cases when setting encoding
            if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
                $form.attr({
                    encoding: 'multipart/form-data',
                    enctype:  'multipart/form-data'
                });
            }

            // support timout
            if (s.timeout) {
                timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
            }

            // look for server aborts
            function checkState() {
                try {
                    var state = getDoc(io).readyState;
                    log('state = ' + state);
                    if (state && state.toLowerCase() == 'uninitialized') {
                        setTimeout(checkState,50);
                    }
                }
                catch(e) {
                    log('Server abort: ' , e, ' (', e.name, ')');
                    cb(SERVER_ABORT);
                    if (timeoutHandle) {
                        clearTimeout(timeoutHandle);
                    }
                    timeoutHandle = undefined;
                }
            }

            // add "extra" data to form if provided in options
            var extraInputs = [];
            try {
                if (s.extraData) {
                    for (var n in s.extraData) {
                        if (s.extraData.hasOwnProperty(n)) {
                           // if using the $.param format that allows for multiple values with the same name
                           if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
                               extraInputs.push(
                               $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
                                   .appendTo(form)[0]);
                           } else {
                               extraInputs.push(
                               $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
                                   .appendTo(form)[0]);
                           }
                        }
                    }
                }

                if (!s.iframeTarget) {
                    // add iframe to doc and submit the form
                    $io.appendTo('body');
                }
                if (io.attachEvent) {
                    io.attachEvent('onload', cb);
                }
                else {
                    io.addEventListener('load', cb, false);
                }
                setTimeout(checkState,15);

                try {
                    form.submit();
                } catch(err) {
                    // just in case form has element with name/id of 'submit'
                    var submitFn = document.createElement('form').submit;
                    submitFn.apply(form);
                }
            }
            finally {
                // reset attrs and remove "extra" input elements
                form.setAttribute('action',a);
                form.setAttribute('enctype', et); // #380
                if(t) {
                    form.setAttribute('target', t);
                } else {
                    $form.removeAttr('target');
                }
                $(extraInputs).remove();
            }
        }

        if (s.forceSync) {
            doSubmit();
        }
        else {
            setTimeout(doSubmit, 10); // this lets dom updates render
        }

        var data, doc, domCheckCount = 50, callbackProcessed;

        function cb(e) {
            if (xhr.aborted || callbackProcessed) {
                return;
            }
            
            doc = getDoc(io);
            if(!doc) {
                log('cannot access response document');
                e = SERVER_ABORT;
            }
            if (e === CLIENT_TIMEOUT_ABORT && xhr) {
                xhr.abort('timeout');
                deferred.reject(xhr, 'timeout');
                return;
            }
            else if (e == SERVER_ABORT && xhr) {
                xhr.abort('server abort');
                deferred.reject(xhr, 'error', 'server abort');
                return;
            }

            if (!doc || doc.location.href == s.iframeSrc) {
                // response not received yet
                if (!timedOut) {
                    return;
                }
            }
            if (io.detachEvent) {
                io.detachEvent('onload', cb);
            }
            else {
                io.removeEventListener('load', cb, false);
            }

            var status = 'success', errMsg;
            try {
                if (timedOut) {
                    throw 'timeout';
                }

                var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
                log('isXml='+isXml);
                if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
                    if (--domCheckCount) {
                        // in some browsers (Opera) the iframe DOM is not always traversable when
                        // the onload callback fires, so we loop a bit to accommodate
                        log('requeing onLoad callback, DOM not available');
                        setTimeout(cb, 250);
                        return;
                    }
                    // let this fall through because server response could be an empty document
                    //log('Could not access iframe DOM after mutiple tries.');
                    //throw 'DOMException: not available';
                }

                //log('response detected');
                var docRoot = doc.body ? doc.body : doc.documentElement;
                xhr.responseText = docRoot ? docRoot.innerHTML : null;
                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                if (isXml) {
                    s.dataType = 'xml';
                }
                xhr.getResponseHeader = function(header){
                    var headers = {'content-type': s.dataType};
                    return headers[header.toLowerCase()];
                };
                // support for XHR 'status' & 'statusText' emulation :
                if (docRoot) {
                    xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
                    xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
                }

                var dt = (s.dataType || '').toLowerCase();
                var scr = /(json|script|text)/.test(dt);
                if (scr || s.textarea) {
                    // see if user embedded response in textarea
                    var ta = doc.getElementsByTagName('textarea')[0];
                    if (ta) {
                        xhr.responseText = ta.value;
                        // support for XHR 'status' & 'statusText' emulation :
                        xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
                        xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
                    }
                    else if (scr) {
                        // account for browsers injecting pre around json response
                        var pre = doc.getElementsByTagName('pre')[0];
                        var b = doc.getElementsByTagName('body')[0];
                        if (pre) {
                            xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                        }
                        else if (b) {
                            xhr.responseText = b.textContent ? b.textContent : b.innerText;
                        }
                    }
                }
                else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
                    xhr.responseXML = toXml(xhr.responseText);
                }

                try {
                    data = httpData(xhr, dt, s);
                }
                catch (err) {
                    status = 'parsererror';
                    xhr.error = errMsg = (err || status);
                }
            }
            catch (err) {
                log('error caught: ',err);
                status = 'error';
                xhr.error = errMsg = (err || status);
            }

            if (xhr.aborted) {
                log('upload aborted');
                status = null;
            }

            if (xhr.status) { // we've set xhr.status
                status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
            }

            // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
            if (status === 'success') {
                if (s.success) {
                    s.success.call(s.context, data, 'success', xhr);
                }
                deferred.resolve(xhr.responseText, 'success', xhr);
                if (g) {
                    $.event.trigger("ajaxSuccess", [xhr, s]);
                }
            }
            else if (status) {
                if (errMsg === undefined) {
                    errMsg = xhr.statusText;
                }
                if (s.error) {
                    s.error.call(s.context, xhr, status, errMsg);
                }
                deferred.reject(xhr, 'error', errMsg);
                if (g) {
                    $.event.trigger("ajaxError", [xhr, s, errMsg]);
                }
            }

            if (g) {
                $.event.trigger("ajaxComplete", [xhr, s]);
            }

            if (g && ! --$.active) {
                $.event.trigger("ajaxStop");
            }

            if (s.complete) {
                s.complete.call(s.context, xhr, status);
            }

            callbackProcessed = true;
            if (s.timeout) {
                clearTimeout(timeoutHandle);
            }

            // clean up
            setTimeout(function() {
                if (!s.iframeTarget) {
                    $io.remove();
                }
                else { //adding else to clean up existing iframe response.
                    $io.attr('src', s.iframeSrc);
                }
                xhr.responseXML = null;
            }, 100);
        }

        var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
            if (window.ActiveXObject) {
                doc = new ActiveXObject('Microsoft.XMLDOM');
                doc.async = 'false';
                doc.loadXML(s);
            }
            else {
                doc = (new DOMParser()).parseFromString(s, 'text/xml');
            }
            return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
        };
        var parseJSON = $.parseJSON || function(s) {
            /*jslint evil:true */
            return window['eval']('(' + s + ')');
        };

        var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

            var ct = xhr.getResponseHeader('content-type') || '',
                xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
                data = xml ? xhr.responseXML : xhr.responseText;

            if (xml && data.documentElement.nodeName === 'parsererror') {
                if ($.error) {
                    $.error('parsererror');
                }
            }
            if (s && s.dataFilter) {
                data = s.dataFilter(data, type);
            }
            if (typeof data === 'string') {
                if (type === 'json' || !type && ct.indexOf('json') >= 0) {
                    data = parseJSON(data);
                } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                    $.globalEval(data);
                }
            }
            return data;
        };

        return deferred;
    }
};

/**
 * ajaxForm() provides a mechanism for fully automating form submission.
 *
 * The advantages of using this method instead of ajaxSubmit() are:
 *
 * 1: This method will include coordinates for <input type="image" /> elements (if the element
 *    is used to submit the form).
 * 2. This method will include the submit element's name/value data (for the element that was
 *    used to submit the form).
 * 3. This method binds the submit() method to the form for you.
 *
 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
 * passes the options argument along after properly binding events for submit elements and
 * the form itself.
 */
$.fn.ajaxForm = function(options) {
    options = options || {};
    options.delegation = options.delegation && $.isFunction($.fn.on);

    // in jQuery 1.3+ we can fix mistakes with the ready state
    if (!options.delegation && this.length === 0) {
        var o = { s: this.selector, c: this.context };
        if (!$.isReady && o.s) {
            log('DOM not ready, queuing ajaxForm');
            $(function() {
                $(o.s,o.c).ajaxForm(options);
            });
            return this;
        }
        // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
        log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
        return this;
    }

    if ( options.delegation ) {
        $(document)
            .off('submit.form-plugin', this.selector, doAjaxSubmit)
            .off('click.form-plugin', this.selector, captureSubmittingElement)
            .on('submit.form-plugin', this.selector, options, doAjaxSubmit)
            .on('click.form-plugin', this.selector, options, captureSubmittingElement);
        return this;
    }

    return this.ajaxFormUnbind()
        .bind('submit.form-plugin', options, doAjaxSubmit)
        .bind('click.form-plugin', options, captureSubmittingElement);
};

// private event handlers
function doAjaxSubmit(e) {
    /*jshint validthis:true */
    var options = e.data;
    if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
        e.preventDefault();
        $(e.target).ajaxSubmit(options); // #365
    }
}

function captureSubmittingElement(e) {
    /*jshint validthis:true */
    var target = e.target;
    var $el = $(target);
    if (!($el.is("[type=submit],[type=image]"))) {
        // is this a child element of the submit el?  (ex: a span within a button)
        var t = $el.closest('[type=submit]');
        if (t.length === 0) {
            return;
        }
        target = t[0];
    }
    var form = this;
    form.clk = target;
    if (target.type == 'image') {
        if (e.offsetX !== undefined) {
            form.clk_x = e.offsetX;
            form.clk_y = e.offsetY;
        } else if (typeof $.fn.offset == 'function') {
            var offset = $el.offset();
            form.clk_x = e.pageX - offset.left;
            form.clk_y = e.pageY - offset.top;
        } else {
            form.clk_x = e.pageX - target.offsetLeft;
            form.clk_y = e.pageY - target.offsetTop;
        }
    }
    // clear form vars
    setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
}


// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
$.fn.ajaxFormUnbind = function() {
    return this.unbind('submit.form-plugin click.form-plugin');
};

/**
 * formToArray() gathers form element data into an array of objects that can
 * be passed to any of the following ajax functions: $.get, $.post, or load.
 * Each object in the array has both a 'name' and 'value' property.  An example of
 * an array for a simple login form might be:
 *
 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
 *
 * It is this array that is passed to pre-submit callback functions provided to the
 * ajaxSubmit() and ajaxForm() methods.
 */
$.fn.formToArray = function(semantic, elements) {
    var a = [];
    if (this.length === 0) {
        return a;
    }

    var form = this[0];
    var formId = this.attr('id');
    var els = semantic ? form.getElementsByTagName('*') : form.elements;
    var els2;

    if (els && !/MSIE [678]/.test(navigator.userAgent)) { // #390
        els = $(els).get();  // convert to standard array
    }

    // #386; account for inputs outside the form which use the 'form' attribute
    if ( formId ) {
        els2 = $(':input[form="' + formId + '"]').get(); // hat tip @thet
        if ( els2.length ) {
            els = (els || []).concat(els2);
        }
    }

    if (!els || !els.length) {
        return a;
    }

    var i,j,n,v,el,max,jmax;
    for(i=0, max=els.length; i < max; i++) {
        el = els[i];
        n = el.name;
        if (!n || el.disabled) {
            continue;
        }

        if (semantic && form.clk && el.type == "image") {
            // handle image inputs on the fly when semantic == true
            if(form.clk == el) {
                a.push({name: n, value: $(el).val(), type: el.type });
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
            }
            continue;
        }

        v = $.fieldValue(el, true);
        if (v && v.constructor == Array) {
            if (elements) {
                elements.push(el);
            }
            for(j=0, jmax=v.length; j < jmax; j++) {
                a.push({name: n, value: v[j]});
            }
        }
        else if (feature.fileapi && el.type == 'file') {
            if (elements) {
                elements.push(el);
            }
            var files = el.files;
            if (files.length) {
                for (j=0; j < files.length; j++) {
                    a.push({name: n, value: files[j], type: el.type});
                }
            }
            else {
                // #180
                a.push({ name: n, value: '', type: el.type });
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            if (elements) {
                elements.push(el);
            }
            a.push({name: n, value: v, type: el.type, required: el.required});
        }
    }

    if (!semantic && form.clk) {
        // input type=='image' are not found in elements array! handle it here
        var $input = $(form.clk), input = $input[0];
        n = input.name;
        if (n && !input.disabled && input.type == 'image') {
            a.push({name: n, value: $input.val()});
            a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
        }
    }
    return a;
};

/**
 * Serializes form data into a 'submittable' string. This method will return a string
 * in the format: name1=value1&amp;name2=value2
 */
$.fn.formSerialize = function(semantic) {
    //hand off to jQuery.param for proper encoding
    return $.param(this.formToArray(semantic));
};

/**
 * Serializes all field elements in the jQuery object into a query string.
 * This method will return a string in the format: name1=value1&amp;name2=value2
 */
$.fn.fieldSerialize = function(successful) {
    var a = [];
    this.each(function() {
        var n = this.name;
        if (!n) {
            return;
        }
        var v = $.fieldValue(this, successful);
        if (v && v.constructor == Array) {
            for (var i=0,max=v.length; i < max; i++) {
                a.push({name: n, value: v[i]});
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            a.push({name: this.name, value: v});
        }
    });
    //hand off to jQuery.param for proper encoding
    return $.param(a);
};

/**
 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
 *
 *  <form><fieldset>
 *      <input name="A" type="text" />
 *      <input name="A" type="text" />
 *      <input name="B" type="checkbox" value="B1" />
 *      <input name="B" type="checkbox" value="B2"/>
 *      <input name="C" type="radio" value="C1" />
 *      <input name="C" type="radio" value="C2" />
 *  </fieldset></form>
 *
 *  var v = $('input[type=text]').fieldValue();
 *  // if no values are entered into the text inputs
 *  v == ['','']
 *  // if values entered into the text inputs are 'foo' and 'bar'
 *  v == ['foo','bar']
 *
 *  var v = $('input[type=checkbox]').fieldValue();
 *  // if neither checkbox is checked
 *  v === undefined
 *  // if both checkboxes are checked
 *  v == ['B1', 'B2']
 *
 *  var v = $('input[type=radio]').fieldValue();
 *  // if neither radio is checked
 *  v === undefined
 *  // if first radio is checked
 *  v == ['C1']
 *
 * The successful argument controls whether or not the field element must be 'successful'
 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
 * The default value of the successful argument is true.  If this value is false the value(s)
 * for each element is returned.
 *
 * Note: This method *always* returns an array.  If no valid value can be determined the
 *    array will be empty, otherwise it will contain one or more values.
 */
$.fn.fieldValue = function(successful) {
    for (var val=[], i=0, max=this.length; i < max; i++) {
        var el = this[i];
        var v = $.fieldValue(el, successful);
        if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
            continue;
        }
        if (v.constructor == Array) {
            $.merge(val, v);
        }
        else {
            val.push(v);
        }
    }
    return val;
};

/**
 * Returns the value of the field element.
 */
$.fieldValue = function(el, successful) {
    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
    if (successful === undefined) {
        successful = true;
    }

    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
        (t == 'checkbox' || t == 'radio') && !el.checked ||
        (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
        tag == 'select' && el.selectedIndex == -1)) {
            return null;
    }

    if (tag == 'select') {
        var index = el.selectedIndex;
        if (index < 0) {
            return null;
        }
        var a = [], ops = el.options;
        var one = (t == 'select-one');
        var max = (one ? index+1 : ops.length);
        for(var i=(one ? index : 0); i < max; i++) {
            var op = ops[i];
            if (op.selected) {
                var v = op.value;
                if (!v) { // extra pain for IE...
                    v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;
                }
                if (one) {
                    return v;
                }
                a.push(v);
            }
        }
        return a;
    }
    return $(el).val();
};

/**
 * Clears the form data.  Takes the following actions on the form's input fields:
 *  - input text fields will have their 'value' property set to the empty string
 *  - select elements will have their 'selectedIndex' property set to -1
 *  - checkbox and radio inputs will have their 'checked' property set to false
 *  - inputs of type submit, button, reset, and hidden will *not* be effected
 *  - button elements will *not* be effected
 */
$.fn.clearForm = function(includeHidden) {
    return this.each(function() {
        $('input,select,textarea', this).clearFields(includeHidden);
    });
};

/**
 * Clears the selected form elements.
 */
$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
    return this.each(function() {
        var t = this.type, tag = this.tagName.toLowerCase();
        if (re.test(t) || tag == 'textarea') {
            this.value = '';
        }
        else if (t == 'checkbox' || t == 'radio') {
            this.checked = false;
        }
        else if (tag == 'select') {
            this.selectedIndex = -1;
        }
        else if (t == "file") {
            if (/MSIE/.test(navigator.userAgent)) {
                $(this).replaceWith($(this).clone(true));
            } else {
                $(this).val('');
            }
        }
        else if (includeHidden) {
            // includeHidden can be the value true, or it can be a selector string
            // indicating a special test; for example:
            //  $('#myForm').clearForm('.special:hidden')
            // the above would clean hidden inputs that have the class of 'special'
            if ( (includeHidden === true && /hidden/.test(t)) ||
                 (typeof includeHidden == 'string' && $(this).is(includeHidden)) ) {
                this.value = '';
            }
        }
    });
};

/**
 * Resets the form data.  Causes all form elements to be reset to their original value.
 */
$.fn.resetForm = function() {
    return this.each(function() {
        // guard against an input with the name of 'reset'
        // note that IE reports the reset function as an 'object'
        if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
            this.reset();
        }
    });
};

/**
 * Enables or disables any matching elements.
 */
$.fn.enable = function(b) {
    if (b === undefined) {
        b = true;
    }
    return this.each(function() {
        this.disabled = !b;
    });
};

/**
 * Checks/unchecks any matching checkboxes or radio buttons and
 * selects/deselects and matching option elements.
 */
$.fn.selected = function(select) {
    if (select === undefined) {
        select = true;
    }
    return this.each(function() {
        var t = this.type;
        if (t == 'checkbox' || t == 'radio') {
            this.checked = select;
        }
        else if (this.tagName.toLowerCase() == 'option') {
            var $sel = $(this).parent('select');
            if (select && $sel[0] && $sel[0].type == 'select-one') {
                // deselect all other options
                $sel.find('option').selected(false);
            }
            this.selected = select;
        }
    });
};

// expose debug var
$.fn.ajaxSubmit.debug = false;

// helper fn for console logging
function log() {
    if (!$.fn.ajaxSubmit.debug) {
        return;
    }
    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
    if (window.console && window.console.log) {
        window.console.log(msg);
    }
    else if (window.opera && window.opera.postError) {
        window.opera.postError(msg);
    }
}

}));

/**
 * Copyright (c) 2009 Sergiy Kovalchuk (serg472@gmail.com)
 * 
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *  
 * Following code is based on Element.mask() implementation from ExtJS framework (http://extjs.com/)
 *
 */
;(function($){
	
	/**
	 * Displays loading mask over selected element(s). Accepts both single and multiple selectors.
	 *
	 * @param label Text message that will be displayed on top of the mask besides a spinner (optional). 
	 * 				If not provided only mask will be displayed without a label or a spinner.  	
	 * @param delay Delay in milliseconds before element is masked (optional). If unmask() is called 
	 *              before the delay times out, no mask is displayed. This can be used to prevent unnecessary 
	 *              mask display for quick processes.   	
	 */
	$.fn.mask = function(label, delay){
		$(this).each(function() {
			if(delay !== undefined && delay > 0) {
		        var element = $(this);
		        element.data("_mask_timeout", setTimeout(function() { $.maskElement(element, label)}, delay));
			} else {
				$.maskElement($(this), label);
			}
		});
	};
	
	/**
	 * Removes mask from the element(s). Accepts both single and multiple selectors.
	 */
	$.fn.unmask = function(){
		$(this).each(function() {
			$.unmaskElement($(this));
		});
	};
	
	/**
	 * Checks if a single element is masked. Returns false if mask is delayed or not displayed. 
	 */
	$.fn.isMasked = function(){
		return this.hasClass("masked");
	};

	$.maskElement = function(element, label){
	
		//if this element has delayed mask scheduled then remove it and display the new one
		if (element.data("_mask_timeout") !== undefined) {
			clearTimeout(element.data("_mask_timeout"));
			element.removeData("_mask_timeout");
		}

		if(element.isMasked()) {
			$.unmaskElement(element);
		}
		
		if(element.css("position") == "static") {
			element.addClass("masked-relative");
		}
		
		element.addClass("masked");
		
		var maskDiv = $('<div class="loadmask"></div>');
		
		//auto height fix for IE
		if(navigator.userAgent.toLowerCase().indexOf("msie") > -1){
			maskDiv.height(element.height() + parseInt(element.css("padding-top")) + parseInt(element.css("padding-bottom")));
			maskDiv.width(element.width() + parseInt(element.css("padding-left")) + parseInt(element.css("padding-right")));
		}
		
		//fix for z-index bug with selects in IE6
		if(navigator.userAgent.toLowerCase().indexOf("msie 6") > -1){
			element.find("select").addClass("masked-hidden");
		}
		
		element.append(maskDiv);
		
		if(label !== undefined) {
			var maskMsgDiv = $('<div class="loadmask-msg" style="display:none;"></div>');
			maskMsgDiv.append('<div><i class="fa fa-spinner fa-spin"></i> ' + label + '</div>');
			element.append(maskMsgDiv);
			
			//calculate center position
			maskMsgDiv.css("top", Math.round(element.height() / 2 - (maskMsgDiv.height() - parseInt(maskMsgDiv.css("padding-top")) - parseInt(maskMsgDiv.css("padding-bottom"))) / 2)+"px");
			maskMsgDiv.css("left", Math.round(element.width() / 2 - (maskMsgDiv.width() - parseInt(maskMsgDiv.css("padding-left")) - parseInt(maskMsgDiv.css("padding-right"))) / 2)+"px");
			
			maskMsgDiv.show();
		}
		
	};
	
	$.unmaskElement = function(element){
		//if this element has delayed mask scheduled then remove it
		if (element.data("_mask_timeout") !== undefined) {
			clearTimeout(element.data("_mask_timeout"));
			element.removeData("_mask_timeout");
		}
		
		element.find(".loadmask-msg,.loadmask").remove();
		element.removeClass("masked");
		element.removeClass("masked-relative");
		element.find("select").removeClass("masked-hidden");
	};
 
})(jQuery);
/*
 * jQuery Storage API Plugin
 *
 * Copyright (c) 2013 Julien Maurel
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 * https://github.com/julien-maurel/jQuery-Storage-API
 *
 * Version: 1.9.1
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // CommonJS
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
    // Prefix to use with cookie fallback
    var cookie_local_prefix = "ls_";
    var cookie_session_prefix = "ss_";

    // Get items from a storage
    function _get() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], vi, ret, tmp;
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        } else if ($.isArray(a0)) {
            // If second argument is an array, return an object with value of storage for each item in this array
            ret = {};
            for (var i in a0) {
                vi = a0[i];
                try {
                    ret[vi] = JSON.parse(s.getItem(vi));
                } catch (e) {
                    ret[vi] = s.getItem(vi);
                }
            }
            return ret;
        } else if (l == 1) {
            // If only 1 argument, return value directly
            try {
                return JSON.parse(s.getItem(a0));
            } catch (e) {
                return s.getItem(a0);
            }
        } else {
            // If more than 1 argument, parse storage to retrieve final value to return it
            // Get first level
            try {
                ret = JSON.parse(s.getItem(a0));
            } catch (e) {
                throw new ReferenceError(a0 + ' is not defined in this storage');
            }
            // Parse next levels
            for (var i = 1; i < l - 1; i++) {
                ret = ret[a[i]];
                if (ret === undefined) {
                    throw new ReferenceError([].slice.call(a, 1, i + 1).join('.') + ' is not defined in this storage');
                }
            }
            // If last argument is an array, return an object with value for each item in this array
            // Else return value normally
            if ($.isArray(a[i])) {
                tmp = ret;
                ret = {};
                for (var j in a[i]) {
                    ret[a[i][j]] = tmp[a[i][j]];
                }
                return ret;
            } else {
                return ret[a[i]];
            }
        }
    }

    // Set items of a storage
    function _set() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], a1 = a[1], vi, to_store = {}, tmp;
        if (l < 1 || !$.isPlainObject(a0) && l < 2) {
            throw new Error('Minimum 2 arguments must be given or first parameter must be an object');
        } else if ($.isPlainObject(a0)) {
            // If first argument is an object, set values of storage for each property of this object
            for (var i in a0) {
                vi = a0[i];
                if (!$.isPlainObject(vi) && !this.alwaysUseJson) {
                    s.setItem(i, vi);
                } else {
                    s.setItem(i, JSON.stringify(vi));
                }
            }
            return a0;
        } else if (l == 2) {
            // If only 2 arguments, set value of storage directly
            if (typeof a1 === 'object' || this.alwaysUseJson) {
                s.setItem(a0, JSON.stringify(a1));
            } else {
                s.setItem(a0, a1);
            }
            return a1;
        } else {
            // If more than 3 arguments, parse storage to retrieve final node and set value
            // Get first level
            try {
                tmp = s.getItem(a0);
                if (tmp != null) {
                    to_store = JSON.parse(tmp);
                }
            } catch (e) {
            }
            tmp = to_store;
            // Parse next levels and set value
            for (var i = 1; i < l - 2; i++) {
                vi = a[i];
                if (!tmp[vi] || !$.isPlainObject(tmp[vi])) {
                    tmp[vi] = {};
                }
                tmp = tmp[vi];
            }
            tmp[a[i]] = a[i + 1];
            s.setItem(a0, JSON.stringify(to_store));
            return to_store;
        }
    }

    // Remove items from a storage
    function _remove() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], to_store, tmp;
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        } else if ($.isArray(a0)) {
            // If first argument is an array, remove values from storage for each item of this array
            for (var i in a0) {
                s.removeItem(a0[i]);
            }
            return true;
        } else if (l == 1) {
            // If only 2 arguments, remove value from storage directly
            s.removeItem(a0);
            return true;
        } else {
            // If more than 2 arguments, parse storage to retrieve final node and remove value
            // Get first level
            try {
                to_store = tmp = JSON.parse(s.getItem(a0));
            } catch (e) {
                throw new ReferenceError(a0 + ' is not defined in this storage');
            }
            // Parse next levels and remove value
            for (var i = 1; i < l - 1; i++) {
                tmp = tmp[a[i]];
                if (tmp === undefined) {
                    throw new ReferenceError([].slice.call(a, 1, i).join('.') + ' is not defined in this storage');
                }
            }
            // If last argument is an array,remove value for each item in this array
            // Else remove value normally
            if ($.isArray(a[i])) {
                for (var j in a[i]) {
                    delete tmp[a[i][j]];
                }
            } else {
                delete tmp[a[i]];
            }
            s.setItem(a0, JSON.stringify(to_store));
            return true;
        }
    }

    // Remove all items from a storage
    function _removeAll(reinit_ns) {
        var keys = _keys.call(this);
        for (var i in keys) {
            _remove.call(this, keys[i]);
        }
        // Reinitialize all namespace storages
        if (reinit_ns) {
            for (var i in $.namespaceStorages) {
                _createNamespace(i);
            }
        }
    }

    // Check if items of a storage are empty
    function _isEmpty() {
        var l = arguments.length, a = arguments, a0 = a[0];
        if (l == 0) {
            // If no argument, test if storage is empty
            return (_keys.call(this).length == 0);
        } else if ($.isArray(a0)) {
            // If first argument is an array, test each item of this array and return true only if all items are empty
            for (var i = 0; i < a0.length; i++) {
                if (!_isEmpty.call(this, a0[i])) {
                    return false;
                }
            }
            return true;
        } else {
            // If at least 1 argument, try to get value and test it
            try {
                var v = _get.apply(this, arguments);
                // Convert result to an object (if last argument is an array, _get return already an object) and test each item
                if (!$.isArray(a[l - 1])) {
                    v = {'totest': v};
                }
                for (var i in v) {
                    if (!(
                            ($.isPlainObject(v[i]) && $.isEmptyObject(v[i])) ||
                            ($.isArray(v[i]) && !v[i].length) ||
                            (!v[i])
                        )) {
                        return false;
                    }
                }
                return true;
            } catch (e) {
                return true;
            }
        }
    }

    // Check if items of a storage exist
    function _isSet() {
        var l = arguments.length, a = arguments, a0 = a[0];
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        }
        if ($.isArray(a0)) {
            // If first argument is an array, test each item of this array and return true only if all items exist
            for (var i = 0; i < a0.length; i++) {
                if (!_isSet.call(this, a0[i])) {
                    return false;
                }
            }
            return true;
        } else {
            // For other case, try to get value and test it
            try {
                var v = _get.apply(this, arguments);
                // Convert result to an object (if last argument is an array, _get return already an object) and test each item
                if (!$.isArray(a[l - 1])) {
                    v = {'totest': v};
                }
                for (var i in v) {
                    if (!(v[i] !== undefined && v[i] !== null)) {
                        return false;
                    }
                }
                return true;
            } catch (e) {
                return false;
            }
        }
    }

    // Get keys of a storage or of an item of the storage
    function _keys() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, keys = [], o = {};
        // If at least 1 argument, get value from storage to retrieve keys
        // Else, use storage to retrieve keys
        if (l > 0) {
            o = _get.apply(this, a);
        } else {
            o = s;
        }
        if (o && o._cookie) {
            // If storage is a cookie, use js-cookie to retrieve keys
            for (var key in Cookies.get()) {
                if (key != '') {
                    keys.push(key.replace(o._prefix, ''));
                }
            }
        } else {
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    keys.push(i);
                }
            }
        }
        return keys;
    }

    // Create new namespace storage
    function _createNamespace(name) {
        if (!name || typeof name != "string") {
            throw new Error('First parameter must be a string');
        }
        if (storage_available) {
            if (!window.localStorage.getItem(name)) {
                window.localStorage.setItem(name, '{}');
            }
            if (!window.sessionStorage.getItem(name)) {
                window.sessionStorage.setItem(name, '{}');
            }
        } else {
            if (!window.localCookieStorage.getItem(name)) {
                window.localCookieStorage.setItem(name, '{}');
            }
            if (!window.sessionCookieStorage.getItem(name)) {
                window.sessionCookieStorage.setItem(name, '{}');
            }
        }
        var ns = {
            localStorage: $.extend({}, $.localStorage, {_ns: name}),
            sessionStorage: $.extend({}, $.sessionStorage, {_ns: name})
        };
        if (typeof Cookies === 'object') {
            if (!window.cookieStorage.getItem(name)) {
                window.cookieStorage.setItem(name, '{}');
            }
            ns.cookieStorage = $.extend({}, $.cookieStorage, {_ns: name});
        }
        $.namespaceStorages[name] = ns;
        return ns;
    }

    // Test if storage is natively available on browser
    function _testStorage(name) {
        var foo = 'jsapi';
        try {
            if (!window[name]) {
                return false;
            }
            window[name].setItem(foo, foo);
            window[name].removeItem(foo);
            return true;
        } catch (e) {
            return false;
        }
    }

    // Check if storages are natively available on browser
    var storage_available = _testStorage('localStorage');

    // Namespace object
    var storage = {
        _type: '',
        _ns: '',
        _callMethod: function (f, a) {
            var p = [], a = Array.prototype.slice.call(a), a0 = a[0];

            if (this._ns) {
                p.push(this._ns);
            }
            if (typeof a0 === 'string' && a0.indexOf('.') !== -1) {
                a.shift();
                [].unshift.apply(a, a0.split('.'));
            }
            [].push.apply(p, a);
            return f.apply(this, p);
        },
        // Define if plugin always use JSON to store values (even to store simple values like string, int...) or not
        alwaysUseJson: false,
        // Get items. If no parameters and storage have a namespace, return all namespace
        get: function () {
            return this._callMethod(_get, arguments);
        },
        // Set items
        set: function () {
            var l = arguments.length, a = arguments, a0 = a[0];
            if (l < 1 || !$.isPlainObject(a0) && l < 2) {
                throw new Error('Minimum 2 arguments must be given or first parameter must be an object');
            }
            // If first argument is an object and storage is a namespace storage, set values individually
            if ($.isPlainObject(a0) && this._ns) {
                for (var i in a0) {
                    this._callMethod(_set, [i, a0[i]]);
                }
                return a0;
            } else {
                var r = this._callMethod(_set, a);
                if (this._ns) {
                    return r[a0.split('.')[0]];
                } else {
                    return r;
                }
            }
        },
        // Delete items
        remove: function () {
            if (arguments.length < 1) {
                throw new Error('Minimum 1 argument must be given');
            }
            return this._callMethod(_remove, arguments);
        },
        // Delete all items
        removeAll: function (reinit_ns) {
            if (this._ns) {
                this._callMethod(_set, [{}]);
                return true;
            } else {
                return this._callMethod(_removeAll, [reinit_ns]);
            }
        },
        // Items empty
        isEmpty: function () {
            return this._callMethod(_isEmpty, arguments);
        },
        // Items exists
        isSet: function () {
            if (arguments.length < 1) {
                throw new Error('Minimum 1 argument must be given');
            }
            return this._callMethod(_isSet, arguments);
        },
        // Get keys of items
        keys: function () {
            return this._callMethod(_keys, arguments);
        }
    };

    // Use js-cookie for compatibility with old browsers and give access to cookieStorage
    if (typeof Cookies === 'object') {
        // sessionStorage is valid for one window/tab. To simulate that with cookie, we set a name for the window and use it for the name of the cookie
        if (!window.name) {
            window.name = Math.floor(Math.random() * 100000000);
        }
        var cookie_storage = {
            _cookie: true,
            _prefix: '',
            _expires: null,
            _path: null,
            _domain: null,
            setItem: function (n, v) {
                Cookies.set(this._prefix + n, v, {expires: this._expires, path: this._path, domain: this._domain});
            },
            getItem: function (n) {
                return Cookies.get(this._prefix + n);
            },
            removeItem: function (n) {
                return Cookies.remove(this._prefix + n, {path: this._path});
            },
            clear: function () {
                for (var key in Cookies.get()) {
                    if (key != '') {
                        if (!this._prefix && key.indexOf(cookie_local_prefix) === -1 && key.indexOf(cookie_session_prefix) === -1 || this._prefix && key.indexOf(this._prefix) === 0) {
                            $.removeCookie(key);
                        }
                    }
                }
            },
            setExpires: function (e) {
                this._expires = e;
                return this;
            },
            setPath: function (p) {
                this._path = p;
                return this;
            },
            setDomain: function (d) {
                this._domain = d;
                return this;
            },
            setConf: function (c) {
                if (c.path) {
                    this._path = c.path;
                }
                if (c.domain) {
                    this._domain = c.domain;
                }
                if (c.expires) {
                    this._expires = c.expires;
                }
                return this;
            },
            setDefaultConf: function () {
                this._path = this._domain = this._expires = null;
            }
        };
        if (!storage_available) {
            window.localCookieStorage = $.extend({}, cookie_storage, {
                _prefix: cookie_local_prefix,
                _expires: 365 * 10
            });
            window.sessionCookieStorage = $.extend({}, cookie_storage, {_prefix: cookie_session_prefix + window.name + '_'});
        }
        window.cookieStorage = $.extend({}, cookie_storage);
        // cookieStorage API
        $.cookieStorage = $.extend({}, storage, {
            _type: 'cookieStorage',
            setExpires: function (e) {
                window.cookieStorage.setExpires(e);
                return this;
            },
            setPath: function (p) {
                window.cookieStorage.setPath(p);
                return this;
            },
            setDomain: function (d) {
                window.cookieStorage.setDomain(d);
                return this;
            },
            setConf: function (c) {
                window.cookieStorage.setConf(c);
                return this;
            },
            setDefaultConf: function () {
                window.cookieStorage.setDefaultConf();
                return this;
            }
        });
    }

    // Get a new API on a namespace
    $.initNamespaceStorage = function (ns) {
        return _createNamespace(ns);
    };
    if (storage_available) {
        // About alwaysUseJson
        // By default, all values are string on html storages and the plugin don't use json to store simple values (strings, int, float...)
        // So by default, if you do storage.setItem('test',2), value in storage will be "2", not 2
        // If you set this property to true, all values set with the plugin will be stored as json to have typed values in any cases

        // localStorage API
        $.localStorage = $.extend({}, storage, {_type: 'localStorage'});
        // sessionStorage API
        $.sessionStorage = $.extend({}, storage, {_type: 'sessionStorage'});
    } else {
        // localStorage API
        $.localStorage = $.extend({}, storage, {_type: 'localCookieStorage'});
        // sessionStorage API
        $.sessionStorage = $.extend({}, storage, {_type: 'sessionCookieStorage'});
    }
    // List of all namespace storage
    $.namespaceStorages = {};
    // Remove all items in all storages
    $.removeAllStorages = function (reinit_ns) {
        $.localStorage.removeAll(reinit_ns);
        $.sessionStorage.removeAll(reinit_ns);
        if ($.cookieStorage) {
            $.cookieStorage.removeAll(reinit_ns);
        }
        if (!reinit_ns) {
            $.namespaceStorages = {};
        }
    }
    $.alwaysUseJsonInStorage = function (value) {
        storage.alwaysUseJson = value;
        $.localStorage.alwaysUseJson = value;
        $.sessionStorage.alwaysUseJson = value;
        if ($.cookieStorage) {
            $.cookieStorage.alwaysUseJson = value;
        }
    }
}));

var useragent_base = (function() {

	var STRINGS_ZTE = 'ZTE',
		STRINGS_TOSHIBA = 'Toshiba',
		STRINGS_TI = 'Texas Instruments',
		STRINGS_SAMSUNG = 'Samsung',
		STRINGS_SHARP = 'Sharp',
		STRINGS_SONY_ERICSSON = 'Sony Ericsson',
		STRINGS_QUALCOMM = 'Qualcomm',
		STRINGS_PANTECH = 'Pantech',
		STRINGS_MOTOROLA = 'Motorola',
		STRINGS_LG = 'LG',
		STRINGS_LENOVO = 'Lenovo',
		STRINGS_HUAWEI = 'Huawei',
		STRINGS_HTC = 'HTC',
		STRINGS_COOLPAD = 'Coolpad',
		STRINGS_BN = 'Barnes & Noble',
		STRINGS_ASUS = 'Asus',
		STRINGS_ARCHOS = 'Archos',
		STRINGS_ALCATEL = 'Alcatel',
		STRINGS_ACER = 'Acer',

		STRINGS_GALAXY = 'Galaxy',
		STRINGS_XPERIA = 'Xperia';
	STRINGS_BASED = ' based device';

	var TOUCHWIZ_MODELS = {
		'SAMSUNG': {
			'GT-S3370C': [STRINGS_SAMSUNG, 'Corby 3G'],
			'GT-S3650': [STRINGS_SAMSUNG, 'Corby'],
			'GT-S3653': [STRINGS_SAMSUNG, 'Corby'],
			'GT-S3850': [STRINGS_SAMSUNG, 'Corby II'],
			'GT-S5230': [STRINGS_SAMSUNG, 'Star'],
			'GT-S5230W': [STRINGS_SAMSUNG, 'Star'],
			'GT-S5233': [STRINGS_SAMSUNG, 'Star'],
			'GT-S5260': [STRINGS_SAMSUNG, 'Star II'],
			'GT-S5560': [STRINGS_SAMSUNG, 'Marvel'],
			'GT-S5620': [STRINGS_SAMSUNG, 'Monte'],
			'GT-S7550': [STRINGS_SAMSUNG, 'Blue Earth'],
			'GT-S8000': [STRINGS_SAMSUNG, 'Jet'],
			'GT-S8003': [STRINGS_SAMSUNG, 'Jet'],
			'SGH-F480': [STRINGS_SAMSUNG, 'Tocco'],
			'SGH-T528g': [STRINGS_SAMSUNG, 'Straight Talk'],
			'GT-B3410': [STRINGS_SAMSUNG, 'Star Qwerty'],
			'GT-B5310': [STRINGS_SAMSUNG, 'Corby Pro'],
			'GT-B7722': [STRINGS_SAMSUNG, 'Star Duos'],
			'GT-C6712': [STRINGS_SAMSUNG, 'Star II Duos']
		}
	}

	var BADA_MODELS = {
		'SAMSUNG': {
			'GT- S5250': [STRINGS_SAMSUNG, 'Wave 525'],
			'GT-S5250': [STRINGS_SAMSUNG, 'Wave 525'],
			'GT-S5253': [STRINGS_SAMSUNG, 'Wave 525'],
			'GT-S5330': [STRINGS_SAMSUNG, 'Wave 533'],
			'GT-S5380': [STRINGS_SAMSUNG, 'Wave Y'],
			'GT-S5380D': [STRINGS_SAMSUNG, 'Wave Y'],
			'GT-S5380K': [STRINGS_SAMSUNG, 'Wave Y'],
			'GT-S5750E': [STRINGS_SAMSUNG, 'Wave 575'],
			'GT-S5753E': [STRINGS_SAMSUNG, 'Wave 575'],
			'GT-S7230B': [STRINGS_SAMSUNG, 'Wave 723'],
			'GT-S7230E': [STRINGS_SAMSUNG, 'Wave 723'],
			'GT-S7233E': [STRINGS_SAMSUNG, 'Wave 723'],
			'GT-S7250': [STRINGS_SAMSUNG, 'Wave M'],
			'GT-S7250D': [STRINGS_SAMSUNG, 'Wave M'],
			'GT-S8500': [STRINGS_SAMSUNG, 'Wave'],
			'GT-S8500C': [STRINGS_SAMSUNG, 'Wave'],
			'GT-S8500R': [STRINGS_SAMSUNG, 'Wave'],
			'GT-S8500T': [STRINGS_SAMSUNG, 'Wave'],
			'GT-S8530': [STRINGS_SAMSUNG, 'Wave II'],
			'GT-S8600': [STRINGS_SAMSUNG, 'Wave 3'],
			'SHW-M410': [STRINGS_SAMSUNG, 'Wave 3']
		}
	}

	var TIZEN_MODELS = {
		'SAMSUNG': {
			'GT-I9500': [STRINGS_SAMSUNG, 'GT-I9500']
		}
	}

	var BREW_MODELS = {
		'Coolpad D508': [STRINGS_COOLPAD, 'D508'],
		'Coolpad E600': [STRINGS_COOLPAD, 'E600'],
		'SCH-F839': [STRINGS_SAMSUNG, 'SCH-F839']
	}

	var WINDOWS_MOBILE_MODELS = {
		'DX900': [STRINGS_ACER, 'Tempo DX900'],
		'F900': [STRINGS_ACER, 'Tempo F900'],
		'Coolpad F800': [STRINGS_COOLPAD, 'F800'],
		'garmin-asus-Nuvifone-M10': ['Garmin-Asus', 'Nuvifone M10'],
		'HP iPAQ 510': ['HP', 'iPAQ 510'],
		'HD mini T5555': [STRINGS_HTC, 'HD mini'],
		'HTC HD mini': [STRINGS_HTC, 'HD mini'],
		'HTC HD mini T5555': [STRINGS_HTC, 'HD mini'],
		'HTC HD2': [STRINGS_HTC, 'HD2'],
		'HTC HD2 T8585': [STRINGS_HTC, 'HD2'],
		'HD2 T8585': [STRINGS_HTC, 'HD2'],
		'T-Mobile LEO': [STRINGS_HTC, 'HD2'],
		'dopodT5588': [STRINGS_HTC, 'Hengshan'],
		'HTC Mega-T3333': [STRINGS_HTC, 'Mega'],
		'HTC Snap S521': [STRINGS_HTC, 'Snap'],
		'HTC Touch2 T3320': [STRINGS_HTC, 'Touch 2'],
		'HTC Touch2 T3333': [STRINGS_HTC, 'Touch 2'],
		'HTC Touch2 T3335': [STRINGS_HTC, 'Touch 2'],
		'HTC P3700': [STRINGS_HTC, 'Touch Diamond'],
		'HTC Touch Diamond2 T5353': [STRINGS_HTC, 'Touch Diamond 2'],
		'HTC Touch HD T8282': [STRINGS_HTC, 'Touch HD'],
		'HTC Touch HD T8283': [STRINGS_HTC, 'Touch HD'],
		'HTC Touch HD2 T8585': [STRINGS_HTC, 'Touch HD2'],
		'HTC Touch Pro2 T7373': [STRINGS_HTC, 'Touch Pro 2'],
		'T7380': [STRINGS_HTC, 'Touch Pro 2'],
		'HTC TyTN II': [STRINGS_HTC, 'TyTN II'],
		'GT-B7300': [STRINGS_SAMSUNG, 'Omnia Lite'],
		'GT-B7610': [STRINGS_SAMSUNG, 'Omnia Pro'],
		'GT-i8000': [STRINGS_SAMSUNG, 'Omnia 2'],
		'GT-I8000': [STRINGS_SAMSUNG, 'Omnia 2'],
		'GT-I8000U': [STRINGS_SAMSUNG, 'Omnia 2'],
		'M1i': [STRINGS_SONY_ERICSSON, 'M1i Aspen']
	}

	var WINDOWS_PHONE_MODELS = {
		'Acer': {
			'Allegro': [STRINGS_ACER, 'Allegro'],
			'M310': [STRINGS_ACER, 'Allegro']
		},

		'Asus': {
			'Galaxy6': [STRINGS_ASUS, 'Galaxy 6']
		},

		'DELL': {
			'Venue Pro': ['Dell', 'Venue Pro']
		},

		'FujitsuToshibaMobileCommun': {
			'IS12T': ['Fujitsu Toshiba', 'IS12T']
		},

		'HTC': {
			'7 Mozart': [STRINGS_HTC, '7 Mozart'],
			'7 Mozart T8698': [STRINGS_HTC, '7 Mozart'],
			'T8697': [STRINGS_HTC, '7 Mozart'],
			'T8698': [STRINGS_HTC, '7 Mozart'],
			'PD67100': [STRINGS_HTC, '7 Mozart'],
			'Mozart T8698': [STRINGS_HTC, '7 Mozart'],
			'Mozart': [STRINGS_HTC, '7 Mozart'],
			'USCCHTC-PC93100': [STRINGS_HTC, 'Arrive'],
			'Gold': [STRINGS_HTC, 'Gold	'],
			'HD2': [STRINGS_HTC, 'HD2'],
			'HD7': [STRINGS_HTC, 'HD7'],
			'HD7 T9292': [STRINGS_HTC, 'HD7'],
			'T9295': [STRINGS_HTC, 'HD7'],
			'T9296': [STRINGS_HTC, 'HD7'],
			'HD7 Infinity': [STRINGS_HTC, 'HD7'],
			'T7575': [STRINGS_HTC, '7 Pro'],
			'7 Pro T7576': [STRINGS_HTC, '7 Pro'],
			'mwp6985': [STRINGS_HTC, 'Trophy'],
			'7 Trophy T8686': [STRINGS_HTC, 'Trophy'],
			'7 Trophy': [STRINGS_HTC, 'Trophy'],
			'PC40100': [STRINGS_HTC, 'Trophy'],
			'Touch-IT Trophy': [STRINGS_HTC, 'Trophy'],
			'Radar': [STRINGS_HTC, 'Radar'],
			'Radar 4G': [STRINGS_HTC, 'Radar'],
			'Radar C110e': [STRINGS_HTC, 'Radar'],
			'Mazaa': [STRINGS_HTC, 'Mazaa'],
			'Mondrian': [STRINGS_HTC, 'Mondrian'],
			'Schubert': [STRINGS_HTC, 'Schubert'],
			'7 Schubert T9292': [STRINGS_HTC, 'Schubert'],
			'Spark': [STRINGS_HTC, 'Spark'],
			'T8788': [STRINGS_HTC, 'Surround'],
			'TITAN X310e': [STRINGS_HTC, 'Titan'],
			'X310e': [STRINGS_HTC, 'Titan'],
			'PI39100': [STRINGS_HTC, 'Titan'],
			'PI86100': [STRINGS_HTC, 'Titan II'],
			'Ultimate': [STRINGS_HTC, 'Ultimate']
		},

		'LG': {
			'GW910': [STRINGS_LG, 'Optimus 7'],
			'LG E-900': [STRINGS_LG, 'Optimus 7 E900'],
			'LG-E900': [STRINGS_LG, 'Optimus 7 E900'],
			'LG-E900h': [STRINGS_LG, 'Optimus 7 E900'],
			'LG-C900': [STRINGS_LG, 'Optimus 7Q'],
			'LG-C900B': [STRINGS_LG, 'Quantum'],
			'LG-C900k': [STRINGS_LG, 'Quantum']
		},

		'nokia': {
			'SeaRay': ['Nokia', 'Lumia 800'],
			'800C': ['Nokia', 'Lumia 800']
		},

		'NOKIA': {
			'710': ['Nokia', 'Lumia 710'],
			'Nokia 710': ['Nokia', 'Lumia 710'],
			'Lumia 710': ['Nokia', 'Lumia 710'],
			'Lumia 719': ['Nokia', 'Lumia 719'],
			'Lumia 800': ['Nokia', 'Lumia 800'],
			'800': ['Nokia', 'Lumia 800'],
			'Lumia 900': ['Nokia', 'Lumia 900'],
			'XXX': ['Nokia', 'prototype']
		},

		'SAMSUNG': {
			'GT-I8350': [STRINGS_SAMSUNG, 'Omnia W'],
			'GT-I8350T': [STRINGS_SAMSUNG, 'Omnia W'],
			'SGH-i677': [STRINGS_SAMSUNG, 'Focus Flash'],
			'SGH-i707': [STRINGS_SAMSUNG, 'Taylor'],
			'SGH-i917': [STRINGS_SAMSUNG, 'Omnia 7'],
			'SGH-I917': [STRINGS_SAMSUNG, 'Omnia 7'],
			'SGH-i917.': [STRINGS_SAMSUNG, 'Focus'],
			'SGH-i917R': [STRINGS_SAMSUNG, 'Focus'],
			'SGH-i937': [STRINGS_SAMSUNG, 'Focus S'],
			'OMNIA7': [STRINGS_SAMSUNG, 'Omnia 7'],
			'OMINA7': [STRINGS_SAMSUNG, 'Omnia 7'],
			'Taylor': [STRINGS_SAMSUNG, 'Taylor']
		},

		'TOSHIBA': {
			'TSUNAGI': ['Toshiba', 'Tsunagi']
		}
	};

	var ANDROID_MODELS = {
		"Android": [null, null],
		"google sdk": [null, null],
		"sdk": [null, null],
		"generic": [null, null],
		"generic x86": [null, null],
		"amd brazos": ["AMD", "Fusionbased device"],
		"Amlogic M1 reference board": ["Amlogic", "M1 reference board"],
		"AML8726M": ["Amlogic", "AML8726-Mbased device"],
		"vexpress a9": ["ARM", "Versatile Express development platform"],
		"bcm7231": ["Broadcom", "BCM7231based device", "television"],
		"bcm7425": ["Broadcom", "BCM7425based device", "television"],
		"bcm7429": ["Broadcom", "BCM7429based device", "television"],
		"imx50 rdp": ["Freescale", "i.MX50based device"],
		"imx51 bbg": ["Freescale", "i.MX51based device"],
		"imx53 loco": ["Freescale", "i.MX53based device"],
		"imx53 mp204f3": ["Freescale", "i.MX53based device"],
		"imx53 smd": ["Freescale", "i.MX53based device"],
		"imx53 yeagle": ["Freescale", "i.MX53based device"],
		"imx6q": ["Freescale", "i.MX6Qbased device"],
		"ODROID-A": ["Hardkernel", "ODROID-A developer tablet", "tablet"],
		"mfld dv10": ["Intel", "Medfieldbased device"],
		"mfld dv20": ["Intel", "Medfieldbased device"],
		"mfld lw00": ["Intel", "Medfieldbased device"],
		"mfld pr2": ["Intel", "Medfieldbased device"],
		"mfld pr3": ["Intel", "Medfieldbased device"],
		"berlin bg2": ["Marvell", "Armada 1000based device", "television"],
		"MStar Amber3": ["MStar", "Amber3based device"],
		"Konka Amber3": ["MStar", "Amber3based device"],
		"mt5396": ["Mediatek", "MT5396based device", "television"],
		"bird75v2": ["Mediatek", "MT6575based device"],
		"eagle75v1 2": ["Mediatek", "MT6575based device"],
		"MBX DVBT reference board (c03ref)": ["MXB", "DVBT reference board", "television"],
		"NS2816": ["Nufront", "NuSmart 2816based device"],
		"Ventana": ["nVidia", "Tegra Ventana development kit"],
		"Cardhu": ["nVidia", "Tegra 3based device"],
		"Panda": ["Pandaboard", "Development Kit"],
		"pandaboard": ["Pandaboard", "Development Kit"],
		"PandaBoard": ["Pandaboard", "Development Kit"],
		"MSM": ["Qualcomm", "Snapdragonbased device"],
		"msm7227 ffa": ["Qualcomm", "Snapdragon S1based device"],
		"msm7627 surf": ["Qualcomm", "Snapdragon S1based device"],
		"msm7627a": ["Qualcomm", "Snapdragon S1based device"],
		"msm7627a sku1": ["Qualcomm", "Snapdragon S1based device"],
		"msm7627a sku3": ["Qualcomm", "Snapdragon S1based device"],
		"msm7630 fusion": ["Qualcomm", "Snapdragon S2based device"],
		"msm7630 surf": ["Qualcomm", "Snapdragon S2based device"],
		"msm8660 cougar": ["Qualcomm", "Snapdragon S3based device"],
		"msm8660 surf": ["Qualcomm", "Snapdragon S3based device"],
		"msm8960": ["Qualcomm", "Snapdragon S4based device"],
		"rk2808sdk": ["Rockchip", "RK2808based device"],
		"RK2818": ["Rockchip", "RK2818based device"],
		"rk2818sdk": ["Rockchip", "RK2818based device"],
		"Android-for-Rockchip-2818": ["Rockchip", "RK2818based device"],
		"rk29sdk": ["Rockchip", "RK29based device"],
		"Rk29sdk": ["Rockchip", "RK29based device"],
		"rk30sdk": ["Rockchip", "RK30based device"],
		"s3c6410": ["Samsung", "S3C6410based device"],
		"smdk6410": ["Samsung", "S3C6410based device"],
		"SMDKC110": ["Samsung", "Exynos 3110based device"],
		"SMDKV210": ["Samsung", "Exynos 4210based device"],
		"S5PV210": ["Samsung", "Exynos 4210based device"],
		"sec smdkc210": ["Samsung", "Exynos 4210based device"],
		"SMDK4x12": ["Samsung", "Exynos 4212 or 4412based device"],
		"smp86xx": ["Sigma", "SMP86xxbased device", "television"],
		"sv8860": ["Skyviia", "SV8860based device", "television"],
		"ste u8500": ["ST Ericsson", "Novathor U8500based device"],
		"Telechips M801 Evaluation Board": ["Telechips", "M801based device", "television"],
		"Telechips TCC8900 Evaluation Board": ["Telechips", "TCC8900based device", "television"],
		"TCC8920 STB EV": ["Telechips", "TCC8920based device", "television"],
		"OMAP": ["Texas Instruments", "OMAPbased device"],
		"OMAP SS": ["Texas Instruments", "OMAPbased device"],
		"LogicPD Zoom2": ["Texas Instruments", "OMAPbased device"],
		"omap3evm": ["Texas Instruments", "OMAP3based device"],
		"Omap5sevm": ["Texas Instruments", "OMAP5based device"],
		"pnx8473 kiryung": ["Trident", "PNX8473based device", "television"],
		"crespo": ["Google", "Nexus S"],
		"Crespo": ["Google", "Nexus S"],
		"Crespo4G": ["Google", "Nexus S"],
		"Passion": ["Google", "Nexus One"],
		"Bravo": ["HTC", "Desire"],
		"dream": ["HTC", "Dream"],
		"Vogue": ["HTC", "Touch"],
		"Vendor Optimus": ["LG", "Optimus"],
		"Stingray": ["Motorola", "XOOM", "tablet"],
		"Wingray": ["Motorola", "XOOM", "tablet"],
		"maguro": ["Samsung", "Galaxy Nexus"],
		"Maguro": ["Samsung", "Galaxy Nexus"],
		"Toro-VZW": ["Samsung", "Galaxy Nexus"],
		"blaze": ["Texas Instruments", "Blaze Tablet", "tablet"],
		"Blaze": ["Texas Instruments", "Blaze Tablet", "tablet"],
		"Blaze Tablet": ["Texas Instruments", "Blaze Tablet", "tablet"],
		"BlueStacks": ["BlueStacks", "App Player", "desktop"],
		"youwave custom": ["Youwave", "Android on PC", "desktop"],
		"A100": ["Acer", "Iconia Tab A100", "tablet"],
		"A101": ["Acer", "Iconia Tab A101", "tablet"],
		"A200": ["Acer", "Iconia Tab A200", "tablet"],
		"A500": ["Acer", "Iconia Tab A500", "tablet"],
		"A501": ["Acer", "Iconia Tab A501", "tablet"],
		"A510": ["Acer", "Iconia Tab A510", "tablet"],
		"A511": ["Acer", "Iconia Tab A511", "tablet"],
		"A700": ["Acer", "Iconia Tab A700", "tablet"],
		"Acer A800": ["Acer", "Iconia Tab A800", "tablet"],
		"E110": ["Acer", "beTouch E110"],
		"E120": ["Acer", "beTouch E120"],
		"E130": ["Acer", "beTouch E130"],
		"E140": ["Acer", "beTouch E140"],
		"E210": ["Acer", "beTouch E210"],
		"E310": ["Acer", "Liquid mini"],
		"E320": ["Acer", "Liquid Express"],
		"E330": ["Acer", "Liquid Glow"],
		"E400": ["Acer", "beTouch E400"],
		"G100W": ["Acer", "G100W"],
		"S100": ["Acer", "Liquid"],
		"S110": ["Acer", "Stream"],
		"S120": ["Acer", "Liquid mt"],
		"S300": ["Acer", "Iconia Smart"],
		"S500": ["Acer", "CloudMobile"],
		"TD600": ["Acer", "beTouch TD600"],
		"Liquid": ["Acer", "Liquid"],
		"Liquid E": ["Acer", "Liquid E"],
		"Liquid Mt": ["Acer", "Liquid mt"],
		"Liquid MT": ["Acer", "Liquid mt"],
		"Liquid Metal": ["Acer", "Liquid mt"],
		"Stream": ["Acer", "Stream"],
		"N700": ["aigo", "N700", "tablet"],
		"M801": ["aigo", "M801", "tablet"],
		"Novo7": ["Ainovo", "Novo7", "tablet"],
		"Novo7 Aurora": ["Ainovo", "Novo7 Aurora", "tablet"],
		"Novo7 Advanced": ["Ainovo", "Novo7 Advanced", "tablet"],
		"Novo7 Advanced2": ["Ainovo", "Novo7 Advanced 2", "tablet"],
		"Novo7 Basic": ["Ainovo", "Novo7 Basic", "tablet"],
		"Novo7 ELF": ["Ainovo", "Novo7 Elf", "tablet"],
		"Novo7 PALADIN": ["Ainovo", "Novo7 Paladin", "tablet"],
		"Novo8 Advanced": ["Ainovo", "Novo8 Advanced", "tablet"],
		"one touch 890": ["Alcatel", "One Touch 890"],
		"one touch 890D": ["Alcatel", "One Touch 890"],
		"one touch 891": ["Alcatel", "One Touch 891"],
		"ONE TOUCH 903": ["Alcatel", "One Touch 903SHV-E170K"],
		"one touch 906": ["Alcatel", "One Touch 906"],
		"one touch 908": ["Alcatel", "One Touch 908"],
		"one touch 908F": ["Alcatel", "One Touch 908"],
		"one touch 908S": ["Alcatel", "One Touch 908"],
		"one touch 910": ["Alcatel", "One Touch 910"],
		"one touch 918": ["Alcatel", "One Touch 918"],
		"one touch 918D": ["Alcatel", "One Touch 918"],
		"ONE TOUCH 918D": ["Alcatel", "One Touch 918"],
		"one touch 918M": ["Alcatel", "One Touch 918"],
		"one touch 918N": ["Alcatel", "One Touch 918"],
		"one touch 980": ["Alcatel", "One Touch 980"],
		"one touch 980A": ["Alcatel", "One Touch 980"],
		"one touch 981A": ["Alcatel", "One Touch 981"],
		"one touch 986": ["Alcatel", "One Touch 986"],
		"one touch 990": ["Alcatel", "One Touch 990"],
		"one touch 990A": ["Alcatel", "One Touch 990"],
		"one touch 991": ["Alcatel", "One Touch 991"],
		"one touch 991D": ["Alcatel", "One Touch 991"],
		"ONE TOUCH 993": ["Alcatel", "One Touch 993"],
		"one touch 995": ["Alcatel", "One Touch 995"],
		"Telenor OneTouch": ["Alcatel", "One Touch 990"],
		"OT 918": ["Alcatel", "One Touch 918"],
		"Venture": ["Alcatel", "Venture"],
		"Allwinner A10": ["AllWinner", "A10", "tablet"],
		"97FC": ["AllWinner", "A10 97FC", "tablet"],
		"Kindle Fire": ["Amazon", "Kindle Fire", "tablet"],
		"Amazon Kindle Fire": ["Amazon", "Kindle Fire", "tablet"],
		"AMD120": ["AnyDATA", "AnyTAB AMD120", "tablet"],
		"MW0811": ["AOC", "Breeze MW0811", "tablet"],
		"MW0821 V2.0": ["AOC", "Breeze MW0821", "tablet"],
		"MW0922": ["AOC", "Breeze MW0922", "tablet"],
		"Apanda A60": ["Apanda", "A60"],
		"apanda-A60": ["Apanda", "A60"],
		"A80KSC": ["Archos", "Arnova 8", "tablet"],
		"AN7CG2": ["Archos", "Arnova 7", "tablet"],
		"A101B": ["Archos", "Arnova 10", "tablet"],
		"AN10BG2DT": ["Archos", "Arnova 10 B", "tablet"],
		"AN10G2": ["Archos", "Arnova 10 G2", "tablet"],
		"A32": ["Archos", "32", "media"],
		"A35DE": ["Archos", "35 Smart Home Phone"],
		"A43": ["Archos", "43", "media"],
		"Archos5": ["Archos", "5", "media"],
		"A70H": ["Archos", "7", "tablet"],
		"A70HB": ["Archos", "7", "tablet"],
		"A70BHT": ["Archos", "7", "tablet"],
		"A70CHT": ["Archos", "7C", "tablet"],
		"A70S": ["Archos", "70", "tablet"],
		"A7EB": ["Archos", "70B", "tablet"],
		"ARCHOS 70it2": ["Archos", "70 IT 2", "tablet"],
		"ARCHOS 80G9": ["Archos", "80 G9", "tablet"],
		"ARCHOS 101G9": ["Archos", "101 G9", "tablet"],
		"A101IT": ["Archos", "101 IT", "tablet"],
		"ASTRI": ["ASTRI", "e-reader", "ereader"],
		"eeepc": ["Asus", "Eee Pc"],
		"asus laptop": ["Asus", "Eee Pc"],
		"ME171": ["Asus", "Eee Pad MeMO", "tablet"],
		"Slider SL101": ["Asus", "Eee Pad Slider", "tablet"],
		"EPAD": ["Asus", "Eee Pad Transformer", "tablet"],
		"TF101": ["Asus", "Eee Pad Transformer", "tablet"],
		"Transformer TF101": ["Asus", "Eee Pad Transformer", "tablet"],
		"Transformer TF101G": ["Asus", "Eee Pad Transformer", "tablet"],
		"TF201": ["Asus", "Eee Pad Transformer Prime", "tablet"],
		"Transformer Prime TF201": ["Asus", "Eee Pad Transformer Prime", "tablet"],
		"Transformer Prime": ["Asus", "Eee Pad Transformer Prime", "tablet"],
		"Transformer Pad TF300T": ["Asus", "Transformer Pad 300", "tablet"],
		"ASUS Transformer TF300T": ["Asus", "Transformer Pad 300", "tablet"],
		"ASUS Transformer Pad TF300T": ["Asus", "Transformer Pad 300", "tablet"],
		"ASUS Transformer Pad TF300TG": ["Asus", "Transformer Pad 300", "tablet"],
		"ASUS Transformer Pad TF700T": ["Asus", "Transformer Pad Infinity 700", "tablet"],
		"ASUS Transformer Pad TF700K": ["Asus", "Transformer Pad Infinity 700", "tablet"],
		"ASUS Transformer TF700K": ["Asus", "Transformer Pad Infinity 700", "tablet"],
		"PadFone": ["Asus", "Padfone", "tablet"],
		"OMS TTD": ["Asus", "Eee Pc T10"],
		"ASUS T20": ["Asus", "Eee Pc T20"],
		"ETBW11AA": ["Asus", "Tough"],
		"AUX V900": ["AUX", "V900"],
		"M910A": ["AUX", "M910"],
		"PICOpad-QGN": ["Axioo", "Picopad QGN", "tablet"],
		"NOOK": ["Barnes & Noble", "NOOK", "ereader"],
		"NookColor": ["Barnes & Noble", "NOOK Color", "ereader"],
		"NOOK BNRV200": ["Barnes & Noble", "NOOK Color", "ereader"],
		"NOOK BNRV300": ["Barnes & Noble", "NOOK Color", "ereader"],
		"NookTablet": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"Nook Tablet": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"NOOK BNTV250": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"NOOK BNTV250A": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"BNTV250": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"BNTV250A": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"NOOK Slate": ["Barnes & Noble", "NOOK Tablet", "ereader"],
		"BenWee 5100": ["BenWee", "5100"],
		"CA907AAC0G": ["Besta", "CA907AAC0G"],
		"BM999": ["Bmorn", "BM999", "tablet"],
		"V11": ["Bmorn", "V11", "tablet"],
		"V99": ["Bmorn", "V99", "tablet"],
		"bq DaVinci": ["bq", "DaVinci", "tablet"],
		"CT704": ["Carrefour", "CT704", "tablet"],
		"CT1002": ["Carrefour", "CT1002", "tablet"],
		"Camangi-Mangrove7": ["Camangi", "Mangrove 7", "tablet"],
		"WS171": ["Camangi", "WebStation", "tablet"],
		"IS11CA": ["Casio", "GzOne IS11CA"],
		"C771": ["Casio", "GzOne Commando"],
		"CAT NOVA": ["Cat", "NOVA", "tablet"],
		"ARMM3V": ["chinaleap", "ARMM3V", "tablet"],
		"CIUS-7": ["Cisco", "Cius", "tablet"],
		"CIUS-7-AT": ["Cisco", "Cius", "tablet"],
		"CSL Spice MI300": ["CSL", "Spice MI300"],
		"CSL-MI410": ["CSL", "Spice MI410"],
		"MID1024": ["Coby", "Kyros MID1024", "tablet"],
		"MID1125": ["Coby", "Kyros MID1125", "tablet"],
		"MID1126": ["Coby", "Kyros MID1126", "tablet"],
		"MID7010": ["Coby", "Kyros MID7010", "tablet"],
		"MID7012": ["Coby", "Kyros MID7012", "tablet"],
		"MID7015": ["Coby", "Kyros MID7015", "tablet"],
		"MID7015A": ["Coby", "Kyros MID7015", "tablet"],
		"MID7016": ["Coby", "Kyros MID7016", "tablet"],
		"MID7020": ["Coby", "Kyros MID7020", "tablet"],
		"MID7022": ["Coby", "Kyros MID7022", "tablet"],
		"MID7024": ["Coby", "Kyros MID7024", "tablet"],
		"MID7025": ["Coby", "Kyros MID7025", "tablet"],
		"MID7127": ["Coby", "Kyros MID7127", "tablet"],
		"MID8024": ["Coby", "Kyros MID8024", "tablet"],
		"MID8125": ["Coby", "Kyros MID8125", "tablet"],
		"MID8127": ["Coby", "Kyros MID8127", "tablet"],
		"Z71": ["Commtiva", "Z71"],
		"V-T100": ["Commtiva", "V-T100"],
		"FIH-FB0": ["Commtiva", "HD700"],
		"Coolpad D510": ["Coolpad", "D510"],
		"Coolpad 8020": ["Coolpad", "8020"],
		"D530": ["Coolpad", "D530"],
		"Coolpad D530": ["Coolpad", "D530"],
		"D539": ["Coolpad", "D539"],
		"Coolpad D539": ["Coolpad", "D539"],
		"E239": ["Coolpad", "E239"],
		"Coolpad E239": ["Coolpad", "E239"],
		"Coolpad N930": ["Coolpad", "N930"],
		"N930": ["Coolpad", "N930"],
		"Coolpad W706": ["Coolpad", "W706"],
		"Coolpad W706+": ["Coolpad", "W706"],
		"Coolpad W708": ["Coolpad", "W708"],
		"W711": ["Coolpad", "W711"],
		"Coolpad 5010": ["Coolpad", "5010"],
		"Coolpad 5210": ["Coolpad", "5210"],
		"Coolpad 5820": ["Coolpad", "5820"],
		"5832": ["Coolpad", "5832"],
		"Coolpad 5832": ["Coolpad", "5832"],
		"5855": ["Coolpad", "5855"],
		"Coolpad 5860": ["Coolpad", "5860"],
		"Coolpad 5860+": ["Coolpad", "5860"],
		"Coolpad 5860s": ["Coolpad", "5860"],
		"5860": ["Coolpad", "5860"],
		"5860A": ["Coolpad", "5860"],
		"Coolpad 5870": ["Coolpad", "5870"],
		"5870": ["Coolpad", "5870"],
		"Coolpad 7005": ["Coolpad", "7005"],
		"7260": ["Coolpad", "7260"],
		"Coolpad 7019": ["Coolpad", "7019"],
		"Coolpad 7260": ["Coolpad", "7260"],
		"Coolpad 8013": ["Coolpad", "8013"],
		"Coolpad 8809": ["Coolpad", "8809"],
		"Coolpad 8810": ["Coolpad", "8810"],
		"8810": ["Coolpad", "8810"],
		"8150": ["Coolpad", "8150"],
		"Coolpad 8150D": ["Coolpad", "8150"],

		"Coolpad 8811": ["Coolpad", "8811"],
		"Coolpad 9900": ["Coolpad", "9900"],
		"Coolpad 8050": ["Coolpad", "8050"],
		"ZiiO7": ["Creative", "ZiiO 7", "tablet"],
		"ZiiLABS ZiiO7": ["Creative", "ZiiO 7", "tablet"],
		"ZiiLABS ZiiO10 ": ["Creative", "ZiiO 10", "tablet"],
		"CUBE K8GT A": ["Cube", "K8GT A", "tablet"],
		"CUBE K8GT B": ["Cube", "K8GT B", "tablet"],
		"K8GT C": ["Cube", "K8GT C", "tablet"],
		"K8GT H": ["Cube", "K8GT H", "tablet"],
		"CUBE K8GT H": ["Cube", "K8GT H", "tablet"],
		"K8GT W": ["Cube", "K8GT W", "tablet"],
		"CUBE U8GT": ["Cube", "U8GT", "tablet"],
		"CUBE U9GT": ["Cube", "U9GT", "tablet"],
		"CUBE U9GT 2": ["Cube", "U9GT 2", "tablet"],
		"Cube U9GT2": ["Cube", "U9GT 2", "tablet"],
		"U9GT": ["Cube", "U9GT", "tablet"],
		"U9GT2 From moage.com": ["Cube", "U9GT 2", "tablet"],
		"N90 From moage.com": ["Cube", "U9GT 2", "tablet"],
		"U9GT S": ["Cube", "U9GT S", "tablet"],
		"U9GT S A": ["Cube", "U9GT SA", "tablet"],
		"U9GTS A": ["Cube", "U9GT SA", "tablet"],
		"U10GT 2": ["Cube", "U10GT 2", "tablet"],
		"U10GT S": ["Cube", "U10GT S", "tablet"],
		"U30GT-H": ["Cube", "U30GT H", "tablet"],
		"CUBE Q7PRO": ["Cube", "Q7 Pro", "tablet"],
		"CUBE Q7PRO J": ["Cube", "Q7 Pro", "tablet"],
		"Cydle M7 (v0005.04.03.12.ko)": ["Cydle", "M7 MultiPAD", "tablet"],
		"Dell Aero": ["Dell", "Aero"],
		"Dell M01M": ["Dell", "Mini 5", "tablet"],
		"Dell Streak": ["Dell", "Streak", "tablet"],
		"001DL": ["Dell", "Streak", "tablet"],
		"101DL": ["Dell", "Streak Pro", "tablet"],
		"GS01": ["Dell", "Streak Pro", "tablet"],
		"Dell Streak Pro": ["Dell", "Streak Pro", "tablet"],
		"streak7": ["Dell", "Streak 7", "tablet"],
		"Dell Streak 7": ["Dell", "Streak 7", "tablet"],
		"Dell Streak 10 Pro": ["Dell", "Streak 10 Pro", "tablet"],
		"Dell V04B": ["Dell", "Streak V04B", "tablet"],
		"Dell Venue": ["Dell", "Venue"],
		"Dell XCD35": ["Dell", "XCD35"],
		"XCD35": ["Dell", "XCD35"],
		"iDx7": ["Digma", "iDx7", "tablet"],
		"iDx10": ["Digma", "iDx10", "tablet"],
		"iDx10 3G": ["Digma", "iDx10", "tablet"],
		"DM009SH": ["Disney Mobile", "DM009SH"],
		"DM010SH": ["Disney Mobile", "DM010SH"],
		"DM012SH": ["Disney Mobile", "DM012SH"],
		"F-08D": ["Disney Mobile", "F-08D"],
		"P-05D": ["Disney Mobile", "P-05D"],
		"Tablet-P27": ["DracoTek", "P27 Tablet", "tablet"],
		"edgejr": ["EnTourage", "Pocket eDGe", "tablet"],
		"l97D": ["EPad", "l97D", "tablet"],
		"M4301": ["Eston", "MID M4301", "media"],
		"P10AN": ["Exper", "Easypad P10AN", "tablet"],
		"FIH-F0X": ["FIH", "F0X"],
		"Fly IQ260": ["Fly", "IQ260 BlackBird"],
		"ISW11F": ["Fujitsu", "Arrows Z"],
		"ISW13F": ["Fujitsu", "Arrows Z"],
		"IS12F": ["Fujitsu", "Arrows ES"],
		"F-01D": ["Fujitsu", "Arrows Tab LTE", "tablet"],
		"F-03D": ["Fujitsu", "Arrows Kiss"],
		"F-05D": ["Fujitsu", "Arrows X LTE"],
		"F-07D": ["Fujitsu", "Arrows \u00c3\ufffd\u00c2\u00bc"],
		"F-10D": ["Fujitsu", "Arrows X F-10D"],
		"F-12C": ["Fujitsu", "Globetrotter"],
		"f12arc": ["Fujitsu", "F12arc"],
		"M532": ["Fujitsu", "Stylistic M532", "tablet"],
		"Garminfone": ["Garmin-Asus", "Garminfone"],
		"Garmin-Asus A10": ["Garmin-Asus", "Nuvifone A10"],
		"Garmin-Asus A50": ["Garmin-Asus", "Nuvifone A50"],
		"TPA60W": ["Gateway", "TPA60W", "tablet"],
		"Geeksphone ZERO": ["Geeksphone", "ZERO"],
		"gemei G2": ["Gemei", "G2", "tablet"],
		"Gemei G2": ["Gemei", "G2", "tablet"],
		"gemei G3": ["Gemei", "G3", "tablet"],
		"Gemei G9": ["Gemei", "G9", "tablet"],
		"GSmart G1317D": ["Gigabyte", "GSmart G1317D"],
		"Gigabyte TB100": ["Gigabyte", "TB100", "tablet"],
		"GN100": ["Gionee", "GN100"],
		"GN105": ["Gionee", "GN105"],
		"GN106": ["Gionee", "GN106"],
		"GN200": ["Gionee", "GN200"],
		"GN205": ["Gionee", "GN205"],
		"GN700W": ["Gionee", "GN700W"],
		"GN708W": ["Gionee", "GN708W"],
		"Google Ion": ["Google", "Ion"],
		"Nexus One": ["Google", "Nexus One"],
		"NexusOne": ["Google", "Nexus One"],
		"HTC Nexus One": ["Google", "Nexus One"],
		"Nexus S": ["Google", "Nexus S"],
		"Google Nexus S": ["Google", "Nexus S"],
		"Nexus S 4G": ["Google", "Nexus S 4G"],
		"Dooderbutt-4.0.3-v1": ["Google", "Nexus S 4G"],
		"Nexus 7": ["Google", "Nexus 7", "tablet"],
		"Haier HW-W910": ["Haier", "HW-W910"],
		"SN10T1": ["HANNspree", "HANNSpad SN10T1", "tablet"],
		"SN10T2": ["HANNspree", "HANNSpad SN10T2", "tablet"],
		"HannsComb": ["HANNspree", "HANNSpad", "tablet"],
		"X1": ["HCL", "ME X1", "tablet"],
		"MID Serails": ["Herotab", "C8", "tablet"],
		"MID Serials": ["Herotab", "C8", "tablet"],
		"COSMO DUO": ["Hiscreen", "Cosmo DUO", "tablet"],
		"HS-U8": ["Hisense", "U8"],
		"HS-T92": ["Hisense", "T92"],
		"HS-E860": ["Hisense", "E860"],
		"HS-E910": ["Hisense", "E910"],
		"HS-E926": ["Hisense", "E926"],

		"HS-EG900": ["Hisense", "EG900"],
		"HS-ET919": ["Hisense", "ET919"],
		"EG968B": ["Hisense", "EG968B"],
		"HKPHONE H8-3G": ["HKPhone", "H8 3G"],
		"HOSIN U2": ["Hosin", "U2"],
		"Touchpad": ["HP", "TouchPad", "tablet"],
		"HP Touchpad": ["HP", "TouchPad", "tablet"],
		"cm tenderloin": ["HP", "TouchPad", "tablet"],
		"aokp tenderloin": ["HP", "TouchPad", "tablet"],
		"HTC Amaze 4G": ["HTC", "Amaze 4G"],
		"HTC Ruby": ["HTC", "Amaze 4G"],
		"HTC Amaze 4G(Ruby)": ["HTC", "Amaze 4G"],
		"Amaze 4G": ["HTC", "Amaze 4G"],
		"HTC Aria": ["HTC", "Aria"],
		"HTC Aria A6380": ["HTC", "Aria"],
		"HTC Liberty A6380": ["HTC", "Aria"],
		"HTC Liberty": ["HTC", "Aria"],
		"HTC A6366": ["HTC", "Aria"],
		"HTC Bee": ["HTC", "Bee"],
		"HTC ChaCha": ["HTC", "ChaCha"],
		"HTC ChaCha A810e": ["HTC", "ChaCha"],
		"HTC ChaChaCha A810e": ["HTC", "ChaCha"],
		"HTC A810e": ["HTC", "ChaCha"],
		"HTC A9188": ["HTC", "Tianxi"],
		"HTC Bravo": ["HTC", "Desire"],
		"HTC Desire": ["HTC", "Desire"],
		"HTC Desire A8181": ["HTC", "Desire"],
		"HTC Desire A8183": ["HTC", "Desire"],
		"HTC Desire Beats A8181": ["HTC", "Desire"],
		"HTC Desire CDMA": ["HTC", "Desire"],
		"HTC Desire SMS": ["HTC", "Desire"],
		"HTC Desire S.M.S": ["HTC", "Desire"],
		"HTC Desire C": ["HTC", "Desire C"],
		"HTC DesireHD": ["HTC", "Desire HD"],
		"HTC DesireHD A9191": ["HTC", "Desire HD"],
		"HTC DesireHD A9192": ["HTC", "Desire HD"],
		"HTC Desire HD A9191": ["HTC", "Desire HD"],
		"HTC A9191": ["HTC", "Desire HD"],
		"HTC A9191 for AT&T": ["HTC", "Desire HD"],
		"HTC A9192": ["HTC", "Desire HD"],
		"HTC Desire HD": ["HTC", "Desire HD"],
		"HTC Desire HD with Beats Audio": ["HTC", "Desire HD"],
		"HTC Desire S": ["HTC", "Desire S"],
		"HTC DesireS": ["HTC", "Desire S"],
		"HTC DesiresS": ["HTC", "Desire S"],
		"HTC DesireS S510e": ["HTC", "Desire S"],
		"HTC DesireS S510b": ["HTC", "Desire S"],
		"HTC Desire S S510e": ["HTC", "Desire S"],
		"HTC S510e": ["HTC", "Desire S"],
		"HTC Desire Saga": ["HTC", "Desire S"],
		"HTC Desire V": ["HTC", "Desire V"],
		"HTC T328w": ["HTC", "Desire V"],
		"HTC Desire VC": ["HTC", "Desire VC"],
		"HTC T328d": ["HTC", "Desire VC"],
		"HTC T328t": ["HTC", "Desire VT"],
		"HTC Desire Z": ["HTC", "Desire Z"],
		"HTC DesireZ": ["HTC", "Desire Z"],
		"HTC DesireZ A7272": ["HTC", "Desire Z"],
		"HTC Desire Z A7272": ["HTC", "Desire Z"],
		"HTC Vision": ["HTC", "Desire Z"],
		"HTC A7275": ["HTC", "Desire Z"],
		"HTC Dream": ["HTC", "Dream"],
		"HTC S710d": ["HTC", "Droid Incredible 2"],
		"HTC Incredible 2": ["HTC", "Droid Incredible 2"],
		"HTC X515d": ["HTC", "EVO 3D"],
		"HTC X515m": ["HTC", "EVO 3D"],
		"HTC X515C": ["HTC", "EVO 3D"],
		"HTC Evo 3D": ["HTC", "EVO 3D"],
		"HTC EVO 3D": ["HTC", "EVO 3D"],
		"HTC EVO 3D GSM": ["HTC", "EVO 3D"],
		"HTC EVO 3D X515a": ["HTC", "EVO 3D"],
		"HTC EVO 3D GSM X515m": ["HTC", "EVO 3D"],
		"HTC EVO 3D X515m": ["HTC", "EVO 3D"],
		"HTC EVO 3D X515M": ["HTC", "EVO 3D"],
		"HTC EVO3D X515a": ["HTC", "EVO 3D"],
		"HTC EVO3D X515m": ["HTC", "EVO 3D"],
		"HTC Evo 3D X515m": ["HTC", "EVO 3D"],
		"HTC Evo 3D with Beats Audio X515m": ["HTC", "EVO 3D"],
		"HTC Evo 4G": ["HTC", "EVO 4G"],
		"HTC EVO 4G": ["HTC", "EVO 4G"],
		"HTC X515E": ["HTC", "EVO 4G+"],
		"HTC EVO 4G+ For Sprint": ["HTC", "EVO 4G+"],
		"HTC EVO 4G++ For Sprint": ["HTC", "EVO 4G+"],
		"HTC C715c": ["HTC", "EVO Design 4G"],
		"HTC Design 4G": ["HTC", "EVO Design 4G"],
		"HTC EVO design 4G": ["HTC", "EVO Design 4G"],
		"HTC EVO Design 4G": ["HTC", "EVO Design 4G"],
		"HTC Evo Shift": ["HTC", "EVO Shift"],
		"HTC EVO Shift 4G": ["HTC", "EVO Shift"],
		"HTC A310e": ["HTC", "Explorer"],
		"HTC Explorer": ["HTC", "Explorer"],
		"HTC Explorer A310b": ["HTC", "Explorer"],
		"HTC Explorer A310e": ["HTC", "Explorer"],
		"HTC P510e": ["HTC", "Flyer", "tablet"],
		"HTC Flyer": ["HTC", "Flyer", "tablet"],
		"HTC Flyer P510e": ["HTC", "Flyer", "tablet"],
		"HTC Flyer P512": ["HTC", "Flyer", "tablet"],
		"HTC Flyer P512 NA": ["HTC", "Flyer", "tablet"],
		"HTC P515E": ["HTC", "Flyer 4G", "tablet"],
		"HTC Gratia A6380": ["HTC", "Gratia"],
		"HTC HD": ["HTC", "HD"],
		"HTC HD2": ["HTC", "HD2"],
		"HTC HD2 T8585": ["HTC", "HD2"],
		"HTC HD2(Leo)": ["HTC", "HD2"],
		"HTC HD7": ["HTC", "HD7"],
		"HTC T9299+": ["HTC", "HD7"],
		"HTC HD7 for Sprint": ["HTC", "HD7"],
		"HTC HD7 4G T9299 For AT&T": ["HTC", "HD7"],
		"HTC HD7 4G T9299+ For AT&T": ["HTC", "HD7"],
		"HTC T9299+ For AT&T": ["HTC", "HD7"],
		"HTC HD7S T9399+": ["HTC", "HD7s"],
		"HTC HD7S T9899+": ["HTC", "HD7s"],
		"HTC T9899+ For AT&T": ["HTC", "HD7s"],
		"VitMod ExtraLite 1.6.5.fullodex for HTC HD7 Pro": ["HTC", "HD7 Pro"],
		"HTC Hero": ["HTC", "Hero"],
		"HTC HERO": ["HTC", "Hero"],
		"HTC Hero CDMA": ["HTC", "Hero"],
		"HTC HERO CDMA": ["HTC", "Hero"],
		"HTC HERO200": ["HTC", "Hero 200"],
		"HTC Hero S": ["HTC", "Hero S"],
		"HTC IMAGIO": ["HTC", "Imagio"],
		"HTC Incredible": ["HTC", "Incredible"],
		"HTC Incredible S710E": ["HTC", "Incredible S"],
		"HTC S710e": ["HTC", "Incredible S"],
		"HTC Incredible S": ["HTC", "Incredible S"],
		"HTC Incredible S S710e": ["HTC", "Incredible S"],
		"HTC Incredible S s710e": ["HTC", "Incredible S"],
		"HTC IncredibleS S710e": ["HTC", "Incredible S"],
		"HTC Incredible S with Beats Audio": ["HTC", "Incredible S"],
		"HTC Vivo": ["HTC", "Incredible S"],
		"HTC Innovation": ["HTC", "Innovation"],
		"HTC Inspire 4G": ["HTC", "Inspire 4G"],
		"HTC HD7 Inspire 4G For Vodafone": ["HTC", "Inspire 4G"],
		"HTC P715a": ["HTC", "Jetstream", "tablet"],
		"HTC Legend": ["HTC", "Legend"],
		"HTC Magic": ["HTC", "Magic"],
		"HTC Sapphire": ["HTC", "Magic"],
		"HTC Lexikon": ["HTC", "Merge"],
		"HTC One S": ["HTC", "One S"],
		"HTC Z520e": ["HTC", "One S"],
		"HTC One V": ["HTC", "One V"],
		"HTC T320e": ["HTC", "One V"],
		"HTC One X": ["HTC", "One X"],
		"HTC S720e": ["HTC", "One X"],
		"HTC Endeavour-LS": ["HTC", "One X"],
		"HTC One XL": ["HTC", "One XL"],
		"HTC X710a": ["HTC", "Raider 4G"],
		"HTC Raider": ["HTC", "Raider 4G"],
		"HTC Raider X710e": ["HTC", "Raider 4G"],
		"HTC Raider X710s": ["HTC", "Raider 4G"],
		"HTC Raider 4G X710e": ["HTC", "Raider 4G"],
		"HTC PH39100": ["HTC", "Raider 4G"],
		"HTC Holiday": ["HTC", "Raider 4G"],
		"HTC Velocity 4G X710s": ["HTC", "Raider 4G"],
		"HTC Rezound": ["HTC", "Rezound"],
		"HTC Rhyme S510b": ["HTC", "Rhyme"],
		"HTC S510b": ["HTC", "Rhyme"],
		"HTC Bliss": ["HTC", "Rhyme"],
		"HTC Bliss S510b": ["HTC", "Rhyme"],
		"HTC Salsa C510e": ["HTC", "Salsa"],
		"HTC C510e": ["HTC", "Salsa"],
		"HTC Z710a": ["HTC", "Sensation"],
		"HTC Z710e": ["HTC", "Sensation"],
		"HTC Z710t": ["HTC", "Sensation"],
		"HTC Sensation": ["HTC", "Sensation"],
		"HTC Sensation Z710": ["HTC", "Sensation"],
		"HTC Sensation Z710a": ["HTC", "Sensation"],
		"HTC Sensation Z710e": ["HTC", "Sensation"],
		"HTC Sensation Z710E": ["HTC", "Sensation"],
		"HTC Sensation Z710e For AT&T": ["HTC", "Sensation"],
		"HTC Sensation Z710e with Beats Audio": ["HTC", "Sensation"],
		"HTC Sensation with Beats Audio Z710e": ["HTC", "Sensation"],
		"HTC Sensation with Beats Audio": ["HTC", "Sensation"],
		"HTC Sensation Taste": ["HTC", "Sensation"],
		"HTC Pyramid": ["HTC", "Sensation"],
		"HTC Pyramid Z710a": ["HTC", "Sensation"],
		"HTC Pyramid Z710e": ["HTC", "Sensation"],
		"HTC Sensation 4G": ["HTC", "Sensation"],
		"HTC Sensation 4G with Beats Audio": ["HTC", "Sensation"],
		"HTC Sensation G14": ["HTC", "Sensation"],
		"HTC Sensation G14 for AT&T": ["HTC", "Sensation"],
		"HTC G14 sensation": ["HTC", "Sensation"],
		"HTC Z715e": ["HTC", "Sensation XE"],
		"HTC Sensation Z715e": ["HTC", "Sensation XE"],
		"HTC SensationXE Beats": ["HTC", "Sensation XE"],
		"HTC SensationXE Beats Z715a": ["HTC", "Sensation XE"],
		"HTC SensationXE Beats Z715e": ["HTC", "Sensation XE"],
		"HTC Sensation XE": ["HTC", "Sensation XE"],
		"HTC Sensation XE Z715e": ["HTC", "Sensation XE"],
		"HTC SensationXE Z715e": ["HTC", "Sensation XE"],
		"HTC Sensation XE Beats": ["HTC", "Sensation XE"],
		"HTC SensationXE with Beats Audio": ["HTC", "Sensation XE"],
		"HTC Sensation XE with Beats Audio": ["HTC", "Sensation XE"],
		"HTC Sensation XE with Beats Audio Z715a": ["HTC", "Sensation XE"],
		"HTC Sensation Juredroid XE Beats Audio": ["HTC", "Sensation XE"],
		"HTC Sensation XE with Beats Audio Z715e": ["HTC", "Sensation XE"],
		"HTC Sensation XE With Beats Audio Z715e": ["HTC", "Sensation XE"],
		"HTC Sensation 4G XE with Beats Audio": ["HTC", "Sensation XE"],
		"HTC Sensation with Beats Audio Z715e": ["HTC", "Sensation XE"],
		"HTC X315E": ["HTC", "Sensation XL"],
		"HTC SensationXL Beats X315b": ["HTC", "Sensation XL"],
		"HTC SensationXL Beats X315e": ["HTC", "Sensation XL"],
		"HTC Sensation XL with Beats Audio X315b": ["HTC", "Sensation XL"],
		"HTC Sensation XL with Beats Audio X315e": ["HTC", "Sensation XL"],
		"HTC Runnymede": ["HTC", "Sensation XL"],
		"HTC G21": ["HTC", "Sensation XL"],
		"HTC PH06130": ["HTC", "Status"],
		"HTC Status": ["HTC", "Status"],
		"HTC Tattoo": ["HTC", "Tattoo"],
		"HTC TATTOO A3288": ["HTC", "Tattoo"],
		"HTC click": ["HTC", "Tattoo"],
		"HTC X310e": ["HTC", "Titan"],
		"HTC T7373": ["HTC", "Touch Pro II"],
		"HTC ThunderBolt": ["HTC", "ThunderBolt"],
		"HTC Mecha": ["HTC", "ThunderBolt"],
		"HTC Velocity 4G": ["HTC", "Velocity 4G"],
		"HTC Wildfire": ["HTC", "Wildfire"],
		"HTC Wildfire A3333": ["HTC", "Wildfire"],
		"HTC A3366": ["HTC", "Wildfire"],
		"HTC A3380": ["HTC", "Wildfire"],
		"HTC WildfireS": ["HTC", "Wildfire S"],
		"HTC Wildfire S": ["HTC", "Wildfire S"],
		"Htc Wildfire s": ["HTC", "Wildfire S"],
		"HTC Wildfire S A510e": ["HTC", "Wildfire S"],
		"HTC Wildfire S A510b": ["HTC", "Wildfire S"],
		"HTC WildfireS A510e": ["HTC", "Wildfire S"],
		"HTC WildfireS A510b": ["HTC", "Wildfire S"],
		"htc wildfire s a510e": ["HTC", "Wildfire S"],
		"HTC Wildfire S A515c": ["HTC", "Wildfire S"],
		"HTC A510a": ["HTC", "Wildfire S"],
		"HTC A510e": ["HTC", "Wildfire S"],
		"HTC A510c": ["HTC", "Wildfire S"],
		"HTCX06HT": ["HTC", "Desire"],
		"HTC A6390": ["HTC", "A6390"],
		"HTC A8180": ["HTC", "A8180"],
		"HTC PG762": ["HTC", "PG762"],
		"HTC S715e": ["HTC", "S715e"],
		"HTC S720t": ["HTC", "S720t"],
		"HTC Z510d": ["HTC", "Z510d"],
		"HTC Z560e": ["HTC", "Z560e"],
		"HTC VLE U": ["HTC", "One S"],
		"HTC VLE#U": ["HTC", "One S"],
		"HTC VIE U": ["HTC", "One S"],
		"HTC EVA UL": ["HTC", "One V"],
		"HTC ENR U": ["HTC", "One X"],
		"ENR U": ["HTC", "One X"],
		"EndeavorU": ["HTC", "One X"],
		"Liberty": ["HTC", "Aria"],
		"Desire": ["HTC", "Desire"],
		"Desire A8181": ["HTC", "Desire"],
		"desire hd": ["HTC", "Desire HD"],
		"Desire HD": ["HTC", "Desire HD"],
		"Dedire HD": ["HTC", "Desire HD"],
		"Desire Hd (ace)": ["HTC", "Desire HD"],
		"Desire S": ["HTC", "Desire S"],
		"DesireS": ["HTC", "Desire S"],
		"Desire Saga": ["HTC", "Desire S"],
		"Desire Z": ["HTC", "Desire Z"],
		"Dream": ["HTC", "Dream"],
		"Droid Incredible": ["HTC", "Droid Incredible"],
		"EVO": ["HTC", "EVO"],
		"Evo HD2": ["HTC", "EVO HD"],
		"Evo 3D Beats X515m": ["HTC", "EVO 3D"],
		"Evo 3D GSM": ["HTC", "EVO 3D"],
		"EVO 3D X515m": ["HTC", "EVO 3D"],
		"EVO3D X515m": ["HTC", "EVO 3D"],
		"Evo 4G": ["HTC", "EVO 4G"],
		"EVO 4G": ["HTC", "EVO 4G"],
		"photon": ["HTC", "HD mini"],
		"GinDream\/GinMagic": ["HTC", "Dream"],
		"HD2": ["HTC", "HD2"],
		"HD7  Pro": ["HTC", "HD7 Pro"],
		"Hero": ["HTC", "Hero"],
		"HERO CDMA": ["HTC", "Hero"],
		"HERO200": ["HTC", "Hero 200"],
		"Incredible": ["HTC", "Droid Incredible"],
		"Incredible 2": ["HTC", "Droid Incredible 2"],
		"Incredible S": ["HTC", "Incredible S"],
		"IncredibleS S710e": ["HTC", "Incredible S"],
		"IncredibleS": ["HTC", "Incredible S"],
		"Inspire HD": ["HTC", "Inspire 4G"],
		"Inspire 4G": ["HTC", "Inspire 4G"],
		"Legend": ["HTC", "Legend"],
		"NexusHD2": ["HTC", "HD2"],
		"Nexus HD2": ["HTC", "HD2"],
		"Docomo HT-03A": ["HTC", "Magic"],
		"MIUI.us Sensation 4G": ["HTC", "Sensation 4G"],
		"SiRF Dream": ["HTC", "Dream"],
		"Pyramid": ["HTC", "Sensation"],
		"Sensation": ["HTC", "Sensation"],
		"Sensation Z710e": ["HTC", "Sensation"],
		"Sensation 4G": ["HTC", "Sensation"],
		"Sensation 4g": ["HTC", "Sensation"],
		"TripNiCE Pyramid": ["HTC", "Sensation"],
		"SensationXE Beats Z715e": ["HTC", "Sensation XE"],
		"SensationXL Beats X315e": ["HTC", "Sensation XL"],
		"Click": ["HTC", "Tattoo"],
		"Wildfire": ["HTC", "Wildfire"],
		"Wildfire S": ["HTC", "Wildfire S"],
		"Wildfire S A510e": ["HTC", "Wildfire S"],
		"Sprint APX515CKT": ["HTC", "EVO 3D"],
		"Sprint APA9292KT": ["HTC", "EVO 4G"],
		"Sprint APA7373KT": ["HTC", "EVO Shift 4G"],
		"Sprint APC715CKT": ["HTC", "EVO Design 4G"],
		"A3380": ["HTC", "Wildfire"],
		"A6277": ["HTC", "Hero"],
		"a7272": ["HTC", "Desire Z"],
		"A7272+(HTC DesireZ)": ["HTC", "Desire Z"],
		"S31HT": ["HTC", "Aria"],
		"S710d": ["HTC", "Droid Incredible 2"],
		"S710D": ["HTC", "Droid Incredible 2"],
		"X06HT": ["HTC", "Desire"],
		"001HT": ["HTC", "Desire HD"],
		"X325a": ["HTC", "One X"],
		"Z520m": ["HTC", "One S"],
		"Z710": ["HTC", "Sensation"],
		"Z710e": ["HTC", "Sensation"],
		"T9199h": ["HTC", "T9199h"],
		"HTC S610d": ["HTC", "S610d"],
		"ADR6200": ["HTC", "Droid Eris"],
		"ADR6300": ["HTC", "Droid Incredible"],
		"ADR6325VW": ["HTC", "Merge"],
		"ADR6330VW": ["HTC", "Rhyme"],
		"ADR6350": ["HTC", "Droid Incredible 2"],
		"ADR6400L": ["HTC", "Thunderbolt 4G"],
		"ADR6400L 4G": ["HTC", "Thunderbolt 4G"],
		"ADR6410LVW 4G": ["HTC", "Fireball"],
		"ADR6425LVW": ["HTC", "Rezound"],
		"ADR6425LVW 4G": ["HTC", "Rezound"],
		"Coquettish Red": ["HTC", "Rezound"],
		"PB99400": ["HTC", "Droid Incredible"],
		"pcdadr6350": ["HTC", "Droid Incredible 2"],
		"PC36100": ["HTC", "EVO 4G"],
		"PG06100": ["HTC", "EVO Shift 4G"],
		"PG41200": ["HTC", "EVO View 4G", "tablet"],
		"PG86100": ["HTC", "EVO 3D"],
		"PG8610000": ["HTC", "EVO 3D"],
		"PH44100": ["HTC", "EVO Design 4G"],
		"PJ83100": ["HTC", "One X"],
		"ISW11HT": ["HTC", "EVO 4G"],
		"ISW12HT": ["HTC", "EVO 3D"],
		"ISW13HT": ["HTC", "J"],
		"USCCADR6275US Carrier ID 45": ["HTC", "Desire"],
		"USCCADR6285US": ["HTC", "Hero S"],
		"USCCADR6325US Carrier ID 45": ["HTC", "Merge"],
		"MediaPad": ["Huawei", "MediaPad", "tablet"],
		"Huawei MediaPad": ["Huawei", "MediaPad", "tablet"],
		"HUAWEI MediaPad": ["Huawei", "MediaPad", "tablet"],
		"Huawei S7-312u": ["Huawei", "MediaPad", "tablet"],
		"MediaPad 10 FHD": ["Huawei", "MediaPad", "tablet"],
		"Huawei C8500": ["Huawei", "C8500"],
		"Huawei C8500S": ["Huawei", "C8500"],
		"Huawei C8600": ["Huawei", "C8600"],
		"Huawei C8650": ["Huawei", "C8650"],
		"Huawei C8650+": ["Huawei", "C8650"],
		"Huawei C8800": ["Huawei", "IDEOS X5"],
		"Huawei C8810": ["Huawei", "Ascend G300"],
		"Huawei C8812": ["Huawei", "Ascend C8812"],
		"Huawei C8812E": ["Huawei", "Ascend C8812"],
		"Huawei C8825D": ["Huawei", "Ascend C8825D"],
		"Huawei C8860E": ["Huawei", "Honor"],
		"Huawei M835": ["Huawei", "M835"],
		"Huawei M860": ["Huawei", "Ascend"],
		"Huawei M921": ["Huawei", "M921"],
		"Huawei S8520": ["Huawei", "S8520"],
		"Huawei S8600": ["Huawei", "S8600"],
		"Huawei T8300": ["Huawei", "T8300"],
		"Huawei T8600": ["Huawei", "T8600"],
		"Huawei T8830": ["Huawei", "T8830"],
		"T8830": ["Huawei", "T8830"],
		"T8620": ["Huawei", "T8620"],
		"Huawei T8828": ["Huawei", "T8828"],
		"Huawei U8220": ["Huawei", "U8220"],
		"Huawei u8500": ["Huawei", "IDEOS X2"],
		"Huawei U8815": ["Huawei", "Ascend G300"],
		"Huawei U8825D": ["Huawei", "Ascend G330D"],
		"Huawei U8850": ["Huawei", "Vision"],
		"Huawei U8652": ["Huawei", "Sonic"],
		"Huawei U8800-51": ["Huawei", "IDEOS X5"],
		"Huawei U8818": ["Huawei", "Ascend G300"],
		"Huawei U9000": ["Huawei", "Ascend X"],
		"Huawei IDEOS U8500": ["Huawei", "IDEOS X2"],
		"Huawei IDEOS U8650": ["Huawei", "Sonic"],
		"Huawei IDEOS X3": ["Huawei", "IDEOS X3"],
		"Huawei Ideos X5": ["Huawei", "IDEOS X5"],
		"Huawei Ideos X5 1.12.9(ret4rt)": ["Huawei", "IDEOS X5"],
		"Huawei SONIC": ["Huawei", "Sonic"],
		"Huawei 8100-9": ["Huawei", "U8100"],
		"FUSIONideos": ["Huawei", "IDEOS"],
		"Gnappo Ideos": ["Huawei", "IDEOS"],
		"Ideos": ["Huawei", "IDEOS"],
		"IDEOS X5": ["Huawei", "IDEOS X5"],
		"Ideos S7": ["Huawei", "IDEOS S7", "tablet"],
		"IDEOS S7": ["Huawei", "IDEOS S7", "tablet"],
		"IDEOS S7 Slim": ["Huawei", "IDEOS S7", "tablet"],
		"Huawei S7": ["Huawei", "IDEOS S7", "tablet"],
		"SONIC": ["Huawei", "Sonic"],
		"Kyivstar Aqua": ["Huawei", "Sonic"],
		"Lucky Ultra Sonic U8650": ["Huawei", "Sonic"],
		"Turkcell T20": ["Huawei", "Sonic"],
		"MTC 950": ["Huawei", "U8160"],
		"MTC 955": ["Huawei", "Sonic"],
		"MTC Evo": ["Huawei", "C8500"],
		"MTC Android": ["Huawei", "U8110"],
		"S31HW": ["Huawei", "Pocket WiFi S"],
		"S41HW": ["Huawei", "Pocket WiFi S II"],
		"007HW": ["Huawei", "Vision"],
		"UM840": ["Huawei", "Evolution"],
		"M860": ["Huawei", "Ascend"],
		"M865": ["Huawei", "Ascend II"],
		"M886": ["Huawei", "Glory"],
		"C8150": ["Huawei", "IDEOS"],
		"c8500": ["Huawei", "C8500"],
		"C8500": ["Huawei", "C8500"],
		"C8500S": ["Huawei", "C8500"],
		"C8600": ["Huawei", "C8600"],
		"c8650": ["Huawei", "C8650"],
		"C8650": ["Huawei", "C8650"],
		"c8800": ["Huawei", "C8800"],
		"C8800": ["Huawei", "C8800"],
		"c8810": ["Huawei", "Ascend G300C"],
		"C8812": ["Huawei", "Ascend C8812"],
		"S8600": ["Huawei", "S8600"],
		"U8100": ["Huawei", "U8100"],
		"U8110": ["Huawei", "U8110"],
		"u8120": ["Huawei", "U8120"],
		"U8120": ["Huawei", "U8120"],
		"U8180": ["Huawei", "IDEOS X1"],
		"U8220": ["Huawei", "Pulse"],
		"U8300": ["Huawei", "U8300"],
		"U8350": ["Huawei", "Boulder"],
		"U8150": ["Huawei", "IDEOS"],
		"U8160": ["Huawei", "U8160"],
		"U8500": ["Huawei", "IDEOS X2"],
		"U8500 HiQQ": ["Huawei", "U8500 HiQQ Edition"],
		"U8510": ["Huawei", "IDEOS X3"],
		"u8650": ["Huawei", "Sonic"],
		"U8650": ["Huawei", "Sonic"],
		"U8650-1": ["Huawei", "Sonic"],
		"U8660": ["Huawei", "Sonic"],
		"u8800": ["Huawei", "IDEOS X5"],
		"U8800": ["Huawei", "IDEOS X5"],
		"U8800+": ["Huawei", "IDEOS X5"],
		"U8800X": ["Huawei", "IDEOS X5"],
		"U8800pro": ["Huawei", "IDEOS X5 Pro"],
		"U8800PRO": ["Huawei", "IDEOS X5 Pro"],
		"U8800Pro": ["Huawei", "IDEOS X5 Pro"],
		"u8800pro": ["Huawei", "IDEOS X5 Pro"],
		"U8800 Pro": ["Huawei", "IDEOS X5 Pro"],
		"U8818": ["Huawei", "Ascend G300"],
		"U8850": ["Huawei", "Vision"],
		"u8860": ["Huawei", "Honor"],
		"U8860": ["Huawei", "Honor"],
		"U9000": ["Huawei", "Ascend X"],
		"U9200": ["Huawei", "Ascend P1"],
		"U9200-1": ["Huawei", "Ascend P1"],
		"U9500": ["Huawei", "Ascend D1"],
		"U9501L": ["Huawei", "Ascend D LTE"],
		"U9510": ["Huawei", "Ascend D quad"],
		"U9510E": ["Huawei", "Ascend D quad"],
		"Comet": ["Huawei", "Comet"],
		"GS02": ["Huawei", "Honor"],
		"GS03": ["Huawei", "Ascend P1"],
		"DroniX-0.5": ["Huawei", "U8180"],
		"MTS-SP101": ["Huawei", "C8511"],
		"TSP21": ["Huawei", "U8110"],
		"HYUNDAI H6": ["Hyundai", "Storm H6"],
		"iBall Slide i7011": ["iBall", "Slide i7011"],
		"NetTAB RUNE": ["IconBit", "NetTab Rune", "tablet"],
		"D70W": ["Icoo", "D70W", "tablet"],
		"D80": ["Icoo", "D80", "tablet"],
		"INFOBAR A01": ["iida", "INFOBAR A01"],
		"M009F": ["Infotmic", "M009F"],
		"AZ210A": ["Intel", "AZ210A"],
		"AZ210B": ["Intel", "AZ210B"],
		"AZ510": ["Intel", "AZ510"],
		"greenridge": ["Intel", "Green Ridge", "tablet"],
		"INQ Cloud Touch": ["INQ", "Cloud Touch"],
		"ILT-MX100": ["iRiver", "Tab", "tablet"],
		"IVIO_DE38": ["Ivio", "DE38"],
		"JY-G2": ["Jiayu", "G2"],
		"JXD S601WIFI": ["JXD", "S601 WIFI", "media"],
		"A2": ["KakaTech", "A2"],
		"D91": ["KK", "D91", "tablet"],
		"K080": ["Kobo", "K080", "ereader"],
		"A106": ["koobee", "A160"],
		"KPT A9": ["KPT", "A9"],
		"EV-S100": ["Kttech", "Take EV-S100"],
		"KM-S120": ["Kttech", "Take 2 KM-S120"],
		"KM-S200": ["TAKE", "Janus KM-S200"],
		"KM-S220": ["Kttech", "Take Tachy KM-S220"],
		"Kyobo mirasol eReader": ["Kyobo", "eReader", "ereader"],
		"ISW11K": ["Kyocera", "Digno"],
		"JC-KSP8000": ["Kyocera", "Echo"],
		"KSP8000": ["Kyocera", "Echo"],
		"Zio": ["Kyocera", "Zio"],
		"C5155": ["Kyocera", "C5155"],
		"C5170": ["Kyocera", "C5170"],
		"M9300": ["Kyocera", "M9300"],
		"E800": ["K-Touch", "E800"],
		"W606": ["K-Touch", "W606"],
		"K-Touch T619": ["K-Touch", "T619"],
		"K-Touch W619": ["K-Touch", "W619"],
		"K-Touch W650": ["K-Touch", "W650"],
		"W700": ["K-Touch", "W700"],
		"W800": ["K-Touch", "W800"],
		"W806": ["K-Touch", "W806"],
		"W808": ["K-Touch", "W808"],
		"W810": ["K-Touch", "W810"],
		"X900": ["Lava", "XOLO X900"],
		"Lenovo A798t": ["Lenovo", "A798t"],
		"LENOVO-Lenovo-A288t": ["Lenovo", "LePhone A288"],
		"ThinkPad Tablet": ["Lenovo", "ThinkPad Tablet", "tablet"],
		"K1": ["Lenovo", "IdeaPad K1", "tablet"],
		"Ideapad S10-3T": ["Lenovo", "IdeaPad S10-3T", "tablet"],
		"S2005A-H": ["Lenovo", "S2005A"],
		"IdeaTab S2007A-D": ["Lenovo", "IdeaTab S2007A", "tablet"],
		"IdeaTabV2007A": ["Lenovo", "IdeaTab V2007A", "tablet"],
		"IdeaTabV2007A-D-I": ["Lenovo", "IdeaTab V2007A", "tablet"],
		"IdeaTabV2010A": ["Lenovo", "IdeaTab V2010A", "tablet"],
		"IdeaTab A2107A-H": ["Lenovo", "IdeaTab V2107A", "tablet"],
		"A1 07": ["Lenovo", "LePad", "tablet"],
		"lepad 001b": ["Lenovo", "LePad", "tablet"],
		"lepad 001n": ["Lenovo", "LePad", "tablet"],
		"3GC101": ["Lenovo", "LePhone 3GC101"],
		"Lenovo 3GC101": ["Lenovo", "LePhone 3GC101"],
		"3GW100": ["Lenovo", "LePhone 3GW100"],
		"Lenovo 3GW100": ["Lenovo", "LePhone 3GW100"],
		"3GW101": ["Lenovo", "LePhone 3GW101"],
		"Lenovo 3GW101": ["Lenovo", "LePhone 3GW101"],
		"Lephone 3GW101": ["Lenovo", "LePhone 3GW101"],
		"Lenovo A1-32AB0": ["Lenovo", "LePhone A1-32AB0"],
		"Lenovo S1-37AH0": ["Lenovo", "LePhone S1-37AH0"],
		"S1 37AHO": ["Lenovo", "LePhone S1-37AH0"],
		"Lenovo S2-38AH0": ["Lenovo", "LePhone S2-38AH0"],
		"Lenovo S2-38AT0": ["Lenovo", "LePhone S2-38AT0"],
		"Lenovo A288t": ["Lenovo", "LePhone A288"],
		"Lenovo A366t": ["Lenovo", "LePhone A366"],
		"Lenovo A390e": ["Lenovo", "LePhone A390"],
		"Lenovo A500": ["Lenovo", "LePhone A500"],
		"Lenovo A520": ["Lenovo", "LePhone A520"],
		"Lenovo A560e": ["Lenovo", "A560"],
		"Lenovo A668t": ["Lenovo", "LePhone A668"],
		"Lenovo A698t": ["Lenovo", "LePhone A698"],
		"Lenovo A750": ["Lenovo", "LePhone A750"],
		"Lenovo A780": ["Lenovo", "LePhone A780"],
		"Lenovo A789": ["Lenovo", "LePhone A789"],
		"Lenovo A790e": ["Lenovo", "LePhone A790"],
		"Lenovo P70": ["Lenovo", "LePhone P70"],
		"Lenovo P700": ["Lenovo", "LePhone P700"],
		"Lenovo S850e": ["Lenovo", "S850"],
		"Lenovo S880": ["Lenovo", "S880"],
		"Lenovo K860": ["Lenovo", "K860"],
		"A30t": ["Lenovo", "A30t"],
		"Lenovo A60": ["Lenovo", "A60"],
		"Lenovo A65": ["Lenovo", "A65"],
		"Lenovo A66t": ["Lenovo", "A66t"],
		"Lenovo A68e": ["Lenovo", "A68e"],
		"Lenovo K800": ["Lenovo", "K800"],
		"IDEA TV T100": ["Lenovo", "IDEA TV", "television"],
		"IDEA TV K91": ["Lenovo", "IDEA TV", "television"],
		"TC970": ["Le Pan", "TC970", "tablet"],
		"LePanII": ["Le Pan", "II", "tablet"],
		"LG-C555": ["LG", "Optimus Chat"],
		"LG-C555-parrot": ["LG", "Optimus Chat"],
		"LG-C660h": ["LG", "Optimus Pro"],
		"LG-C729": ["LG", "DoublePlay"],
		"LG-C800G": ["LG", "Eclypse"],
		"LG-CX670": ["LG", "Optimus 3G"],
		"LG-E400": ["LG", "Optimus L3"],
		"LG-E400f": ["LG", "Optimus L3"],
		"LG-E510": ["LG", "Optimus Hub"],
		"LG-E510f": ["LG", "Optimus Hub"],
		"LG-E510g": ["LG", "Optimus Hub"],
		"LG-E610": ["LG", "Optimus L5"],
		"LG-E612": ["LG", "Optimus L5"],
		"LG-E612g": ["LG", "Optimus L5"],
		"LG-E615F": ["LG", "E615"],
		"LG-E617G": ["LG", "E617"],
		"LG-E720": ["LG", "Optimus Chic"],
		"LG-E720b": ["LG", "Optimus Chic"],
		"LG-E730": ["LG", "Optimus Sol"],
		"LG-E970": ["LG", "Shine"],
		"LG-F100L": ["LG", "Optimus Vu"],
		"LG-F100S": ["LG", "Optimus Vu"],
		"LG-F120K": ["LG", "Optimus LTE Tag"],
		"LG-F120L": ["LG", "Optimus LTE Tag"],
		"LG-F120S": ["LG", "Optimus LTE Tag"],
		"LG-F160K": ["LG", "Optimus LTE II"],
		"LG-F160L": ["LG", "Optimus LTE II"],
		"LG-F160S": ["LG", "Optimus LTE II"],
		"LG-F180L": ["LG", "F180L"],
		"LG-GT540": ["LG", "Optimus"],
		"LG-GT540f": ["LG", "Optimus"],
		"LG-GT540 Swift": ["LG", "Optimus"],
		"LG-GW620": ["LG", "GW620"],
		"LG-KH5200": ["LG", "Andro-1"],
		"LG-KU3700": ["LG", "Optimus One"],
		"LG-KU5400": ["LG", "PRADA 3.0"],
		"LG-KU5900": ["LG", "Optimus Black"],
		"LG-L40G": ["LG", "L40G"],
		"LG-LG855": ["LG", "Marquee"],
		"LG-LS670": ["LG", "Optimus S"],
		"LG-LS696": ["LG", "Optimus Elite"],
		"LG-LS840": ["LG", "Viper 4G"],
		"LG-LS855": ["LG", "Marquee"],
		"LG-LS860": ["LG", "\"Cayenne\""],
		"LG-LS970": ["LG", "\"Eclipse\""],
		"LG-LU3000": ["LG", "Optimus Mach"],
		"LG-LU3100": ["LG", "Optimus Chic"],
		"LG-LU3700": ["LG", "Optimus One"],
		"LG-LU5400": ["LG", "PRADA 3.0"],
		"LG-LU6200": ["LG", "Optimus Q2"],
		"LG-lu6200": ["LG", "Optimus Q2"],
		"LG-LU6500": ["LG", "Optimus Note"],
		"LG-LU6800": ["LG", "Optimus Big"],
		"LG-LU8300": ["LG", "Optimus Pad LTE"],
		"LG-LW690": ["LG", "Optimus C"],
		"LG-LW770": ["LG", "LW770"],
		"LG-MS690": ["LG", "Optimus M"],
		"LG-MS770": ["LG", "MS770"],
		"LG-MS840": ["LG", "Connect 4G"],
		"LG-MS910": ["LG", "Esteem"],
		"LG-MS695": ["LG", "Optimus M+"],
		"LG P350": ["LG", "Optimus Me"],
		"LG-P350": ["LG", "Optimus Me"],
		"LG-P350f": ["LG", "Optimus Me"],
		"LG-P350g": ["LG", "Optimus Me"],
		"LG-P355": ["LG", "P355"],
		"LG-P500": ["LG", "Optimus One"],
		"LG-P500h": ["LG", "Optimus One"],
		"LG-P500h-parrot": ["LG", "Optimus One"],
		"LG-P503": ["LG", "Optimus One"],
		"LG-P504": ["LG", "Optimus One"],
		"LG-P505": ["LG", "Phoenix"],
		"LG-P505R": ["LG", "Phoenix"],
		"LG-P506": ["LG", "Thrive"],
		"LG-P509": ["LG", "Optimus T"],
		"LG-P690": ["LG", "Optimus Net"],
		"LG-P693": ["LG", "P693"],
		"LG-P698": ["LG", "Optimus Net"],
		"LG-P698f": ["LG", "Optimus Net"],
		"LG-P700": ["LG", "Optimus L7"],
		"LG-P705": ["LG", "Optimus L7"],
		"LG-P705f": ["LG", "Optimus L7"],
		"LG-P705g": ["LG", "Optimus L7"],
		"LG-P708g": ["LG", "P708"],
		"LG-P720": ["LG", "Optimus Chic"],
		"LG-P720h": ["LG", "Optimus Chic"],
		"LG-P725": ["LG", "Optimus 3D Max"],
		"LG-P760": ["LG", "P760"],
		"LG-P769": ["LG", "P769"],
		"LG-P860": ["LG", "P860"],
		"LG-P870": ["LG", "P870"],
		"LG-P870F": ["LG", "P870"],
		"LG-P880": ["LG", "X3"],
		"LG-P880g": ["LG", "X3"],
		"LG-P895": ["LG", "P895"],
		"LG-P920": ["LG", "Optimus 3D"],
		"LG-P920h": ["LG", "Optimus 3D"],
		"LG-P925": ["LG", "Thrill"],
		"LG-P925g": ["LG", "Thrill"],
		"LG-P930": ["LG", "Nitro HD"],
		"LG-P936": ["LG", "Optimus LTE"],
		"LG-P940": ["LG", "PRADA 3.0"],
		"LG-P970": ["LG", "Optimus Black"],
		"LG-P970h": ["LG", "Optimus Black"],
		"LG-P990": ["LG", "Optimus 2X Speed"],
		"LG-P990h": ["LG", "Optimus 2X Speed"],
		"LG-P990hN": ["LG", "Optimus 2X Speed"],
		"LG-P990H": ["LG", "Optimus 2X Speed"],
		"LG-P993": ["LG", "Optimus 2X"],
		"LG-SU540": ["LG", "PRADA 3.0"],
		"LG-SU640": ["LG", "Optimus LTE"],
		"LG-SU660": ["LG", "Optimus 2X"],
		"LG-SU760": ["LG", "Optimus 3D"],
		"LG-SU760-Kust": ["LG", "Optimus 3D"],
		"LG-SU870": ["LG", "Optimus 3D Cube"],
		"LG-SU880": ["LG", "Optimus EX"],
		"LG-US670": ["LG", "Optimus U"],
		"LG-US730": ["LG", "US730"],
		"LG-V900": ["LG", "Optimus Pad", "tablet"],
		"LG-V905R": ["LG", "Optimus G-Slate", "tablet"],
		"LG-V909": ["LG", "Optimus G-Slate", "tablet"],
		"LG-VM670": ["LG", "Optimus V"],
		"LG-VM696": ["LG", "Optimus Elite"],
		"LG-VM701": ["LG", "Optimus Slider"],
		"LG-VS660": ["LG", "Vortex"],
		"LG-VS700": ["LG", "Enlighten"],
		"LG-VS740": ["LG", "Ally"],
		"LG-VS840": ["LG", "Connect 4G"],
		"LG-VS910": ["LG", "Revolution"],
		"lgp-970": ["LG", "Optimus Black"],
		"E900": ["LG", "Optimus 7"],
		"GT540": ["LG", "Optimus GT540"],
		"GW620": ["LG", "GW620"],
		"KU9500": ["LG", "Optimus Z"],
		"LGC660": ["LG", "Optimus Pro"],
		"LGL45C": ["LG", "Optimus Net"],
		"LGL55C": ["LG", "Optimus Q"],
		"LU2300": ["LG", "Optimus Q"],
		"LS670": ["LG", "Optimus S"],
		"P940": ["LG", "PRADA 3.0"],
		"P990": ["LG", "Optimus 2X Speed"],
		"USCC-US730": ["LG", "US730"],
		"USCC-US760": ["LG", "Genesis"],
		"VM670": ["LG", "Optimus V"],
		"VS840 4G": ["LG", "Connect 4G"],
		"VS900-4G": ["LG", "VS900"],
		"VS910 4G": ["LG", "Revolution 4G"],
		"VS920 4G": ["LG", "Spectrum 4G"],
		"VS930 4G": ["LG", "VS930"],
		"VS950 4G": ["LG", "VS950"],
		"L-01D": ["LG", "Optimus LTE"],
		"L-02D": ["LG", "PRADA phone"],
		"L-04C": ["LG", "Optimus Chat"],
		"L-05D": ["LG", "Optimus it"],
		"L-06C": ["LG", "Optimus Pad", "tablet"],
		"L-06D": ["LG", "Optimus Vu"],
		"L-07C": ["LG", "Optimus Bright"],
		"LG-Eve": ["LG", "Eve"],
		"LG-Optimus One P500": ["LG", "Optimus One"],
		"LG-Optimus 2X": ["LG", "Optimus 2X"],
		"LG-GT540 Optimus": ["LG", "Optimus"],
		"LG-Optimus Black": ["LG", "Optimus Black"],
		"Ally": ["LG", "Ally"],
		"Optimus": ["LG", "Optimus"],
		"Optimus Me": ["LG", "Optimus Me"],
		"optimus me p350": ["LG", "Optimus Me"],
		"Optimus 2X": ["LG", "Optimus 2X"],
		"Optimus 2x": ["LG", "Optimus 2X"],
		"IS11LG": ["LG", "Optimus X"],
		"Vortex": ["LG", "Vortex"],
		"LDK-ICK v1.4": ["LG", "Esteem"],
		"T6": ["Malata", "Zpad T6", "tablet"],
		"Malata SMBA1002": ["Malata", "Tablet SMB-A1002", "tablet"],
		"STM712HCZ": ["Mediacom", "SmartPad 712c", "tablet"],
		"STM803HC": ["Mediacom", "SmartPad 810c", "tablet"],
		"Mediacom 810C": ["Mediacom", "SmartPad 810c", "tablet"],
		"Smartpad810c": ["Mediacom", "SmartPad 810c", "tablet"],
		"SmartPad810c": ["Mediacom", "SmartPad 810c", "tablet"],
		"MP810C": ["Mediacom", "SmartPad 810c", "tablet"],
		"MP907C": ["Mediacom", "SmartPad 907c", "tablet"],
		"MTK6516": ["Mediatek", "MTK6516"],
		"LIFETAB S9512": ["Medion", "Lifetab S9512", "tablet"],
		"LIFETAB P9514": ["Medion", "Lifetab P9514", "tablet"],
		"MD LIFETAB P9516": ["Medion", "Lifetab P9516", "tablet"],
		"MEDION LIFE P4310": ["Medion", "Life P4310"],
		"M8": ["Meizu", "M8"],
		"M9": ["Meizu", "M9"],
		"M040": ["Meizu", "M040"],
		"M9-unlocked": ["Meizu", "M9"],
		"meizu m9": ["Meizu", "M9"],
		"MEIZU M9": ["Meizu", "M9"],
		"MEIZU MX": ["Meizu", "MX"],
		"M030": ["Meizu", "MX M030"],
		"M031": ["Meizu", "MX M031"],
		"M032": ["Meizu", "MX M032"],
		"Slidepad": ["Memup", "Slidepad", "tablet"],
		"A45": ["Micromax", "A45 Punk"],
		"Micromax A50": ["Micromax", "A50 Ninja"],
		"Micromax A60": ["Micromax", "Andro A60"],
		"Micromax A70": ["Micromax", "Andro A70"],
		"P300(Funbook)": ["Micromax", "Funbook P300", "tablet"],
		"AT735": ["Moinstone", "AT735", "tablet"],
		"A853": ["Motorola", "Milestone"],
		"A953": ["Motorola", "Milestone 2"],
		"A1680": ["Motorola", "MOTO A1680"],
		"ET1": ["Motorola", "ET1 Enterprise Tablet", "tablet"],
		"MB200": ["Motorola", "CLIQ"],
		"MB300": ["Motorola", "BACKFLIP"],
		"MB501": ["Motorola", "CLIQ XT"],
		"MB502": ["Motorola", "CHARM"],
		"MB511": ["Motorola", "FLIPOUT"],
		"MB520": ["Motorola", "BRAVO"],
		"MB525": ["Motorola", "DEFY"],
		"MB525+": ["Motorola", "DEFY"],
		"MB525 for me": ["Motorola", "DEFY"],
		"MB526": ["Motorola", "DEFY+"],
		"MB611": ["Motorola", "CLIQ 2"],
		"MB612": ["Motorola", "XPRT"],
		"MB632": ["Motorola", "PRO+"],
		"MB855": ["Motorola", "PHOTON 4G"],
		"MB860": ["Motorola", "ATRIX"],
		"MB861": ["Motorola", "ATRIX"],
		"mb861": ["Motorola", "ATRIX"],
		"MB865": ["Motorola", "ATRIX 2"],
		"MB870": ["Motorola", "Droid X2"],
		"MB886": ["Motorola", "DINARA"],
		"ME501": ["Motorola", "CLIQ XT"],
		"ME511": ["Motorola", "FLIPOUT"],
		"me525": ["Motorola", "MOTO ME525"],
		"Me525": ["Motorola", "MOTO ME525"],
		"ME525": ["Motorola", "MOTO ME525"],
		"ME525+": ["Motorola", "MOTO ME525"],
		"ME600": ["Motorola", "BACKFLIP"],
		"ME632": ["Motorola", "PRO+"],
		"ME722": ["Motorola", "Milestone 2"],
		"ME811": ["Motorola", "Droid X"],
		"ME860": ["Motorola", "ATRIX"],
		"ME863": ["Motorola", "Milestone 3"],
		"ME865": ["Motorola", "ATRIX 2"],
		"MT620": ["Motorola", "MOTO MT620"],
		"MT620t": ["Motorola", "MOTO MT620"],
		"MT716": ["Motorola", "MOTO MT716"],
		"MT810": ["Motorola", "MOTO MT810"],
		"MT870": ["Motorola", "MOTO MT870"],
		"MT917": ["Motorola", "MT917"],
		"MZ505": ["Motorola", "XOOM Family Edition", "tablet"],
		"MZ600": ["Motorola", "XOOM 4G LTE", "tablet"],
		"MZ601": ["Motorola", "XOOM 3G", "tablet"],
		"MZ602": ["Motorola", "XOOM 4G LTE", "tablet"],
		"MZ603": ["Motorola", "XOOM 3G", "tablet"],
		"MZ604": ["Motorola", "XOOM WiFi", "tablet"],
		"MZ605": ["Motorola", "XOOM 3G", "tablet"],
		"MZ606": ["Motorola", "XOOM WiFi", "tablet"],
		"MZ607": ["Motorola", "XOOM 2 WiFi Media Edition", "tablet"],
		"MZ609": ["Motorola", "Droid XYBOARD 8.2", "tablet"],
		"MZ609 4G": ["Motorola", "Droid XYBOARD 8.2", "tablet"],
		"MZ615": ["Motorola", "XOOM 2 WiFi", "tablet"],
		"MZ617": ["Motorola", "Droid XYBOARD 10.1", "tablet"],
		"MZ617 4G": ["Motorola", "Droid XYBOARD 10.1", "tablet"],
		"WX435": ["Motorola", "TRIUMPH WX435"],
		"WX445": ["Motorola", "CITRUS WX445"],
		"XT300": ["Motorola", "SPICE"],
		"XT301": ["Motorola", "MOTO XT301"],
		"XT311": ["Motorola", "FIRE"],
		"XT316": ["Motorola", "MOTO XT316"],
		"XT319": ["Motorola", "MOTO XT319"],
		"XT390": ["Motorola", "MOTO XT390"],
		"XT320": ["Motorola", "DEFY Mini"],
		"XT321": ["Motorola", "DEFY Mini"],
		"XT500": ["Motorola", "MOTO XT500"],
		"xt-500": ["Motorola", "MOTO XT500"],
		"XT502": ["Motorola", "QUENCH XT5"],
		"XT530": ["Motorola", "FIRE XT"],
		"XT531": ["Motorola", "FIRE XT"],
		"XT532": ["Motorola", "XT532"],
		"XT535": ["Motorola", "DEFY"],
		"XT550": ["Motorola", "XT550"],
		"XT556": ["Motorola", "XT556"],
		"XT603": ["Motorola", "ADMIRAL"],
		"XT610": ["Motorola", "Droid Pro"],
		"XT615": ["Motorola", "MOTO XT615"],
		"XT626": ["Motorola", "MOTO XT626"],
		"XT681": ["Motorola", "MOTO XT681"],
		"XT682": ["Motorola", "Droid 3"],
		"XT685": ["Motorola", "MOTO XT685"],
		"XT687": ["Motorola", "ATRIX TV"],
		"XT701": ["Motorola", "XT701"],
		"XT702": ["Motorola", "MOTO XT702"],
		"XT711": ["Motorola", "MOTO XT711"],
		"XT720": ["Motorola", "Milestone"],
		"XT875": ["Motorola", "Droid Bionic"],
		"XT800": ["Motorola", "MOTO XT800"],
		"XT800+": ["Motorola", "MOTO XT800"],
		"XT800W": ["Motorola", "MOTO Glam"],
		"XT806": ["Motorola", "MOTO XT806"],
		"XT860": ["Motorola", "Milestone 3"],
		"XT862": ["Motorola", "Droid 3"],
		"XT882": ["Motorola", "MOTO XT882"],
		"XT883": ["Motorola", "Milestone 3"],
		"XT889": ["Motorola", "XT889"],
		"XT897": ["Motorola", "Droid 4"],
		"XT901": ["Motorola", "RAZR"],
		"XT910": ["Motorola", "RAZR"],
		"XT910K": ["Motorola", "RAZR"],
		"XT910S": ["Motorola", "RAZR"],
		"XT910 4G": ["Motorola", "RAZR"],
		"XT912": ["Motorola", "Droid RAZR"],
		"XT923": ["Motorola", "Droid RAZR HD"],
		"XT925": ["Motorola", "Droid RAZR HD"],
		"XT926": ["Motorola", "Droid RAZR"],
		"XT926 4G": ["Motorola", "Droid RAZR"],
		"XT928": ["Motorola", "XT928"],
		"Atrix 2": ["Motorola", "ATRIX 2"],
		"Atrix 4g": ["Motorola", "ATRIX 4G"],
		"Atrix 4G": ["Motorola", "ATRIX 4G"],
		"Atrix 4G ME860": ["Motorola", "ATRIX 4G"],
		"CLIQ": ["Motorola", "CLIQ"],
		"CLIQ XT": ["Motorola", "CLIQ XT"],
		"CLIQ2": ["Motorola", "CLIQ 2"],
		"Corvair": ["Motorola", "Corvair", "tablet"],
		"DEFY": ["Motorola", "DEFY"],
		"Defy+": ["Motorola", "DEFY+"],
		"Defy Plus": ["Motorola", "DEFY+"],
		"Devour": ["Motorola", "Devour"],
		"Dext": ["Motorola", "Dext"],
		"Droid": ["Motorola", "Droid"],
		"DROID": ["Motorola", "Droid"],
		"DROID2": ["Motorola", "Droid 2"],
		"DROID2 GLOBAL": ["Motorola", "Droid 2"],
		"DROID2 Global": ["Motorola", "Droid 2"],
		"Droid2Global": ["Motorola", "Droid 2"],
		"DROID 2": ["Motorola", "Droid 2"],
		"DROID3": ["Motorola", "Droid 3"],
		"DROID4": ["Motorola", "Droid 4"],
		"DROID4 4G": ["Motorola", "Droid 4"],
		"DROID Pro": ["Motorola", "Droid Pro"],
		"DROID BIONIC": ["Motorola", "Droid Bionic"],
		"DROID BIONIC 4G": ["Motorola", "Droid Bionic"],
		"DROID BIONIC XT875 4G": ["Motorola", "Droid Bionic"],
		"DROIDRAZR": ["Motorola", "Droid RAZR"],
		"Droid Razr": ["Motorola", "Droid RAZR"],
		"DROID RAZR": ["Motorola", "Droid RAZR"],
		"DROID RAZR 4G": ["Motorola", "Droid RAZR"],
		"DROID SPYDER": ["Motorola", "Droid RAZR"],
		"DROID RAZR HD": ["Motorola", "Droid RAZR HD"],
		"DROID RAZR HD 4G": ["Motorola", "Droid RAZR HD"],
		"DroidX": ["Motorola", "Droid X"],
		"DROIDX": ["Motorola", "Droid X"],
		"droid x": ["Motorola", "Droid X"],
		"Droid X": ["Motorola", "Droid X"],
		"DROID X": ["Motorola", "Droid X"],
		"DROID X2": ["Motorola", "Droid X2"],
		"Electrify": ["Motorola", "Electrify"],
		"Milestone XT720": ["Motorola", "Milestone"],
		"Milestone Xt720": ["Motorola", "Milestone"],
		"Milestone": ["Motorola", "Milestone"],
		"A853 Milestone": ["Motorola", "Milestone"],
		"Milestone X": ["Motorola", "Milestone X"],
		"Milestone X2": ["Motorola", "Milestone X2"],
		"MotoroiX": ["Motorola", "Droid X"],
		"Moto Backflip": ["Motorola", "BACKFLIP"],
		"RAZR": ["Motorola", "RAZR"],
		"Triumph": ["Motorola", "TRIUMPH"],
		"Opus One": ["Motorola", "i1"],
		"Photon": ["Motorola", "PHOTON"],
		"Photon 4G": ["Motorola", "PHOTON 4G"],
		"XOOM": ["Motorola", "XOOM", "tablet"],
		"Xoom": ["Motorola", "XOOM", "tablet"],
		"XOOM 2": ["Motorola", "XOOM 2", "tablet"],
		"XOOM 2 ME": ["Motorola", "XOOM 2", "tablet"],
		"XOOM MZ606": ["Motorola", "XOOM WiFi", "tablet"],
		"ISW11M": ["Motorola", "PHOTON"],
		"IS12M": ["Motorola", "RAZR"],
		"MOTWX435KT": ["Motorola", "TRIUMPH"],
		"X3-Ice MIUI XT720 Memorila Classics": ["Motorola", "Milestone"],
		"NABI-A": ["Nabi", "Kids tablet", "tablet"],
		"Newpad": ["Newsmy", "Newpad", "tablet"],
		"Newpad-K97": ["Newsmy", "Newpad K97", "tablet"],
		"Newpad P9": ["Newsmy", "Newpad P9", "tablet"],
		"M-PAD N8": ["Newsmy", "M-pad N8", "tablet"],
		"LT-NA7": ["NEC", "LT-NA7"],
		"N-01D": ["NEC", "MEDIAS PP N-01D"],
		"N-04C": ["NEC", "MEDIAS N-04C"],
		"N-04D": ["NEC", "MEDIAS LTE N-04D"],
		"N-05D": ["NEC", "MEDIAS ES N-05D"],
		"N-06C": ["NEC", "MEDIAS WP N-06C"],
		"N-06D": ["NEC", "MEDIAS Tab N-06D", "tablet"],
		"N-07D": ["NEC", "MEDIAS X N-07D"],
		"101N": ["NEC", "MEDIAS CH Softbank 101N"],
		"IS11N": ["NEC", "MEDIAS BR IS11N"],
		"Nexian NX-A890": ["Nexian", "Journey"],
		"NX-A891": ["Nexian", "Ultra Journey"],
		"M726HC": ["Nextbook", "Premium 7", "ereader"],
		"NXM726HN": ["Nextbook", "Premium 7", "ereader"],
		"NXM803HD": ["Nextbook", "Premium 8", "ereader"],
		"DATAM803HC": ["Nextbook", "Premium 8", "ereader"],
		"NXM901": ["Nextbook", "Next 3", "ereader"],
		"NGM Vanity Smart": ["NGM", "Vanity Smart"],
		"Nokia N9": ["Nokia", "N9"],
		"Nokia N900": ["Nokia", "N900"],
		"Lumia800": ["Nokia", "Lumia 800"],
		"Lumia 900": ["Nokia", "Lumia 900"],
		"Notion Ink ADAM": ["Notion Ink", "ADAM", "tablet"],
		"P4D SIRIUS": ["Nvsbl", "P4D SIRIUS", "tablet"],
		"P4D Sirius": ["Nvsbl", "P4D SIRIUS", "tablet"],
		"EFM710A": ["Oblio", "Mint 7x", "tablet"],
		"ODYS-Xpress": ["Odys", "Xpress", "tablet"],
		"Olivetti Olipad 100": ["Olivetti", "Olipad 100", "tablet"],
		"OP110": ["Olivetti", "Olipad 110", "tablet"],
		"ONDA MID": ["Onda", "MID", "tablet"],
		"VX580A": ["Onda", "VX580A", "tablet"],
		"VX610A": ["Onda", "VX610A", "tablet"],
		"TQ150": ["Onda", "TQ150"],
		"N2T": ["ONN", "N2T", "tablet"],
		"Renesas": ["Opad", "Renesas", "tablet"],
		"renesas emev": ["Opad", "Renesas", "tablet"],
		"X903": ["Oppo", "Find Me X903"],
		"X905": ["Oppo", "Find 3 X905"],
		"R805": ["Oppo", "R805"],
		"R801": ["Oppo", "R801"],
		"R811": ["Oppo", "R811"],
		"X909": ["Oppo", "X909"],
		"OPPOR801": ["Oppo", "R801"],
		"OPPOX905": ["Oppo", "Find 3 X905"],
		"OPPOX907": ["Oppo", "Find 3 X907"],
		"X907": ["Oppo", "Find 3 X907"],
		"X9015": ["Oppo", "Find X9015"],
		"OPPOX9017": ["Oppo", "Finder X9017"],
		"OPPOU701": ["Oppo", "OPPOU701"],
		"OPPOR807": ["Oppo", "Real R807"],
		"OPPOR805": ["Oppo", "Real R805"],
		"R807": ["Oppo", "Real R807"],
		"OPPOT703": ["Oppo", "T703"],
		"P-01D": ["Panasonic", "P-01D"],
		"P-02D": ["Panasonic", "Lumix Phone"],
		"P-04D": ["Panasonic", "Eluga"],
		"P-07C": ["Panasonic", "P-07C"],
		"dL1": ["Panasonic", "Eluga dL1"],
		"101P": ["Panasonic", "Lumix Phone"],
		"JT-H580VT": ["Panasonic", "BizPad 7", "tablet"],
		"JT-H581VT": ["Panasonic", "BizPad 10", "tablet"],
		"FZ-A1A": ["Panasonic", "Toughpad", "tablet"],
		"pandigital9hr": ["Pandigital", "9HR", "tablet"],
		"pandigital9hr2": ["Pandigital", "9HR2", "tablet"],
		"pandigitalopc1": ["Pandigital", "OPC1", "tablet"],
		"pandigitalopp1": ["Pandigital", "OPP1", "tablet"],
		"pandigitalp1hr": ["Pandigital", "p1hr", "tablet"],
		"IM-A600S": ["Pantech", "SIRIUS \u00c3\ufffd\u00c2\u00b1"],
		"IM-A630K": ["Pantech", "SKY Izar"],
		"IM-A690L": ["Pantech", "SKY"],
		"IM-A690S": ["Pantech", "SKY"],
		"IM-A710K": ["Pantech", "SKY Vega Xpress"],
		"IM-A720L": ["Pantech", "SKY Vega Xpress"],
		"IM-A725L": ["Pantech", "SKY Vega X+"],
		"IM-A730s": ["Pantech", "SKY Vega S"],
		"IM-A730S": ["Pantech", "SKY Vega S"],
		"IM-A750K": ["Pantech", "SKY Mirach A"],
		"IM-A760S": ["Pantech", "SKY Vega Racer"],
		"IM-A770K": ["Pantech", "SKY Vega Racer"],
		"IM-A780L": ["Pantech", "SKY Vega Racer"],
		"IM-A800S": ["Pantech", "SKY Vega LTE"],
		"IM-A810K": ["Pantech", "SKY Vega LTE M"],
		"IM-A810S": ["Pantech", "SKY Vega LTE M"],
		"IM-A820L": ["Pantech", "SKY Vega LTE EX"],
		"IM-A830K": ["Pantech", "SKY Vega Racer 2"],
		"IM-A830L": ["Pantech", "SKY Vega Racer 2"],
		"IM-A830S": ["Pantech", "SKY Vega Racer 2"],
		"IM-A840S": ["Pantech", "SKY Vega S5"],
		"IM-A850K": ["Pantech", "IM-A850K"],
		"IM-T100K": ["Pantech", "SKY Vega No. 5", "tablet"],
		"IS06": ["Pantech", "SIRIUS \u00c3\ufffd\u00c2\u00b1"],
		"ADR8995": ["Pantech", "Breakout"],
		"ADR8995 4G": ["Pantech", "Breakout"],
		"ADR910L 4G": ["Pantech", "ADR910L"],
		"PantechP4100": ["Pantech", "Element", "tablet"],
		"PantechP8000": ["Pantech", "Crossover"],
		"PantechP8010": ["Pantech", "P8010"],
		"PantechP9060": ["Pantech", "Pocket"],
		"PantechP9070": ["Pantech", "Burst"],
		"SKY IM-A600S": ["Pantech", "SIRIUS \u00c3\ufffd\u00c2\u00b1"],
		"SKY IM-A630K": ["Pantech", "SKY Izar"],
		"SKY IM-A650S": ["Pantech", "SKY Vega"],
		"IS11PT": ["Pantech", "Mirach IS11PT"],
		"PAT712W": ["Perfeo", "PAT712W", "tablet"],
		"X7G": ["Pearl", "Touchlet X7G", "tablet"],
		"FWS810": ["PHICOMM", "FWS810"],
		"Philips PI5000": ["Philips", "PI5000", "tablet"],
		"PI7000": ["Philips", "PI7000", "tablet"],
		"Philips W626": ["Philips", "W626"],
		"Philips W632": ["Philips", "W632"],
		"MOMO": ["Ployer", "MOMO", "tablet"],
		"MOMO15": ["Ployer", "MOMO15", "tablet"],
		"PocketBook A7": ["PocketBook", "A7", "tablet"],
		"PocketBook A10": ["PocketBook", "A10", "tablet"],
		"Mobii 7": ["Point Of View", "Mobii 7", "tablet"],
		"PMP3384BRU": ["Prestigio", "Multipad 3384", "tablet"],
		"TB07FTA": ["Positivo", "TB07FTA", "tablet"],
		"QW TB-1207": ["Qware", "Pro3", "tablet"],
		"W6HD ICS": ["Ramos", "W6HD", "tablet"],
		"w10": ["Ramos", "W10", "tablet"],
		"W10": ["Ramos", "W10", "tablet"],
		"w10 v2.0": ["Ramos", "W10 v2.0", "tablet"],
		"W10 V2.0": ["Ramos", "W10 v2.0", "tablet"],
		"T11AD": ["Ramos", "T11AD", "tablet"],
		"T11AD.FE": ["Ramos", "T11AD", "tablet"],
		"PlayBook": ["RIM", "BlackBerry PlayBook", "tablet"],
		"RBK-490": ["Ritmix", "RBK-490", "tablet"],
		"A8HD": ["Saayi", "Dropad A8HD", "tablet"],
		"GT-S7568": ["Samsung", "S7568"],
		"Galaxy Nexus": ["Samsung", "Galaxy Nexus"],
		"GT-B5330": ["Samsung", "GT-B5330"],
		"GT-B5510": ["Samsung", "Galaxy Y Pro"],
		"GT-B5510B": ["Samsung", "Galaxy Y Pro"],
		"GT-B5510L": ["Samsung", "Galaxy Y Pro"],
		"GT-B5512": ["Samsung", "Galaxy Y Pro Duos"],
		"GT-B7510": ["Samsung", "Galaxy Pro"],
		"GT-B7510L": ["Samsung", "Galaxy Pro"],
		"GT-I5500": ["Samsung", "Galaxy 5"],
		"GT-I5500B": ["Samsung", "Galaxy 5"],
		"GT-I5500L": ["Samsung", "Galaxy 5"],
		"GT-I5500M": ["Samsung", "Galaxy 5"],
		"GT-I5500-MR3": ["Samsung", "Galaxy 5"],
		"GT-I5503": ["Samsung", "Galaxy 5"],
		"GT-I5508": ["Samsung", "Galaxy 5"],
		"GT-I5510": ["Samsung", "Galaxy 551"],
		"GT-I5510L": ["Samsung", "Galaxy 551"],
		"GT-I5510M": ["Samsung", "Galaxy 551"],
		"GT-I5510T": ["Samsung", "Galaxy 551"],
		"GT-I5700": ["Samsung", "Galaxy Spica"],
		"GT-I5700L": ["Samsung", "Galaxy Spica"],
		"GT-I5800": ["Samsung", "Galaxy Apollo"],
		"GT-I5800D": ["Samsung", "Galaxy Apollo"],
		"GT-I5800L": ["Samsung", "Galaxy Apollo"],
		"GT-I5801": ["Samsung", "Galaxy Apollo"],
		"GT-I6500U": ["Samsung", "Saturn"],
		"GT-I8000": ["Samsung", "Omnia 2"],
		"GT-I8150": ["Samsung", "Galaxy W"],
		"GT-I8150B": ["Samsung", "Galaxy W"],
		"GT-I8160": ["Samsung", "Galaxy Ace 2"],
		"GT-I8160L": ["Samsung", "Galaxy Ace 2"],
		"GT-I8160P": ["Samsung", "Galaxy Ace 2"],
		"GT-I8320": ["Samsung", "H1"],
		"GT-I8520": ["Samsung", "Galaxy Beam"],
		"GT-I8530": ["Samsung", "Galaxy Beam"],
		"GT-I8250": ["Samsung", "Galaxy Beam"],
		"GT-i9000": ["Samsung", "Galaxy S"],
		"GT-I9000": ["Samsung", "Galaxy S"],
		"GT-I9000B": ["Samsung", "Galaxy S"],
		"GT-I9000M": ["Samsung", "Galaxy S Vibrant"],
		"GT-I9000T": ["Samsung", "Galaxy S"],
		"GT-I9001": ["Samsung", "Galaxy S Plus"],
		"GT-I9003": ["Samsung", "Galaxy SL"],
		"GT-I9003L": ["Samsung", "Galaxy SL"],
		"GT-I9008": ["Samsung", "Galaxy S"],
		"GT-I9008L": ["Samsung", "Galaxy S"],
		"GT-I9010": ["Samsung", "Galaxy S Giorgio Armani"],
		"GT-I9018": ["Samsung", "Galaxy GT-I9018"],
		"GT-I9070": ["Samsung", "Galaxy S Advance"],
		"GT-I9070P": ["Samsung", "Galaxy S Advance"],
		"GT-I9082": ["Samsung", "Galaxy Grand DUOS"],
		"GT-I9088": ["Samsung", "Galaxy S"],
		"GT-i9100": ["Samsung", "Galaxy S II"],
		"GT-I9100": ["Samsung", "Galaxy S II"],
		"GT-I9100G": ["Samsung", "Galaxy S II"],
		"GT-I9100M": ["Samsung", "Galaxy S II"],
		"GT-I9100T": ["Samsung", "Galaxy S II"],
		"GT-I9100P": ["Samsung", "Galaxy S II"],
		"GT-I9103": ["Samsung", "Galaxy R"],
		"GT-I9108": ["Samsung", "Galaxy S II"],
		"GT-I9210": ["Samsung", "Galaxy S II LTE"],
		"GT-I9210T": ["Samsung", "Galaxy S II LTE"],
		"GT-I9220": ["Samsung", "Galaxy Note"],
		"GT-I9228": ["Samsung", "Galaxy Note"],
		"GT-I9250": ["Samsung", "Galaxy Nexus"],
		"GT-I9250 EUR XX": ["Samsung", "Galaxy Nexus"],
		"GT-I9260": ["Samsung", "Galaxy Premier"],
		"GT-I9300": ["Samsung", "Galaxy S III"],
		"GT-I9300T": ["Samsung", "Galaxy S III"],
		"GT-I9303T": ["Samsung", "Galaxy S III"],
		"GT-I9308": ["Samsung", "Galaxy S III"],
		"GT-I9500": ["Samsung", "Galaxy GT-I9500"],
		"GT-I9800": ["Samsung", "Galaxy GT-I9800"],
		"GT-N7000": ["Samsung", "Galaxy Note"],
		"GT-N7000B": ["Samsung", "Galaxy Note"],
		"GT-N7100": ["Samsung", "Galaxy Note II"],
		"GT-N7102": ["Samsung", "Galaxy Note II"],
		"GT-N8000": ["Samsung", "Galaxy Note 10.1"],
		"GT-N8010": ["Samsung", "Galaxy Note 10.1"],
		"GT-P1000": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1000L": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1000M": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1000N": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1000T": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1000 Tablet": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P1010": ["Samsung", "Galaxy Tab", "tablet"],
		"GT-P3100": ["Samsung", "Galaxy Tab 2 (7.0)", "tablet"],
		"GT-P3100B": ["Samsung", "Galaxy Tab 2 (7.0)", "tablet"],
		"GT-P3110": ["Samsung", "Galaxy Tab 2 (7.0)", "tablet"],
		"GT-P3113": ["Samsung", "Galaxy Tab 2 (7.0)", "tablet"],
		"GT-P5100": ["Samsung", "Galaxy Tab 2 (10.1)", "tablet"],
		"GT-P5110": ["Samsung", "Galaxy Tab 2 (10.1)", "tablet"],
		"GT-P5113": ["Samsung", "Galaxy Tab 2 (10.1)", "tablet"],
		"GT-P6200": ["Samsung", "Galaxy Tab 7.0 Plus", "tablet"],
		"GT-P6200L": ["Samsung", "Galaxy Tab 7.0 Plus", "tablet"],
		"GT-P6201": ["Samsung", "Galaxy Tab 7.0 Plus N", "tablet"],
		"GT-P6210": ["Samsung", "Galaxy Tab 7.0 Plus", "tablet"],
		"GT-P6211": ["Samsung", "Galaxy Tab 7.0 Plus N", "tablet"],
		"GT-P6800": ["Samsung", "Galaxy Tab 7.7", "tablet"],
		"GT-P6810": ["Samsung", "Galaxy Tab 7.7", "tablet"],
		"GT-P7100": ["Samsung", "Galaxy Tab 10.1V", "tablet"],
		"GT-P7300": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"GT-P7300B": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"GT-P7310": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"GT-P7320": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"GT-P7320T": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"GT-P7500": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"GT-P7500D": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"GT-P7500R": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"GT-P7500V": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"GT-P7501": ["Samsung", "Galaxy Tab 10.1N", "tablet"],
		"GT-P7510": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"GT-P7511": ["Samsung", "Galaxy Tab 10.1N", "tablet"],
		"GT-S5300": ["Samsung", "Galaxy Pocket"],
		"GT-S5360": ["Samsung", "Galaxy Y"],
		"GT-S5360B": ["Samsung", "Galaxy Y"],
		"GT-S5360L": ["Samsung", "Galaxy Y"],
		"GT-S5363": ["Samsung", "Galaxy Y"],
		"GT-S5367": ["Samsung", "Galaxy Y TV"],
		"GT-S5368": ["Samsung", "GT-S5368"],
		"GT-S5369": ["Samsung", "Galaxy Y"],
		"GT-S5570": ["Samsung", "Galaxy Mini"],
		"GT-S5570B": ["Samsung", "Galaxy Mini"],
		"GT-S5570I": ["Samsung", "Galaxy Mini"],
		"GT-S5570L": ["Samsung", "Galaxy Mini"],
		"GT-S5578": ["Samsung", "Galaxy Mini"],
		"GT-S5660": ["Samsung", "Galaxy Gio"],
		"GT-S5660M": ["Samsung", "Galaxy Gio"],
		"GT-S5660V": ["Samsung", "Galaxy Gio"],
		"GT-S5670": ["Samsung", "Galaxy Fit"],
		"GT-S5670B": ["Samsung", "Galaxy Fit"],
		"GT-S5670L": ["Samsung", "Galaxy Fit"],
		"GT-S5690": ["Samsung", "Galaxy Xcover"],
		"GT-S5690L": ["Samsung", "Galaxy Xcover"],
		"GT-S5820": ["Samsung", "Galaxy Ace"],
		"GT-S5830": ["Samsung", "Galaxy Ace"],
		"GT-S5830B": ["Samsung", "Galaxy Ace"],
		"GT-S5830C": ["Samsung", "Galaxy Ace"],
		"GT-S5830D": ["Samsung", "Galaxy Ace"],
		"GT-S5830D-parrot": ["Samsung", "Galaxy Ace"],
		"GT-S5830i": ["Samsung", "Galaxy Ace"],
		"GT-S5830L": ["Samsung", "Galaxy Ace"],
		"GT-S5830M": ["Samsung", "Galaxy Ace"],
		"GT-S5830T": ["Samsung", "Galaxy Ace"],
		"GT-S5838": ["Samsung", "Galaxy Ace"],
		"GT-S5839i": ["Samsung", "Galaxy Ace"],
		"GT-S6102": ["Samsung", "Galaxy Y Duos"],
		"GT-S6102B": ["Samsung", "Galaxy Y Duos"],
		"GT-S6500": ["Samsung", "Galaxy Mini 2"],
		"GT-S6500D": ["Samsung", "Galaxy Mini 2"],
		"GT-S6702": ["Samsung", "GT-S6702"],
		"GT-S6802": ["Samsung", "Galaxy Ace Duos"],
		"GT-S7500": ["Samsung", "Galaxy Ace Plus"],
		"GT-S7500L": ["Samsung", "Galaxy Ace Plus"],
		"GT-S7500W": ["Samsung", "Galaxy Ace Plus"],
		"GT-T959": ["Samsung", "Galaxy S Vibrant"],
		"SCH-i509": ["Samsung", "Galaxy Y"],
		"SCH-i559": ["Samsung", "Galaxy Pop"],
		"SCH-i569": ["Samsung", "Galaxy Gio"],
		"SCH-i579": ["Samsung", "Galaxy Ace"],
		"SCH-i589": ["Samsung", "Galaxy Ace Duos"],
		"SCH-i705 4G": ["Samsung", "Galaxy Tab 2 (7.0)", "tablet"],
		"SCH-i809": ["Samsung", "SCH-i809"],
		"SCH-i889": ["Samsung", "Galaxy Note"],
		"SCH-i909": ["Samsung", "Galaxy S"],
		"SCH-i919": ["Samsung", "SCH-i919"],
		"SCH-i929": ["Samsung", "SCH-i929"],
		"SCH-I100": ["Samsung", "Gem"],
		"SCH-I110": ["Samsung", "Illusion"],
		"SCH-I400": ["Samsung", "Continuum"],
		"SCH-I405": ["Samsung", "Stratosphere"],
		"SCH-I405 4G": ["Samsung", "Stratosphere"],
		"SCH-I500": ["Samsung", "Fascinate"],
		"SCH-I510": ["Samsung", "Stealth V"],
		"SCH-I510 4G": ["Samsung", "Droid Charge"],
		"SCH-I515": ["Samsung", "Galaxy Nexus"],
		"SCH-I535": ["Samsung", "Galaxy S III"],
		"SCH-I535 4G": ["Samsung", "Galaxy S III"],
		"SCH-I619": ["Samsung", "SCH-I619"],
		"SCH-I699": ["Samsung", "SCH-I699"],
		"SCH-I779": ["Samsung", "SCH-I779"],
		"SCH-I800": ["Samsung", "Galaxy Tab 7.0", "tablet"],
		"SCH-I815": ["Samsung", "Galaxy Tab 7.7", "tablet"],
		"SCH-I815 4G": ["Samsung", "Galaxy Tab 7.7", "tablet"],
		"SCH-I905": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SCH-I905 4G": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SCH-I909": ["Samsung", "Galaxy S"],
		"SCH-I915": ["Samsung", "SCH-I915"],
		"SCH-I939": ["Samsung", "Galaxy S III"],
		"SCH-M828C": ["Samsung", "Galaxy Precedent"],
		"SCH-M828Carray(9096483449)": ["Samsung", "Galaxy Precedent"],
		"SCH-R530U": ["Samsung", "Galaxy S III"],
		"SCH-R680": ["Samsung", "Repp"],
		"SCH-R720": ["Samsung", "Admire"],
		"SCH-R730": ["Samsung", "Transfix"],
		"SCH-R760": ["Samsung", "Galaxy S II"],
		"SCH-R820": ["Samsung", "SCH-R820"],
		"SCH-R880": ["Samsung", "Acclaim"],
		"SCH-R910": ["Samsung", "Galaxy Indulge 4G"],
		"SCH-R915": ["Samsung", "Galaxy Indulge"],
		"SCH-R920": ["Samsung", "Galaxy Attain 4G"],
		"SCH-R930": ["Samsung", "Galaxy S Aviator"],
		"SCH-R940": ["Samsung", "Galaxy S Lightray"],
		"SCH-S720C": ["Samsung", "Galaxy Proclaim"],
		"SCH-S735C": ["Samsung", "SCH-S735"],
		"SCH-W899": ["Samsung", "SCH-W899"],
		"SCH-W999": ["Samsung", "SCH-W999"],
		"SGH-I547": ["Samsung", "SGH-I547"],
		"SGH-I717": ["Samsung", "Galaxy Note"],
		"SGH-I717D": ["Samsung", "Galaxy Note"],
		"SGH-I717M": ["Samsung", "Galaxy Note"],
		"SGH-I717R": ["Samsung", "Galaxy Note"],
		"SGH-I727": ["Samsung", "Galaxy S II Skyrocket"],
		"SGH-i727R": ["Samsung", "Galaxy S II"],
		"SGH-I727R": ["Samsung", "Galaxy S II"],
		"SGH-I747": ["Samsung", "Galaxy S III"],
		"SGH-I747M": ["Samsung", "Galaxy S III"],
		"SGH-I748": ["Samsung", "Galaxy S III"],
		"SGH-I757": ["Samsung", "Galaxy S II Skyrocket HD"],
		"SGH-I777": ["Samsung", "Galaxy S II"],
		"SGH-I9777": ["Samsung", "Galaxy S II"],
		"SGH-I896": ["Samsung", "Captivate"],
		"SGH-I897": ["Samsung", "Captivate"],
		"SGH-I927": ["Samsung", "Captivate Glide"],
		"SGH-I927R": ["Samsung", "Captivate Glide"],
		"SGH-I957": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SGH-I957D": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SGH-I957M": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SGH-I957R": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SGH-I987": ["Samsung", "Galaxy Tab 7.0", "tablet"],
		"SGH-I997": ["Samsung", "Infuse 4G"],
		"SGH-I997R": ["Samsung", "Infuse 4G"],
		"SGH-I9000": ["Samsung", "Galaxy S"],
		"SGH-S730G": ["Samsung", "SGH-S730"],
		"SGH-T499": ["Samsung", "Dart"],
		"SGH-T499V": ["Samsung", "Galaxy Mini"],
		"SGH-T499Y": ["Samsung", "Galaxy Mini"],
		"SGH-T589": ["Samsung", "Gravity Smart"],
		"SGH-T589R": ["Samsung", "Gravity Smart"],
		"SGH-T679": ["Samsung", "Exhibit II 4G"],
		"SGH-T679M": ["Samsung", "Exhibit II 4G"],
		"SGH-T759": ["Samsung", "Exhibit 4G"],
		"SGH-T769": ["Samsung", "Galaxy S Blaze 4G"],
		"SGH-T839": ["Samsung", "T-Mobile Sidekick"],
		"SGH-T849": ["Samsung", "Galaxy Tab 7.0", "tablet"],
		"SGH-T859": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SGH-T869": ["Samsung", "Galaxy Tab 7.0 Plus", "tablet"],
		"SGH-T879": ["Samsung", "Galaxy Note"],
		"SGH-T959": ["Samsung", "Vibrant"],
		"SGH-T959D": ["Samsung", "Galaxy S Fascinate 3G+"],
		"SGH-T959P": ["Samsung", "Galaxy S Fascinate 4G"],
		"SGH-T959V": ["Samsung", "Galaxy S 4G"],
		"SGH-T989": ["Samsung", "Galaxy S II"],
		"SGH-T989D": ["Samsung", "Galaxy S II X"],
		"SGH-T999": ["Samsung", "Galaxy S Blaze 4G"],
		"SGH-T999V": ["Samsung", "Galaxy S Blaze 4G"],
		"SHV-E120K": ["Samsung", "Galaxy S II HD LTE"],
		"SHV-E120L": ["Samsung", "Galaxy S II HD LTE"],
		"SHV-E120S": ["Samsung", "Galaxy S II HD LTE"],
		"SHV-E110S": ["Samsung", "Galaxy S II LTE"],
		"SHV-E140S": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SHV-E150S": ["Samsung", "Galaxy Tab 7.7", "tablet"],
		"SHV-E160K": ["Samsung", "Galaxy Note"],
		"SHV-E160L": ["Samsung", "Galaxy Note LTE"],
		"SHV-E160S": ["Samsung", "Galaxy Note LTE"],
		"SHV-E170K": ["Samsung", "SHV-E170K"],
		"SHV-E170L": ["Samsung", "SHV-E170L"],
		"SHV-E210K": ["Samsung", "Galaxy S III"],
		"SHV-E210L": ["Samsung", "Galaxy S III"],
		"SHV-E210S": ["Samsung", "Galaxy S III"],
		"SHW-M100S": ["Samsung", "Galaxy A"],
		"SHW-M110S": ["Samsung", "Galaxy S"],
		"SHW-M130L": ["Samsung", "Galaxy U"],
		"SHW-M130K": ["Samsung", "Galaxy K"],
		"SHW-M180K": ["Samsung", "Galaxy Tab", "tablet"],
		"SHW-M180L": ["Samsung", "Galaxy Tab", "tablet"],
		"SHW-M180S": ["Samsung", "Galaxy Tab", "tablet"],
		"SHW-M180W": ["Samsung", "Galaxy Tab", "tablet"],
		"SHW-M185S": ["Samsung", "Galaxy Tab", "tablet"],
		"SHW-M190S": ["Samsung", "Galaxy S Hoppin"],
		"SHW-M220L": ["Samsung", "Galaxy Neo"],
		"SHW-M240S": ["Samsung", "Galaxy Ace"],
		"SHW-M250K": ["Samsung", "Galaxy S II"],
		"SHW-M250L": ["Samsung", "Galaxy S II"],
		"SHW-M250S": ["Samsung", "Galaxy S II"],
		"SHW-M300W": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SHW-M305W": ["Samsung", "Galaxy Tab 8.9", "tablet"],
		"SHW-M340S": ["Samsung", "Galaxy M Style"],
		"SHW-M380K": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SHW-M380S": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SHW-M380W": ["Samsung", "Galaxy Tab 10.1", "tablet"],
		"SHW-M440S": ["Samsung", "Galaxy S III"],
		"SMT-i9100": ["Samsung", "SMT-I9100", "tablet"],
		"SPH-D600": ["Samsung", "Conquer 4G"],
		"SPH-D700": ["Samsung", "Epic 4G"],
		"SPH-D705": ["Samsung", "Epic 4G 2"],
		"SPH-D710": ["Samsung", "Epic 4G Touch"],
		"SPH-L700": ["Samsung", "Galaxy Nexus"],
		"SPH-L710": ["Samsung", "Galaxy S III"],
		"SPH-M820": ["Samsung", "Galaxy Prevail"],
		"SPH-M820-BST": ["Samsung", "Galaxy Prevail"],
		"SPH-M580": ["Samsung", "Replenish"],
		"SPH-M900": ["Samsung", "Moment"],
		"SPH-M910": ["Samsung", "Intercept"],
		"SPH-M920": ["Samsung", "Transform"],
		"SPH-M930": ["Samsung", "Transform Ultra"],
		"SPH-M930BST": ["Samsung", "Transform Ultra"],
		"SPH-P100": ["Samsung", "Galaxy Tab", "tablet"],
		"YP-GB1": ["Samsung", "Galaxy Player", "media"],
		"YP-GB70": ["Samsung", "Galaxy Player 70", "media"],
		"YP-GB70D": ["Samsung", "Galaxy Player 70 Plus", "media"],
		"YP-GS1": ["Samsung", "Galaxy S WiFi 3.6", "media"],
		"YP-G1": ["Samsung", "Galaxy S WiFi 4.0", "media"],
		"YP-GI1": ["Samsung", "Galaxy S WiFi 4.2", "media"],
		"YP-G50": ["Samsung", "Galaxy Player", "media"],
		"YP-G70": ["Samsung", "Galaxy S WiFi 5.0", "media"],
		"GT9100": ["Samsung", "Galaxy S II"],
		"I897": ["Samsung", "Captivate"],
		"I7500": ["Samsung", "Galaxy"],
		"I9000": ["Samsung", "Galaxy S"],
		"T959": ["Samsung", "Galaxy S Vibrant"],
		"Captivate-I897": ["Samsung", "Captivate"],
		"Galaxy": ["Samsung", "Galaxy"],
		"Galaxy Note": ["Samsung", "Galaxy Note"],
		"GalaxyS": ["Samsung", "Galaxy S"],
		"Galaxy S II": ["Samsung", "Galaxy S II"],
		"Galaxy X": ["Samsung", "Galaxy X"],
		"Galaxy Spica": ["Samsung", "Galaxy Spica"],
		"GALAXY Tab": ["Samsung", "Galaxy Tab", "tablet"],
		"GALAXY NEXUS": ["Samsung", "Galaxy Nexus"],
		"Vibrantmtd": ["Samsung", "Vibrant"],
		"SC-01C": ["Samsung", "Galaxy Tab", "tablet"],
		"SC-01D": ["Samsung", "Galaxy Tab 10.1 LTE", "tablet"],
		"SC-02B": ["Samsung", "Galaxy S"],
		"SC-02C": ["Samsung", "Galaxy S II"],
		"SC-02D": ["Samsung", "Galaxy Tab 7.0 Plus", "tablet"],
		"SC-03D": ["Samsung", "Galaxy S II LTE"],
		"SC-04D": ["Samsung", "Galaxy Nexus"],
		"SC-05D": ["Samsung", "Galaxy Note LTE"],
		"SC-06D": ["Samsung", "Galaxy S III"],
		"ISW11SC": ["Samsung", "Galaxy S II WiMAX"],
		"GT-S7562": ["Samsung", "GT-S7562"],
		"GT-S7562i": ["Samsung", "GT-S7562i"],
		"A01SH": ["Sharp", "A01SH"],
		"IS01": ["Sharp", "IS01"],
		"IS03": ["Sharp", "IS03"],
		"IS05": ["Sharp", "IS05"],
		"IS11SH": ["Sharp", "Aquos IS11SH"],
		"IS12SH": ["Sharp", "Aquos IS12SH"],
		"IS13SH": ["Sharp", "Aquos IS13SH"],
		"IS14SH": ["Sharp", "Aquos IS14SH"],
		"ISW16SH": ["Sharp", "Aquos ISW16SH"],
		"EB-W51GJ": ["Sharp", "EB-W51GJ"],
		"SBM003SH": ["Sharp", "Galapagos"],
		"SBM005SH": ["Sharp", "Galapagos"],
		"SBM006SH": ["Sharp", "Aquos"],
		"SBM007SH": ["Sharp", "Aquos 007SH"],
		"SBM009SH": ["Sharp", "Aquos 009SH"],
		"SBM102SH": ["Sharp", "Aquos 102SH"],
		"SBM103SH": ["Sharp", "Aquos 103SH"],
		"SBM104SH": ["Sharp", "Aquos 104SH"],
		"SBM107SH": ["Sharp", "Aquos 107SH"],
		"SBM107SHB": ["Sharp", "Aquos 107SH"],
		"SH-01D": ["Sharp", "Aquos SH-01D"],
		"SH-02D": ["Sharp", "Aquos slider SH-02D"],
		"SH-03C": ["Sharp", "Lynx 3D"],
		"SH-06D": ["Sharp", "Aquos SH-06D"],
		"SH-09D": ["Sharp", "Aquos Zeta SH-09D"],
		"SH-10B": ["Sharp", "Lynx"],
		"SH-12C": ["Sharp", "Aquos"],
		"SH-13C": ["Sharp", "Aquos f SH-13C"],
		"SH80F": ["Sharp", "Aquos SH80F"],
		"SH72x8U": ["Sharp", "SH72x8U"],
		"SH8118U": ["Sharp", "SH8118U"],
		"SH8128U": ["Sharp", "SH8128U"],
		"SH8158U": ["Sharp", "SH8158U"],
		"SH8188U": ["Sharp", "SH8188U"],
		"SH8268U": ["Sharp", "SH8268U"],
		"INFOBAR C01": ["Sharp", "INFOBAR C01"],
		"SPX-5": ["Simvalley", "SPX-5"],
		"SPX-5 3G": ["Simvalley", "SPX-5 3G"],
		"SmartQ G7": ["SmartQ", "G7", "tablet"],
		"SmartQT7": ["SmartQ", "T7", "tablet"],
		"SmartQT10": ["SmartQ", "T10", "tablet"],
		"SmartQT15": ["SmartQ", "T15", "tablet"],
		"SmartQT19": ["SmartQ", "T19", "tablet"],
		"SmartQT20": ["SmartQ", "T20", "tablet"],
		"OMS1 6": ["Sony Ericsson", "A8i"],
		"E10a": ["Sony Ericsson", "Xperia X10 Mini"],
		"E10i": ["Sony Ericsson", "Xperia X10 Mini"],
		"E10iv": ["Sony Ericsson", "Xperia X10 Mini"],
		"E15": ["Sony Ericsson", "Xperia X8"],
		"E15a": ["Sony Ericsson", "Xperia X8"],
		"E15i": ["Sony Ericsson", "Xperia X8"],
		"E15iv": ["Sony Ericsson", "Xperia X8"],
		"E15i-o": ["Sony Ericsson", "Xperia X8"],
		"E16i": ["Sony Ericsson", "W8 Walkman"],
		"LT11i": ["Sony Ericsson", "Xperia Neo V"],
		"LT15": ["Sony Ericsson", "Xperia Arc"],
		"LT15a": ["Sony Ericsson", "Xperia Arc"],
		"LT15i": ["Sony Ericsson", "Xperia Arc"],
		"LT15iv": ["Sony Ericsson", "Xperia Arc"],
		"LT15i-o": ["Sony Ericsson", "Xperia Arc"],
		"LT18a": ["Sony Ericsson", "Xperia Arc S"],
		"LT18i": ["Sony Ericsson", "Xperia Arc S"],
		"LT18iv": ["Sony Ericsson", "Xperia Arc S"],
		"LT18i-o": ["Sony Ericsson", "Xperia Arc S"],
		"LT22i": ["Sony", "Xperia P"],
		"LT26i": ["Sony", "Xperia S"],
		"LT26ii": ["Sony", "Xperia S"],
		"LT26i-o": ["Sony", "Xperia S"],
		"LT28at": ["Sony", "Xperia Ion"],
		"LT28h": ["Sony", "Xperia Ion"],
		"LT28i": ["Sony", "Xperia Ion"],
		"LT29i": ["Sony", "Xperia GX"],
		"SonyLT29i": ["Sony", "Xperia GX"],
		"SonyLT30a": ["Sony", "Xperia Mint"],
		"SonyLT30p": ["Sony", "Xperia Mint"],
		"MK16a": ["Sony Ericsson", "Xperia Pro"],
		"MK16i": ["Sony Ericsson", "Xperia Pro"],
		"MT11a": ["Sony Ericsson", "Xperia Neo V"],
		"MT11i": ["Sony Ericsson", "Xperia Neo V"],
		"MT11iv": ["Sony Ericsson", "Xperia Neo V"],
		"MT11i-o": ["Sony Ericsson", "Xperia Neo V"],
		"MT15a": ["Sony Ericsson", "Xperia Neo"],
		"MT15i": ["Sony Ericsson", "Xperia Neo"],
		"MT15iv": ["Sony Ericsson", "Xperia Neo"],
		"MT15i-o": ["Sony Ericsson", "Xperia Neo"],
		"MT25i": ["Sony", "Xperia Neo L"],
		"MT27i": ["Sony", "Xperia Sola"],
		"R800a": ["Sony Ericsson", "Xperia Play"],
		"R800i": ["Sony Ericsson", "Xperia Play"],
		"R800iv": ["Sony Ericsson", "Xperia Play"],
		"R800at": ["Sony Ericsson", "Xperia Play"],
		"R800x": ["Sony Ericsson", "Xperia Play"],
		"SK17a": ["Sony Ericsson", "Xperia Mini Pro"],
		"SK17i": ["Sony Ericsson", "Xperia Mini Pro"],
		"SK17iv": ["Sony Ericsson", "Xperia Mini Pro"],
		"SK17i-o": ["Sony Ericsson", "Xperia Mini Pro"],
		"ST15a": ["Sony Ericsson", "Xperia Mini"],
		"ST15i": ["Sony Ericsson", "Xperia Mini"],
		"ST17a": ["Sony Ericsson", "Xperia Active"],
		"ST17i": ["Sony Ericsson", "Xperia Active"],
		"ST18a": ["Sony Ericsson", "Xperia Ray"],
		"ST18i": ["Sony Ericsson", "Xperia Ray"],
		"ST18iv": ["Sony Ericsson", "Xperia Ray"],
		"ST18av": ["Sony Ericsson", "Xperia Ray"],
		"SonyST21": ["Sony", "\"Tapioca\""],
		"SonyST21i": ["Sony", "\"Tapioca\""],
		"SonyST21a2": ["Sony", "\"Tapioca\""],
		"ST21": ["Sony", "\"Tapioca\""],
		"ST21i": ["Sony", "\"Tapioca\""],
		"SonyST23i": ["Sony", "\"Tapioca DS\""],
		"ST25i": ["Sony", "Xperia U"],
		"ST27i": ["Sony", "Xperia Go"],
		"U20a": ["Sony Ericsson", "Xperia X10 Mini Pro"],
		"U20i": ["Sony Ericsson", "Xperia X10 Mini Pro"],
		"U20iv": ["Sony Ericsson", "Xperia X10 Mini Pro"],
		"WT13i": ["Sony Ericsson", "Mix Walkman"],
		"WT18i": ["Sony Ericsson", "Walkman"],
		"WT19a": ["Sony Ericsson", "Live with Walkman"],
		"WT19i": ["Sony Ericsson", "Live with Walkman"],
		"WT19iv": ["Sony Ericsson", "Live with Walkman"],
		"X8": ["Sony Ericsson", "Xperia X8"],
		"X10": ["Sony Ericsson", "Xperia X10"],
		"X10a": ["Sony Ericsson", "Xperia X10"],
		"X10i": ["Sony Ericsson", "Xperia X10"],
		"X10iv": ["Sony Ericsson", "Xperia X10"],
		"X10S": ["Sony Ericsson", "Xperia X10"],
		"X10mini": ["Sony Ericsson", "Xperia X10 Mini"],
		"X10 Mini": ["Sony Ericsson", "Xperia X10 Mini"],
		"X10 Mini Pro": ["Sony Ericsson", "Xperia X10 Mini Pro"],
		"Z1i": ["Sony Ericsson", "Xperia Play"],
		"S51SE": ["Sony Ericsson", "Xperia Mini"],
		"IS11S": ["Sony Ericsson", "Xperia Acro"],
		"IS12S": ["Sony Ericsson", "Xperia Acro HD"],
		"SO-01B": ["Sony Ericsson", "Xperia X10"],
		"SO-01C": ["Sony Ericsson", "Xperia Arc"],
		"SO-01D": ["Sony Ericsson", "Xperia Play"],
		"SO-02C": ["Sony Ericsson", "Xperia Acro"],
		"SO-02D": ["Sony Ericsson", "Xperia NX"],
		"SO-03C": ["Sony Ericsson", "Xperia Ray"],
		"SO-03D": ["Sony Ericsson", "Xperia Acro HD"],
		"SO-04D": ["Sony", "Xperia GX"],
		"SO-05D": ["Sony", "Xperia SX"],
		"XPERIA X8": ["Sony Ericsson", "Xperia X8"],
		"Xperia X8": ["Sony Ericsson", "Xperia X8"],
		"Xperia X10": ["Sony Ericsson", "Xperia X10"],
		"Xperia ray": ["Sony Ericsson", "Xperia Ray"],
		"Xperia Ray": ["Sony Ericsson", "Xperia Ray"],
		"Xperia Arc": ["Sony Ericsson", "Xperia Arc"],
		"Xperia Mini": ["Sony Ericsson", "Xperia Mini"],
		"Xperia neo": ["Sony Ericsson", "Xperia Neo"],
		"Xperia Neo": ["Sony Ericsson", "Xperia Neo"],
		"XPERIA NEO": ["Sony Ericsson", "Xperia Neo"],
		"Xperia NeoV": ["Sony Ericsson", "Xperia Neo V"],
		"Xperia Neo V": ["Sony Ericsson", "Xperia Neo V"],
		"Xperia Play": ["Sony Ericsson", "Xperia Play"],
		"Sony Ericsson Xperia X1": ["Sony Ericsson", "Xperia X1"],
		"SonyHayabusa": ["Sony", "Xperia Ion"],
		"Hayabusa": ["Sony", "Xperia Ion"],
		"nozomi": ["Sony", "Xperia S"],
		"Sony Tablet P": ["Sony", "Tablet P", "tablet"],
		"Sony Tablet S": ["Sony", "Tablet S", "tablet"],
		"NWZ-Z1000Series": ["Sony", "Walkman Z", "media"],
		"NW-Z1000Series": ["Sony", "Walkman Z", "media"],
		"Spice Mi280": ["Spice", "Mi-280"],
		"Spice Mi300": ["Spice", "Mi-300"],
		"Spice Mi-310": ["Spice", "Mi-310"],
		"Spice Mi-425": ["Spice", "Mi-425"],
		"SPICE Mi-720": ["Spice", "Mi-720"],
		"A7272+": ["Star", "A7272+"],
		"e1109 v73 gq1002 ctp": ["Star", "X18i"],
		"TS1004T": ["Surf 3Q", "TS1004T", "tablet"],
		"SYTABEX7-2": ["Sylvania", "SYTABEX7", "tablet"],
		"TCL A860": ["TCL", "A860"],
		"TCL A906": ["TCL", "A906"],
		"TCL A909": ["TCL", "A909"],
		"TCL A919": ["TCL", "A919"],
		"TCL A990": ["TCL", "A990"],
		"TCL A996": ["TCL", "A996"],
		"TCL A998": ["TCL", "A998"],
		"TCL GENESEE E708": ["TCL", "Genesee E708"],
		"A10t(5DM3)": ["Teclast", "A10T", "tablet"],
		"P72": ["Teclast", "P72", "tablet"],
		"P76TI": ["Teclast", "P76Ti", "tablet"],
		"P81HD": ["Teclast", "P81HD", "tablet"],
		"P85(R8A1)": ["Teclast", "P85", "tablet"],
		"T720 SE": ["Teclast", "T720", "tablet"],
		"T760 from moage.com": ["Teclast", "T760", "tablet"],
		"tegav2": ["Tegatech", "TEGA v2", "tablet"],
		"TM-7025": ["teXet", "TM-7025", "tablet"],
		"MoFing": ["Thomson", "MoFing", "tablet"],
		"Ultimate10": ["Tomtec", "Ultimate10", "tablet"],
		"Thl V7": ["THL", "V7"],
		"ThL V7": ["THL", "V7"],
		"ThL V8": ["THL", "V8"],
		"ThL V9": ["THL", "V9"],
		"ThL V11": ["THL", "V11"],
		"TSB CLOUD COMPANION;TOSHIBA AC AND AZ": ["Toshiba", "Dynabook AZ", "desktop"],
		"TOSHIBA AC AND AZ": ["Toshiba", "Dynabook AZ", "desktop"],
		"TOSHIBA FOLIO AND A": ["Toshiba", "Folio 100", "tablet"],
		"T-01C": ["Toshiba", "Regza T-01C"],
		"T-01D": ["Toshiba", "Regza T-01D"],
		"IS04": ["Toshiba", "Regza IS04"],
		"IS11T": ["Toshiba", "Regza IS11T"],
		"AT1S0": ["Toshiba", "Regza AT1S0"],
		"Tostab03": ["Toshiba", "Regza AT100", "tablet"],
		"AT100": ["Toshiba", "Regza AT100", "tablet"],
		"AT200": ["Toshiba", "Regza AT200", "tablet"],
		"AT470": ["Toshiba", "Regza AT470", "tablet"],
		"AT570": ["Toshiba", "Regza AT570", "tablet"],
		"AT830": ["Toshiba", "Regza AT830", "tablet"],
		"Folio 100": ["Toshiba", "Folio 100", "tablet"],
		"folio100": ["Toshiba", "Folio 100", "tablet"],
		"THRiVE": ["Toshiba", "THRiVE", "tablet"],
		"Fantastic T3": ["TWM", "Fantastic T3"],
		"M70014": ["United Star Technology", "M70014", "tablet"],
		"PS47": ["Velocity Micro", "Cruz PS47", "tablet"],
		"T301": ["Velocity Micro", "Cruz T301", "tablet"],
		"Vibo-A688": ["FIH", "Vibo A688"],
		"Videocon-V7500": ["Videocon", "V7500"],
		"GTablet": ["ViewSonic", "gTablet", "tablet"],
		"GtabComb": ["ViewSonic", "gTablet", "tablet"],
		"TeamDRH ICS for GTablet": ["ViewSonic", "gTablet", "tablet"],
		"ViewPad7": ["ViewSonic", "ViewPad 7", "tablet"],
		"ViewPad 10e": ["ViewSonic", "ViewPad 10e", "tablet"],
		"VTAB1008": ["Vizio", "VTAB1008", "tablet"],
		"VTAB3010": ["Vizio", "VTAB3010", "tablet"],
		"VOTO W5300": ["VOTO", "W5300"],
		"xPAD-70": ["WayteQ", "xPAD-70", "tablet"],
		"xTAB-70": ["WayteQ", "xTAB-70", "tablet"],
		"WellcoM-A99": ["WellcoM", "A99"],
		"N12": ["Window", "N12", "tablet"],
		"N12R": ["Window", "N12R", "tablet"],
		"N50": ["Window", "N50", "tablet"],
		"N50DT": ["Window", "N50DT", "tablet"],
		"N50GT": ["Window", "N50GT", "tablet"],
		"N50GT A": ["Window", "N50GT-A", "tablet"],
		"N70": ["Window", "N70", "tablet"],
		"N70 DUAL CORE": ["Window", "N70 Dual Core", "tablet"],
		"N80": ["Window", "N80", "tablet"],
		"N90": ["Window", "N90", "tablet"],
		"N90 DUAL CORE2 V12": ["Window", "N90 Dual Core", "tablet"],
		"N612": ["Wishway", "N612"],
		"AT-AS43D": ["Wolfgang", "AT-AS43D"],
		"M12": ["Wopad", "M12", "tablet"],
		"WM8650": ["WonderMedia", "WM8650", "tablet"],
		"MI-ONE": ["Xiaomi", "MI-ONE"],
		"MI-ONE C1": ["Xiaomi", "MI-ONE C1"],
		"MI-ONE Plus": ["Xiaomi", "MI-ONE Plus"],
		"MI 1S": ["Xiaomi", "MI-ONE Plus"],
		"MI 1SC": ["Xiaomi", "MI-ONE 1SC"],
		"mione plus": ["Xiaomi", "MI-ONE Plus"],
		"MI-TWO": ["Xiaomi", "MI-TWO"],
		"MI 2": ["Xiaomi", "MI-TWO"],
		"MI 2S": ["Xiaomi", "MI-TWO Plus"],
		"MI 2SC": ["Xiaomi", "MI-TWO Plus"],
		"Q07CL01": ["XVision", "Q07", "tablet"],
		"N6": ["Yarvik", "210 Tablet", "tablet"],
		"EMR1879": ["Yidong", "EMR1879", "tablet"],
		"yusun W702": ["Yusun", "W702"],
		"YX-YUSUN E80": ["Yusun", "E80"],
		"zt180": ["Zenithink", "ZT-180", "tablet"],
		"Jaguar7": ["ZiiLabs", "Jaguar 7", "tablet"],
		"Ziss Ranger HD": ["Ziss", "Ranger HD"],
		"ZTE Libra": ["ZTE", "Libra"],
		"ZTE-T T9": ["ZTE", "Light Tab T9", "tablet"],
		"V9": ["ZTE", "Light Tab V9", "tablet"],
		"V9e+": ["ZTE", "Light Tab 2", "tablet"],
		"V9A": ["ZTE", "Light Tab 2", "tablet"],
		"Light Tab 2W": ["ZTE", "Light Tab 2", "tablet"],
		"Light Tab 2": ["ZTE", "Light Tab 2", "tablet"],
		"V9C": ["ZTE", "Light Tab 3", "tablet"],
		"V55": ["ZTE", "Optik", "tablet"],
		"Acqua": ["ZTE", "Acqua"],
		"Blade": ["ZTE", "Blade"],
		"Blade-V880": ["ZTE", "Blade"],
		"ZTE-U V880": ["ZTE", "Blade"],
		"Blade-opda": ["ZTE", "Blade"],
		"ZTE-BLADE": ["ZTE", "Blade"],
		"ZTE Blade": ["ZTE", "Blade"],
		"ZTE V880": ["ZTE", "Blade"],
		"ZTE-U(V)880+": ["ZTE", "Blade"],
		"V880": ["ZTE", "Blade"],
		"a5": ["ZTE", "Blade"],
		"Blade2": ["ZTE", "Blade 2"],
		"Blade S": ["ZTE", "Blade S"],
		"X500": ["ZTE", "Score"],
		"ZTE-X500": ["ZTE", "Score"],
		"Skate": ["ZTE", "Skate"],
		"ZTE Skate": ["ZTE", "Skate"],
		"ZTE-Skate": ["ZTE", "Skate"],
		"ZTE-SKATE": ["ZTE", "Skate"],
		"ZTE-V960": ["ZTE", "Skate"],
		"ZTE-U V960": ["ZTE", "Skate"],
		"ZTE Racer": ["ZTE", "Racer"],
		"ZTE-RACER": ["ZTE", "Racer"],
		"MTC 916": ["ZTE", "Racer"],
		"Racer": ["ZTE", "Racer"],
		"RacerII": ["ZTE", "Racer 2"],
		"RACERII": ["ZTE", "Racer 2"],
		"ZTE Roamer": ["ZTE", "Roamer"],
		"N860": ["ZTE", "Warp"],
		"N880": ["ZTE", "Blade"],
		"ZTE-T U802": ["ZTE", "T-U802"],
		"ZTE-T U806": ["ZTE", "T-U806"],
		"ZTE-T U812": ["ZTE", "T-U812"],
		"ZTE-T U830": ["ZTE", "T-U830"],
		"ZTE-T U880": ["ZTE", "T-U880"],
		"ZTE T U880": ["ZTE", "T-U880"],
		"ZTE-TU880": ["ZTE", "T-U880"],
		"ZTE-TU900": ["ZTE", "T-U900"],
		"ZTE-T U960": ["ZTE", "T-U960"],
		"ZTE-TU960s": ["ZTE", "T-U960"],
		"ZTE-T U960s": ["ZTE", "T-U960"],
		"ZTE U N720": ["ZTE", "U-N720"],
		"ZTE-U V856": ["ZTE", "U-V856"],
		"ZTE-U V857": ["ZTE", "U-V857"],
		"ZTE-U V881": ["ZTE", "U-V881"],
		"ZTE-U X850": ["ZTE", "U-X850"],
		"ZTE-U X876": ["ZTE", "U-X876"],
		"ZTE-X876": ["ZTE", "U-X876"],
		"ZTE-C R750": ["ZTE", "C-R750"],
		"ZTE-C N600": ["ZTE", "C-N600"],
		"ZTE-C N600+": ["ZTE", "C-N600"],
		"ZTE-C N606": ["ZTE", "C-N606"],
		"ZTE-C N700": ["ZTE", "C-N700"],
		"ZTE-C N760": ["ZTE", "C-N760"],
		"ZTE-C N880": ["ZTE", "C-N880"],
		"ZTE-C N880S": ["ZTE", "C-N880"],
		"ZTE-C N880s": ["ZTE", "C-N880"],
		"ZTE-C X500": ["ZTE", "C-X500"],
		"ZTE-C X920": ["ZTE", "C-X920"],
		"ZXY-ZTE-C X920": ["ZTE", "C-X920"],
		"ZTE GV821": ["ZTE", "G-V821"],
		"ZTE N880E": ["ZTE", "N880E"],
		"ZTE-N880E": ["ZTE", "N880E"],
		"MIUI N880S": ["ZTE", "N880S"],
		"ZTE N882E": ["ZTE", "N882E"],
		"ZTE N855D": ["ZTE", "N855D"],
		"ZTE-N910": ["ZTE", "N910"],
		"E810": ["ZTE", "E810"],
		"u880": ["ZTE", "U880"],
		"ZTE U880E": ["ZTE", "U880E"],
		"U880": ["ZTE", "U880"],
		"ZTE U970": ["ZTE", "U970"],
		"ZTE V768": ["ZTE", "V768"],
		"ZTE-V856": ["ZTE", "V856"],
		"ZTE V877b": ["ZTE", "V877"],
		"ZTE V889D": ["ZTE", "V889"],
		"ZTE-Z990": ["ZTE", "Z990"],
		"ZTEU790": ["ZTE", "U790"],
		"003Z": ["ZTE", "Softbank 003Z"],
		"008Z": ["ZTE", "Softbank 008Z"],
		"009Z": ["ZTE", "Softbank Star7"],
		"i-mobile i691": ["i-Mobile", "i691"],
		"i-mobile i695": ["i-Mobile", "i695"],
		"i-mobile i858": ["i-Mobile", "i858"],
		"i-mobile 3G 8500": ["i-Mobile", "3G 8500"],
		"i-mobile I-Note": ["i-Mobile", "i-Note", "tablet"],
		"Optimus Boston": ["Optimus", "Boston"],
		"Optimus San Francisco": ["Optimus", "San Francisco"],
		"Optimus Monte Carlo": ["Optimus", "Monte Carlo"],
		"Orange Boston": ["Orange", "Boston"],
		"Orange Monte Carlo": ["Orange", "Monte Carlo"],
		"San Francisco": ["Orange", "San Francisco"],
		"San Francisco for Orange": ["Orange", "San Francisco"],
		"Orange San Francisco": ["Orange", "San Francisco"],
		"MOVE": ["T-Mobile", "MOVE"],
		"T-Mobile G1": ["T-Mobile", "G1"],
		"T-Mobile G2": ["T-Mobile", "G2"],
		"T-Mobile G2 Touch": ["T-Mobile", "G2"],
		"LG-P999": ["T-Mobile", "G2x"],
		"LG-E739": ["T-Mobile", "myTouch"],
		"T-Mobile myTouch 3G": ["T-Mobile", "myTouch 3G"],
		"T-Mobile myTouch 3G Slide": ["T-Mobile", "myTouch 3G Slide"],
		"T-Mobile Espresso": ["T-Mobile", "myTouch 3G Slide"],
		"HTC myTouch 3G Slide": ["T-Mobile", "myTouch 3G Slide"],
		"T-Mobile myTouch 4G": ["T-Mobile", "myTouch 4G"],
		"HTC Glacier": ["T-Mobile", "myTouch 4G"],
		"HTC Panache": ["T-Mobile", "myTouch 4G"],
		"myTouch4G": ["T-Mobile", "myTouch 4G"],
		"My Touch 4G": ["T-Mobile", "myTouch 4G"],
		"HTC Mytouch 4G": ["T-Mobile", "myTouch 4G"],
		"HTC My Touch 4G": ["T-Mobile", "myTouch 4G"],
		"HTC mytouch4g": ["T-Mobile", "myTouch 4G"],
		"HTC myTouch 4G Slide": ["T-Mobile", "myTouch 4G Slide"],
		"myTouch 4G Slide": ["T-Mobile", "myTouch 4G Slide"],
		"T-Mobile myTouch Q": ["T-Mobile", "myTouch Q"],
		"LG-C800": ["T-Mobile", "myTouch Q"],
		"Pulse Mini": ["T-Mobile", "Pulse Mini"],
		"Vodafone 845": ["Vodafone", "845 Nova"],
		"Vodafone 858": ["Vodafone", "858 Smart"],
		"Vodafone 945": ["Vodafone", "945"],
		"Vodafone Smart II": ["Vodafone", "Smart II"],
		"SmartTab10": ["Vodafone", "SmartTab 10", "tablet"],
		"SCH-N719": ["Samsung", "Galaxy Note II"],
		"Coolpad 8190": ["Coolpad", "8190"],
		"U705T": ["Oppo", "Ulike2"],
		"Coolpad 8020+": ["Coolpad", "8020"],
		"Huawei Y310-5000": ["Huawei", "Y310"],
		"GT-S7572": ["Samsung", "Galaxy Trend Duos II"],
		"Lenovo A278t": ["Lenovo", "A278t"],
		"Lenovo A690": ["Lenovo", "A690"],
		"GT-I8262D": ["Samsung", "LePhone I8262D"],
		"Lenovo A278t": ["Lenovo", "A278t"],
		"MI 2C": ["Xiaomi", "MI-TWO"],
		"Coolpad 8070": ["Coolpad", "8070"],
		"R813T": ["Oppo", "R813T"],
		"ZTE U930": ["ZTE", "U930"],
		"Lenovo A360": ["Lenovo", "LePhone A360"],
		"SCH-N719": ["Samsung", "Galaxy Note II"],
		"Coolpad 8010": ["Coolpad", "8010"],
		"LENOVO-Lenovo-A288t": ["Lenovo", "A288t"],
		"U701T": ["Oppo", "U701T"],
		"ZTEU795": ["Coolpad", "U795"],
		"Haier-HT-I617": ["Haier", "I617"],
		"ZTEU880s": ["ZTE", "T-U880"],
		"GT-S6352": ["Samsung", "GT-S6352"],
		"GT-S7568": ["Samsung", "GT-S7568"],
		"K-Touch T619+": ["K-Touch", "T619"],
		"MI 2A": ["Xiaomi", "MI-TWO A"],
		"GT-N7108": ["Samsung", "Galaxy Note II"],
		"K-Touch T621": ["K-Touch", "T621"],
		"LENOVO-Lenovo-A298t": ["Lenovo", "A298"],
		"Coolpad 8150": ["Coolpad", "8150"],
		"5860S": ["Coolpad", "5860"],
		"ZTEU807": ["ZTE", "U807"],
		"SCH-I739": ["Samsung", "SCH-I739"],
		"SCH-I829": ["Samsung", "SCH-I829"],
		"HS-E830": ["Hisense", "E830"],
		"HS-E920": ["Hisense", "E920"],
		"Lenovo S720": ["Lenovo", "S720"],
		"MI 2C": ["Xiaomi", "MI-TWO"],
		"OPPO R813T": ["Oppo", "R813"],
		"SCH-I879": ["Samsung", "Galaxy Note"],
		"GT-S6102E": ["Samsung", "Galaxy Y Duos"]
	}

	var BLACKBERRY_MODELS = {
		'9600': 'Bold',
		'9650': 'Bold',
		'9700': 'Bold',
		'9780': 'Bold',
		'9790': 'Bold',
		'9900': 'Bold',
		'9930': 'Bold',
		'8300': 'Curve',
		'8310': 'Curve',
		'8320': 'Curve',
		'8330': 'Curve',
		'8350i': 'Curve',
		'8520': 'Curve',
		'8530': 'Curve',
		'8900': 'Curve',
		'9220': 'Curve',
		'9300': 'Curve',
		'9330': 'Curve',
		'9350': 'Curve',
		'9360': 'Curve',
		'9370': 'Curve',
		'9380': 'Curve',
		'8100': 'Pearl',
		'8110': 'Pearl',
		'8120': 'Pearl',
		'8130': 'Pearl',
		'8220': 'Pearl',
		'8230': 'Pearl',
		'9100': 'Pearl',
		'9105': 'Pearl',
		'9530': 'Storm',
		'9550': 'Storm',
		'9670': 'Style',
		'9800': 'Torch',
		'9810': 'Torch',
		'9850': 'Torch',
		'9860': 'Torch',
		'9630': 'Tour',
		'9981': 'Porsche P'
	};


	var Version = function() {
		this.initialize.apply(this, Array.prototype.slice.call(arguments))
	};
	Version.prototype = {
		initialize: function(v) {
			this.original = v.value || null;
			this.alias = v.alias || null;
			this.details = v.details || null;
			this.builds = typeof v.builds != 'undefined' ? v.builds : true;

			this.major = 0;
			this.minor = 0;
			this.revision = '';
			this.build = '';
			this.type = '';

			var match;
			if (match = /([0-9]+)(?:\.([0-9]+))?(?:\.([0-9]+))?(?:\.([0-9]+))?(?:([ab])([0-9]+))?/.exec(this.original)) {
				if (typeof match[1] != 'undefined') {
					this.major = match[1];
				}

				if (typeof match[2] != 'undefined') {
					this.minor = match[2];
				}

				if (typeof match[3] != 'undefined') {
					this.revision = match[3];
				}

				if (typeof match[4] != 'undefined') {
					this.build = match[4];
				}

				if (typeof match[5] != 'undefined') {
					switch (match[5]) {
						case 'a':
							this.type = 'alpha';
							break;
						case 'b':
							this.type = 'beta';
							break;
					}

					if (typeof match[6] != 'undefined') {
						this.build = match[6];
					}
				}
			}
		},

		is: function(v) {
			var compare = new Version({
				value: v
			});
			return this.valueOf() == compare.valueOf();
		},

		isOlder: function(v) {
			var compare = new Version({
				value: v
			});
			return this.valueOf() < compare.valueOf();
		},

		isNewer: function(v) {
			var compare = new Version({
				value: v
			});
			return this.valueOf() > compare.valueOf();
		},

		valueOf: function() {
			return parseFloat('' + this.major + '.' + ('0000' + this.minor).slice(-4));
		},

		toString: function() {
			if (this.alias) return this.alias;

			var version = '';

			if (this.major || this.minor) {
				var v = [];
				v.push(this.major);
				if (this.minor != '' && this.minor != null) v.push(this.minor);
				if (this.revision != '' && this.revision != null) v.push(this.revision);
				if (this.type == '' && this.build) v.push(this.build);
				if (this.details < 0) v.splice(this.details, 0 - this.details);
				if (this.details > 0) v.splice(this.details, v.length - this.details);

				if (!this.builds) {
					for (var i = 0; i < v.length; i++) {
						if (v[i] > 999) {
							v.splice(i, 1);
							i--;
						}
					}
				}

				version = v.join('.');

				if (this.type != '') version += this.type[0] + (this.build ? this.build : '');
			}

			return version;
		}
	}

	var Detected = function() {
		this.initialize.apply(this, arguments)
	};
	Detected.prototype = {
		initialize: function(ua, options) {
			this.options = {
				useFeatures: options && options.useFeatures || false,
				detectCamouflage: options && options.detectCamouflage || true
			}

			this.browser = {
				'stock': true,
				'hidden': false,
				'channel': ''
			};
			this.engine = {};
			this.os = {};
			this.device = {
				'type': 'desktop',
				'identified': false
			};

			this.camouflage = false;
			this.features = [];

			this.detect(ua);


			this.Android = this.engine.name != 'Presto' && this.engine.name != 'Gecko' && this.os.name == 'Android' ? (typeof this.os.version != 'undefined' ? 0 + this.os.version : true) : false;
			this.iOS = this.engine.name != 'Presto' && this.os.name == 'iOS' ? (typeof this.os.version != 'undefined' ? 0 + this.os.version : true) : false;
			this.WindowsPhone = this.os.name == 'Windows Phone' ? (typeof this.os.version != 'undefined' ? 0 + this.os.version : true) : false;
			this.BlackBerry = this.os.name == 'BlackBerry' || this.os.name == 'BlackBerry OS' || this.os.name == 'BlackBerry Tablet OS' ? (typeof this.os.version != 'undefined' ? 0 + this.os.version : true) : false;
			this.Meego = this.os.name == 'Meego' ? (typeof this.os.version != 'undefined' ? 0 + this.os.version : true) : false;

			this.Presto = this.engine.name == 'Presto' ? (typeof this.engine.version != 'undefined' ? 0 + this.engine.version : true) : false;
			this.Opera = this.engine.name == 'Presto' ? (typeof this.browser.version != 'undefined' ? 0 + this.browser.version : true) : false;
			this.Firefox = this.engine.name == 'Gecko' ? (typeof this.browser.version != 'undefined' ? 0 + this.browser.version : true) : false;
			this.Chrome = this.browser.name == 'Chrome' || this.browser.name == 'Chrome Frame' || this.browser.name == 'Chromium' ? (typeof this.browser.version != 'undefined' ? 0 + this.browser.version : true) : false;

			this.desktop = this.device.type == 'desktop';
			this.tablet = this.device.type == 'tablet';
			this.mobile = this.device.type == 'mobile';
			this.proxy = this.device.type == 'proxy';
		},

		isX: function() {
			var valid = true;
			var x = arguments[0];

			if (arguments.length >= 2) {
				valid = valid && this[x].name == arguments[1];
			}

			if (arguments.length >= 4 && typeof this[x].version != 'undefined' && valid) {
				var v1 = 0 + this[x].version;
				var v2 = 0 + new Version({
					value: arguments[3]
				});
				switch (arguments[2]) {
					case '<':
						valid = valid && v1 < v2;
						break;
					case '<=':
						valid = valid && v1 <= v2;
						break;
					case '=':
						valid = valid && v1 == v2;
						break;
					case '>':
						valid = valid && v1 > v2;
						break;
					case '>=':
						valid = valid && v1 >= v2;
						break;
				}
			}

			return valid;
		},

		isBrowser: function() {
			var a = Array.prototype.slice.call(arguments);
			a.unshift('browser');
			return this.isX.apply(this, a);
		},
		isEngine: function() {
			var a = Array.prototype.slice.call(arguments);
			a.unshift('engine');
			return this.isX.apply(this, a);
		},
		isOs: function() {
			var a = Array.prototype.slice.call(arguments);
			a.unshift('os');
			return this.isX.apply(this, a);
		},

		isType: function() {
			var valid = false;
			for (var a = 0; a < arguments.length; a++) valid = valid || arguments[a] == this.device.type;
			return valid;
		},

		detect: function(ua) {

			/****************************************************
			 *		Unix
			 */

			if (ua.match('Unix')) {
				this.os.name = 'Unix';
			}

			/****************************************************
			 *		FreeBSD
			 */

			if (ua.match('FreeBSD')) {
				this.os.name = 'FreeBSD';
			}

			/****************************************************
			 *		OpenBSD
			 */

			if (ua.match('OpenBSD')) {
				this.os.name = 'OpenBSD';
			}

			/****************************************************
			 *		NetBSD
			 */

			if (ua.match('NetBSD')) {
				this.os.name = 'NetBSD';
			}

			/****************************************************
			 *		SunOS
			 */

			if (ua.match('SunOS')) {
				this.os.name = 'Solaris';
			}

			/****************************************************
			 *		Linux
			 */

			if (ua.match('Linux')) {
				this.os.name = 'Linux';

				if (ua.match('CentOS')) {
					this.os.name = 'CentOS';
					if (match = /CentOS\/[0-9\.\-]+el([0-9_]+)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1].replace(/_/g, '.')
						});
					}
				}

				if (ua.match('Debian')) {
					this.os.name = 'Debian';
				}

				if (ua.match('Fedora')) {
					this.os.name = 'Fedora';
					if (match = /Fedora\/[0-9\.\-]+fc([0-9]+)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1]
						});
					}
				}

				if (ua.match('Gentoo')) {
					this.os.name = 'Gentoo';
				}

				if (ua.match('Kubuntu')) {
					this.os.name = 'Kubuntu';
				}

				if (ua.match('Mandriva Linux')) {
					this.os.name = 'Mandriva';
					if (match = /Mandriva Linux\/[0-9\.\-]+mdv([0-9]+)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1]
						});
					}
				}

				if (ua.match('Mageia')) {
					this.os.name = 'Mageia';
					if (match = /Mageia\/[0-9\.\-]+mga([0-9]+)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1]
						});
					}
				}

				if (ua.match('Red Hat')) {
					this.os.name = 'Red Hat';
					if (match = /Red Hat[^\/]*\/[0-9\.\-]+el([0-9_]+)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1].replace(/_/g, '.')
						});
					}
				}

				if (ua.match('Slackware')) {
					this.os.name = 'Slackware';
				}

				if (ua.match('SUSE')) {
					this.os.name = 'SUSE';
				}

				if (ua.match('Turbolinux')) {
					this.os.name = 'Turbolinux';
				}

				if (ua.match('Ubuntu')) {
					this.os.name = 'Ubuntu';
					if (match = /Ubuntu\/([0-9.]*)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1]
						});
					}
				}
			}

			/****************************************************
			 *		iOS
			 */

			if (ua.match('iPhone( Simulator)?;') || ua.match('iPad;') || ua.match('iPod;')) {
				this.os.name = 'iOS';
				this.os.version = new Version({
					value: '1.0'
				});

				if (match = /OS (.*) like Mac OS X/.exec(ua)) {
					this.os.version = new Version({
						value: match[1].replace(/_/g, '.')
					});
				}

				/* 
					Sometimes Apple releases beta versions that still have the old version number, 
					but they do have an updated AppleWebKit version. Below are the first version of 
					iOS in which each version of AppleWebkit is shipped. If the reported version is
					lower than the version expected from the AppleWebKit version, it is an early beta.

				if (match = /AppleWebKit\/([0-9.]*)/.exec(ua)) {
					var build = parseVersion(match[1]);
					if (build >= 420.10) this.result.os.version = Math.max(this.result.os.version, 1.1)		// 1.1
					if (build >= 525.18) this.result.os.version = Math.max(this.result.os.version, 2.0)		// 2.0
					if (build >= 528.18) this.result.os.version = Math.max(this.result.os.version, 3.0)		// 3.0 - 3.1
					if (build >= 531.21) this.result.os.version = Math.max(this.result.os.version, 3.2)		// 3.2
					if (build >= 532.90) this.result.os.version = Math.max(this.result.os.version, 4.0)		// 4.0 - 4.1
					if (build >= 533.17) this.result.os.version = Math.max(this.result.os.version, 4.2)		// 4.2 - 4.3
					if (build >= 534.32) this.result.os.version = Math.max(this.result.os.version, 5.0)		// 5.0
				}
				*/

				if (ua.match('iPhone Simulator;')) {
					this.device.type = 'emulator';
				} else if (ua.match('iPod;')) {
					this.device.type = 'media';
					this.device.manufacturer = 'Apple';
					this.device.model = 'iPod Touch';
				} else if (ua.match('iPhone;')) {
					this.device.type = 'mobile';
					this.device.manufacturer = 'Apple';
					this.device.model = 'iPhone';
				} else {
					this.device.type = 'tablet';
					this.device.manufacturer = 'Apple';
					this.device.model = 'iPad';
				}

				this.device.identified = true;
			}

			/****************************************************
			 *		MacOS X
			 */

			else if (ua.match('Mac OS X')) {
				this.os.name = 'Mac OS X';

				if (match = /Mac OS X (10[0-9\._]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1].replace(/_/g, '.')
					});
				}
			}

			/****************************************************
			 *		Windows
			 */

			if (ua.match('Windows')) {
				this.os.name = 'Windows';

				if (match = /Windows NT ([0-9]\.[0-9])/.exec(ua)) {
					this.os.version = parseVersion(match[1]);

					switch (match[1]) {
						case '6.2':
							this.os.version = new Version({
								value: match[1],
								alias: '8'
							});
							break;
						case '6.1':
							this.os.version = new Version({
								value: match[1],
								alias: '7'
							});
							break;
						case '6.0':
							this.os.version = new Version({
								value: match[1],
								alias: 'Vista'
							});
							break;
						case '5.2':
							this.os.version = new Version({
								value: match[1],
								alias: 'Server 2003'
							});
							break;
						case '5.1':
							this.os.version = new Version({
								value: match[1],
								alias: 'XP'
							});
							break;
						case '5.0':
							this.os.version = new Version({
								value: match[1],
								alias: '2000'
							});
							break;
						default:
							this.os.version = new Version({
								value: match[1],
								alias: 'NT ' + this.os.version
							});
					}
				}

				if (ua.match('Windows 95') || ua.match('Win95') || ua.match('Win 9x 4.00')) {
					this.os.version = new Version({
						value: '4.0',
						alias: '95'
					});
				}

				if (ua.match('Windows 98') || ua.match('Win98') || ua.match('Win 9x 4.10')) {
					this.os.version = new Version({
						value: '4.1',
						alias: '98'
					});
				}

				if (ua.match('Windows ME') || ua.match('WinME') || ua.match('Win 9x 4.90')) {
					this.os.version = new Version({
						value: '4.9',
						alias: 'ME'
					});
				}

				if (ua.match('Windows XP') || ua.match('WinXP')) {
					this.os.name = new Version({
						value: '5.1',
						alias: 'XP'
					});
				}

				if (ua.match('WP7')) {
					this.os.name = 'Windows Phone';
					this.os.version = new Version({
						value: '7.0',
						details: 2
					});
					this.device.type = 'mobile';
					this.browser.mode = 'desktop';
				}

				if (ua.match('Windows CE') || ua.match('WinCE') || ua.match('WindowsCE')) {
					if (ua.match(' IEMobile')) {
						this.os.name = 'Windows Mobile';

						if (ua.match(' IEMobile 8')) {
							this.os.version = new Version({
								value: '6.5',
								details: 2
							});
						}

						if (ua.match(' IEMobile 7')) {
							this.os.version = new Version({
								value: '6.1',
								details: 2
							});
						}

						if (ua.match(' IEMobile 6')) {
							this.os.version = new Version({
								value: '6.0',
								details: 2
							});
						}
					} else {
						this.os.name = 'Windows CE';

						if (match = /WindowsCEOS\/([0-9.]*)/.exec(ua)) {
							this.os.version = new Version({
								value: match[1],
								details: 2
							});
						}

						if (match = /Windows CE ([0-9.]*)/.exec(ua)) {
							this.os.version = new Version({
								value: match[1],
								details: 2
							});
						}
					}

					this.device.type = 'mobile';
				}

				if (ua.match('Windows Mobile')) {
					this.os.name = 'Windows Mobile';
					this.device.type = 'mobile';
				}

				if (match = /WindowsMobile\/([0-9.]*)/.exec(ua)) {
					this.os.name = 'Windows Mobile';
					this.os.version = new Version({
						value: match[1],
						details: 2
					});
					this.device.type = 'mobile';
				}

				if (ua.match('Windows Phone [0-9]')) {
					this.os.name = 'Windows Mobile';
					this.os.version = new Version({
						value: ua.match(/Windows Phone ([0-9.]*)/)[1],
						details: 2
					});
					this.device.type = 'mobile';
				}

				if (ua.match('Windows Phone OS')) {
					this.os.name = 'Windows Phone';
					this.os.version = new Version({
						value: ua.match(/Windows Phone OS ([0-9.]*)/)[1],
						details: 2
					});

					if (this.os.version < 7) {
						this.os.name = 'Windows Mobile';
					}

					if (match = /IEMobile\/[^;]+; ([^;]+); ([^;]+)[;|\)]/.exec(ua)) {
						this.device.manufacturer = match[1];
						this.device.model = match[2];
					}

					this.device.type = 'mobile';

					var manufacturer = this.device.manufacturer;
					var model = cleanupModel(this.device.model);

					if (typeof WINDOWS_PHONE_MODELS[manufacturer] != 'undefined' && typeof WINDOWS_PHONE_MODELS[manufacturer][model] != 'undefined') {
						this.device.manufacturer = WINDOWS_PHONE_MODELS[manufacturer][model][0];
						this.device.model = WINDOWS_PHONE_MODELS[manufacturer][model][1];
						this.device.identified = true;
					}

					if (manufacturer == 'Microsoft' && model == 'XDeviceEmulator') {
						this.device.manufacturer = null;
						this.device.model = null;
						this.device.type = 'emulator';
						this.device.identified = true;
					}
				}
			}

			/****************************************************
			 *		Android
			 */
			if (ua.match('Android')) {
				this.os.name = 'Android';
				this.os.version = null;

				if (match = /Android(?: )?(?:AllPhone_|CyanogenMod_)?(?:\/)?v?([0-9.]+)/.exec(ua.replace('-update', '.'))) {
					this.os.version = new Version({
						value: match[1],
						details: 3
					})
				}

				if (ua.match('Android Eclair')) {
					this.os.version = new Version({
						value: '2.0',
						details: 3
					});
				}

				this.device.type = 'mobile';
				if (this.os.version >= 3) this.device.type = 'tablet';
				if (this.os.version >= 4 && ua.match('Mobile')) this.device.type = 'mobile';

				if (match = /Eclair; (?:[a-zA-Z][a-zA-Z](?:[-_][a-zA-Z][a-zA-Z])?) Build\/([^\/]*)\//.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /; ([^;]*[^;\s])\s+Build/.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /[a-zA-Z][a-zA-Z](?:[-_][a-zA-Z][a-zA-Z])?; ([^;]*[^;\s]);\s+Build/.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /\(([^;]+);U;Android\/[^;]+;[0-9]+\*[0-9]+;CTC\/2.0\)/.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /;\s?([^;]+);\s?[0-9]+\*[0-9]+;\s?CTC\/2.0/.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /zh-cn;\s*(.*?)(\/|build)/i.exec(ua)) {
					this.device.model = match[1];
				} else if (match = /Android [^;]+; (?:[a-zA-Z][a-zA-Z](?:[-_][a-zA-Z][a-zA-Z])?; )?([^)]+)\)/.exec(ua)) {
					if (!ua.match(/[a-zA-Z][a-zA-Z](?:[-_][a-zA-Z][a-zA-Z])?/)) {
						this.device.model = match[1];
					}
				} else if (match = /^(.+?)\/\S+/i.exec(ua)) {
					this.device.model = match[1];
				}


				/* Sometimes we get a model name that starts with Android, in that case it is a mismatch and we should ignore it */
				if (this.device.model && this.device.model.substring(0, 7) == 'Android') {
					this.device.model = null;
				}

				if (this.device.model) {
					var model = cleanupModel(this.device.model);

					if (typeof ANDROID_MODELS[model] != 'undefined') {
						this.device.manufacturer = ANDROID_MODELS[model][0];
						this.device.model = ANDROID_MODELS[model][1];
						if (typeof ANDROID_MODELS[model][2] != 'undefined') this.device.type = ANDROID_MODELS[model][2];
						this.device.identified = true;
					}

					if (model == 'Emulator' || model == 'x86 Emulator' || model == 'x86 VirtualBox' || model == 'vm') {
						this.device.manufacturer = null;
						this.device.model = null;
						this.device.type = 'emulator';
						this.device.identified = true;
					}
				}

				if (ua.match('HP eStation')) {
					this.device.manufacturer = 'HP';
					this.device.model = 'eStation';
					this.device.type = 'tablet';
					this.device.identified = true;
				}
				if (ua.match('Pre\/1.0')) {
					this.device.manufacturer = 'Palm';
					this.device.model = 'Pre';
					this.device.identified = true;
				}
				if (ua.match('Pre\/1.1')) {
					this.device.manufacturer = 'Palm';
					this.device.model = 'Pre Plus';
					this.device.identified = true;
				}
				if (ua.match('Pre\/1.2')) {
					this.device.manufacturer = 'Palm';
					this.device.model = 'Pre 2';
					this.device.identified = true;
				}
				if (ua.match('Pre\/3.0')) {
					this.device.manufacturer = 'HP';
					this.device.model = 'Pre 3';
					this.device.identified = true;
				}
				if (ua.match('Pixi\/1.0')) {
					this.device.manufacturer = 'Palm';
					this.device.model = 'Pixi';
					this.device.identified = true;
				}
				if (ua.match('Pixi\/1.1')) {
					this.device.manufacturer = 'Palm';
					this.device.model = 'Pixi Plus';
					this.device.identified = true;
				}
				if (ua.match('P160UN?A?\/1.0')) {
					this.device.manufacturer = 'HP';
					this.device.model = 'Veer';
					this.device.identified = true;
				}
			}

			/****************************************************
			 *		Google TV
			 */

			if (ua.match('GoogleTV')) {
				this.os.name = 'Google TV';

				if (ua.match('Chrome/5.')) {
					this.os.version = new Version({
						value: '1'
					});
				}

				if (ua.match('Chrome/11.')) {
					this.os.version = new Version({
						value: '2'
					});
				}

				this.device.type = 'television';
			}

			/****************************************************
			 *		WoPhone
			 */

			if (ua.match('WoPhone')) {
				this.os.name = 'WoPhone';

				if (match = /WoPhone\/([0-9\.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.type = 'mobile';
			}

			/****************************************************
			 *		BlackBerry
			 */

			if (ua.match('BlackBerry')) {
				this.os.name = 'BlackBerry OS';

				if (!ua.match('Opera')) {
					if (match = /BlackBerry([0-9]*)\/([0-9.]*)/.exec(ua)) {
						this.device.model = match[1];
						this.os.version = new Version({
							value: match[2],
							details: 2
						});
					}

					if (match = /; BlackBerry ([0-9]*);/.exec(ua)) {
						this.device.model = match[1];
					}

					if (match = /Version\/([0-9.]*)/.exec(ua)) {
						this.os.version = new Version({
							value: match[1],
							details: 2
						});
					}

					if (this.os.version >= 10) {
						this.os.name = 'BlackBerry';
					}

					if (typeof this.device.model != 'undefined') {
						if (typeof BLACKBERRY_MODELS[this.device.model] != 'undefined') {
							this.device.model = 'BlackBerry ' + BLACKBERRY_MODELS[this.device.model] + ' ' + this.device.model;
						} else {
							this.device.model = 'BlackBerry ' + this.device.model;
						}
					} else {
						this.device.model = 'BlackBerry';
					}
				} else {
					this.device.model = 'BlackBerry';
				}

				this.device.manufacturer = 'RIM';
				this.device.type = 'mobile';
				this.device.identified = true;
			}

			/****************************************************
			 *		BlackBerry PlayBook
			 */

			if (ua.match('RIM Tablet OS')) {
				this.os.name = 'BlackBerry Tablet OS';
				this.os.version = new Version({
					value: ua.match(/RIM Tablet OS ([0-9.]*)/)[1],
					details: 2
				});

				this.device.manufacturer = 'RIM';
				this.device.model = 'BlackBerry PlayBook';
				this.device.type = 'tablet';
				this.device.identified = true;
			} else if (ua.match('PlayBook')) {
				if (match = /Version\/(10[0-9.]*)/.exec(ua)) {
					this.os.name = 'BlackBerry';
					this.os.version = new Version({
						value: match[1],
						details: 2
					});

					this.device.manufacturer = 'RIM';
					this.device.model = 'BlackBerry PlayBook';
					this.device.type = 'tablet';
					this.device.identified = true;
				}
			}


			/****************************************************
			 *		WebOS
			 */

			if (ua.match('(?:web|hpw)OS')) {
				this.os.name = 'webOS';
				this.os.version = new Version({
					value: ua.match(/(?:web|hpw)OS\/([0-9.]*)/)[1]
				});

				if (ua.match('tablet')) this.device.type = 'tablet';
				else this.device.type = 'mobile';

				this.device.manufacturer = ua.match('hpwOS') ? 'HP' : 'Palm';
				if (ua.match('Pre\/1.0')) this.device.model = 'Pre';
				if (ua.match('Pre\/1.1')) this.device.model = 'Pre Plus';
				if (ua.match('Pre\/1.2')) this.device.model = 'Pre2';
				if (ua.match('Pre\/3.0')) this.device.model = 'Pre3';
				if (ua.match('Pixi\/1.0')) this.device.model = 'Pixi';
				if (ua.match('Pixi\/1.1')) this.device.model = 'Pixi Plus';
				if (ua.match('P160UN?A?\/1.0')) this.device.model = 'Veer';
				if (ua.match('TouchPad\/1.0')) this.device.model = 'TouchPad';

				if (ua.match('Emulator\/') || ua.match('Desktop\/')) {
					this.device.type = 'emulator';
					this.device.manufacturer = null;
					this.device.model = null;
				}

				this.device.identified = true;
			}

			/****************************************************
			 *		S60
			 */

			if (ua.match('Symbian') || ua.match('Series[ ]?60') || ua.match('S60')) {
				this.os.name = 'Series60';

				if (ua.match('SymbianOS/9.1') && !ua.match('Series60')) {
					this.os.version = new Version({
						value: '3.0'
					});
				}

				if (match = /Series60\/([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				if (match = /Nokia([^\/;]+)[\/|;]/.exec(ua)) {
					if (match[1] != 'Browser') {
						this.device.manufacturer = 'Nokia';
						this.device.model = match[1];
						this.device.identified = true;
					}
				}

				if (match = /Vertu([^\/;]+)[\/|;]/.exec(ua)) {
					this.device.manufacturer = 'Vertu';
					this.device.model = match[1];
					this.device.identified = true;
				}

				if (match = /Symbian; U; ([^;]+); [a-z][a-z]\-[a-z][a-z]/i.exec(ua)) {
					this.device.manufacturer = 'Nokia';
					this.device.model = match[1];
					this.device.identified = true;
				}

				if (match = /Samsung\/([^;]*);/.exec(ua)) {
					this.device.manufacturer = STRINGS_SAMSUNG;
					this.device.model = match[1];
					this.device.identified = true;
				}

				this.device.type = 'mobile';
			}

			/****************************************************
			 *		S40
			 */

			if (ua.match('Series40')) {
				this.os.name = 'Series40';

				if (match = /Nokia([^\/]+)\//.exec(ua)) {
					this.device.manufacturer = 'Nokia';
					this.device.model = match[1];
					this.device.identified = true;
				}

				this.device.type = 'mobile';
			}

			/****************************************************
			 *		MeeGo
			 */

			if (ua.match('MeeGo')) {
				this.os.name = 'MeeGo';
				this.device.type = 'mobile';

				if (match = /Nokia([^\)]+)\)/.exec(ua)) {
					this.device.manufacturer = 'Nokia';
					this.device.model = match[1];
					this.device.identified = true;
				}
			}

			/****************************************************
			 *		Maemo
			 */

			if (ua.match('Maemo')) {
				this.os.name = 'Maemo';
				this.device.type = 'mobile';

				if (match = /(N[0-9]+)/.exec(ua)) {
					this.device.manufacturer = 'Nokia';
					this.device.model = match[1];
					this.device.identified = true;
				}
			}

			/****************************************************
			 *		Tizen
			 */

			if (ua.match('Tizen')) {
				this.os.name = 'Tizen';

				if (match = /Tizen[\/ ]([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.type = 'mobile';

				if (match = /\(([^;]+); ([^\/]+)\//.exec(ua)) {
					if (match[1] != 'Linux') {
						this.device.manufacturer = match[1];
						this.device.model = match[2];

						if (typeof TIZEN_MODELS[this.device.manufacturer] != 'undefined' && typeof TIZEN_MODELS[this.device.manufacturer][this.device.model] != 'undefined') {
							var manufacturer = this.device.manufacturer;
							var model = cleanupModel(this.device.model);

							this.device.manufacturer = TIZEN_MODELS[manufacturer][model][0];
							this.device.model = TIZEN_MODELS[manufacturer][model][1];
							this.device.identified = true;
						}
					}
				}
			}

			/****************************************************
			 *		Bada
			 */

			if (ua.match('[b|B]ada')) {
				this.os.name = 'Bada';

				if (match = /[b|B]ada\/([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.type = 'mobile';

				if (match = /\(([^;]+); ([^\/]+)\//.exec(ua)) {
					this.device.manufacturer = match[1];
					this.device.model = cleanupModel(match[2]);
				}

				if (typeof BADA_MODELS[this.device.manufacturer] != 'undefined' && typeof BADA_MODELS[this.device.manufacturer][this.device.model] != 'undefined') {
					var manufacturer = this.device.manufacturer;
					var model = cleanupModel(this.device.model);

					this.device.manufacturer = BADA_MODELS[manufacturer][model][0];
					this.device.model = BADA_MODELS[manufacturer][model][1];
					this.device.identified = true;
				}
			}

			/****************************************************
			 *		Brew
			 */

			if (ua.match(/BREW/i) || ua.match('BMP; U')) {
				this.os.name = 'Brew';
				this.device.type = 'mobile';

				if (match = /BREW; U; ([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				} else if (match = /;BREW\/([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}


				if (match = /\(([^;]+);U;REX\/[^;]+;BREW\/[^;]+;(?:.*;)?[0-9]+\*[0-9]+;CTC\/2.0\)/.exec(ua)) {
					this.device.model = match[1];
				}

				if (this.device.model) {
					var model = cleanupModel(this.device.model);

					if (typeof BREW_MODELS[model] != 'undefined') {
						this.device.manufacturer = BREW_MODELS[model][0];
						this.device.model = BREW_MODELS[model][1];
						this.device.identified = true;
					}
				}
			}

			/****************************************************
			 *		MTK
			 */

			if (ua.match(/\(MTK;/)) {
				this.os.name = 'MTK';
				this.device.type = 'mobile';
			}

			/****************************************************
			 *		CrOS
			 */

			if (ua.match('CrOS')) {
				this.os.name = 'Chrome OS';
				this.device.type = 'desktop';
			}

			/****************************************************
			 *		Joli OS
			 */

			if (ua.match('Joli OS')) {
				this.os.name = 'Joli OS';
				this.device.type = 'desktop';

				if (match = /Joli OS\/([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Haiku
			 */

			if (ua.match('Haiku')) {
				this.os.name = 'Haiku';
				this.device.type = 'desktop';
			}

			/****************************************************
			 *		QNX
			 */

			if (ua.match('QNX')) {
				this.os.name = 'QNX';
				this.device.type = 'mobile';
			}

			/****************************************************
			 *		OS/2 Warp
			 */

			if (ua.match('OS\/2; Warp')) {
				this.os.name = 'OS/2 Warp';
				this.device.type = 'desktop';

				if (match = /OS\/2; Warp ([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Grid OS
			 */

			if (ua.match('Grid OS')) {
				this.os.name = 'Grid OS';
				this.device.type = 'tablet';

				if (match = /Grid OS ([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		AmigaOS
			 */

			if (ua.match(/AmigaOS/i)) {
				this.os.name = 'AmigaOS';
				this.device.type = 'desktop';

				if (match = /AmigaOS ([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

			}

			/****************************************************
			 *		MorphOS
			 */

			if (ua.match(/MorphOS/i)) {
				this.os.name = 'MorphOS';
				this.device.type = 'desktop';

				if (match = /MorphOS ([0-9.]*)/i.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

			}

			/****************************************************
			 *		Kindle
			 */

			if (ua.match('Kindle') && !ua.match('Fire')) {
				this.os.name = '';

				this.device.manufacturer = 'Amazon';
				this.device.model = 'Kindle';
				this.device.type = 'ereader';

				if (ua.match('Kindle\/2.0')) this.device.model = 'Kindle 2';
				if (ua.match('Kindle\/3.0')) this.device.model = 'Kindle 3 or later';

				this.device.identified = true;
			}

			/****************************************************
			 *		NOOK
			 */

			if (ua.match('nook browser')) {
				this.os.name = 'Android';

				this.device.manufacturer = 'Barnes & Noble';
				this.device.model = 'NOOK';
				this.device.type = 'ereader';
				this.device.identified = true;
			}

			/****************************************************
			 *		Bookeen
			 */

			if (ua.match('bookeen\/cybook')) {
				this.os.name = '';

				this.device.manufacturer = 'Bookeen';
				this.device.model = 'Cybook';
				this.device.type = 'ereader';

				if (ua.match('Orizon')) {
					this.device.model = 'Cybook Orizon';
				}

				this.device.identified = true;
			}

			/****************************************************
			 *		Sony Reader
			 */

			if (ua.match('EBRD1101')) {
				this.os.name = '';

				this.device.manufacturer = 'Sony';
				this.device.model = 'Reader';
				this.device.type = 'ereader';
				this.device.identified = true;
			}

			/****************************************************
			 *		iRiver
			 */

			if (ua.match('Iriver ;')) {
				this.os.name = '';

				this.device.manufacturer = 'iRiver';
				this.device.model = 'Story';
				this.device.type = 'ereader';

				if (ua.match('EB07')) {
					this.device.model = 'Story HD EB07';
				}

				this.device.identified = true;
			}

			/****************************************************
			 *		Nintendo
			 *
			 *		Opera/9.30 (Nintendo Wii; U; ; 3642; en)
			 *		Opera/9.30 (Nintendo Wii; U; ; 2047-7; en)
			 *		Opera/9.50 (Nintendo DSi; Opera/507; U; en-US)
			 *		Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7455.US
			 *		Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7455.EU
			 */

			if (ua.match('Nintendo Wii')) {
				this.os.name = '';

				this.device.manufacturer = 'Nintendo';
				this.device.model = 'Wii';
				this.device.type = 'gaming';
				this.device.identified = true;
			}

			if (ua.match('Nintendo DSi')) {
				this.os.name = '';

				this.device.manufacturer = 'Nintendo';
				this.device.model = 'DSi';
				this.device.type = 'gaming';
				this.device.identified = true;
			}

			if (ua.match('Nintendo 3DS')) {
				this.os.name = '';

				this.device.manufacturer = 'Nintendo';
				this.device.model = '3DS';
				this.device.type = 'gaming';

				if (match = /Version\/([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.identified = true;
			}

			/****************************************************
			 *		Sony Playstation
			 *
			 *		Mozilla/4.0 (PSP (PlayStation Portable); 2.00)
			 *
			 *		Mozilla/5.0 (PlayStation Vita 1.00) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.50) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.51) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.52) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.60) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.61) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *		Mozilla/5.0 (PlayStation Vita 1.80) AppleWebKit/531.22.8 (KHTML, like Gecko) Silk/3.2
			 *
			 *		Mozilla/5.0 (PLAYSTATION 3; 1.00)
			 *		Mozilla/5.0 (PLAYSTATION 3; 2.00)
			 *		Mozilla/5.0 (PLAYSTATION 3; 3.55)
			 *		Mozilla/5.0 (PLAYSTATION 3 4.11) AppleWebKit/531.22.8 (KHTML, like Gecko)
			 *		Mozilla/5.0 (PLAYSTATION 3 4.10) AppleWebKit/531.22.8 (KHTML, like Gecko)
			 *
			 *		Mozilla/5.0 (PlayStation 3) SonyComputerEntertainmentEurope/531.3 (NCell) NuantiMeta/2.0
			 */

			if (ua.match('PlayStation Portable')) {
				this.os.name = '';

				this.device.manufacturer = 'Sony';
				this.device.model = 'Playstation Portable';
				this.device.type = 'gaming';
				this.device.identified = true;
			}

			if (ua.match('PlayStation Vita')) {
				this.os.name = '';

				if (match = /PlayStation Vita ([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.manufacturer = 'Sony';
				this.device.model = 'PlayStation Vita';
				this.device.type = 'gaming';
				this.device.identified = true;
			}

			if (ua.match(/PlayStation 3/i)) {
				this.os.name = '';

				if (match = /PLAYSTATION 3;? ([0-9.]*)/.exec(ua)) {
					this.os.version = new Version({
						value: match[1]
					});
				}

				this.device.manufacturer = 'Sony';
				this.device.model = 'Playstation 3';
				this.device.type = 'gaming';
				this.device.identified = true;
			}

			/****************************************************
			 *		Panasonic Smart Viera
			 *
			 *		Mozilla/5.0 (FreeBSD; U; Viera; ja-JP) AppleWebKit/535.1 (KHTML, like Gecko) Viera/1.2.4 Chrome/14.0.835.202 Safari/535.1
			 */

			if (ua.match('Viera')) {
				this.os.name = '';
				this.device.manufacturer = 'Panasonic';
				this.device.model = 'Smart Viera';
				this.device.type = 'television';
				this.device.identified = true;
			}


			/****************************************************
			 *		Sharp AQUOS TV
			 *
			 *		Mozilla/5.0 (DTV) AppleWebKit/531.2  (KHTML, like Gecko) AQUOSBrowser/1.0 (US00DTV;V;0001;0001)
			 *		Mozilla/5.0 (DTV) AppleWebKit/531.2+ (KHTML, like Gecko) Espial/6.0.4 AQUOSBrowser/1.0 (CH00DTV;V;0001;0001)
			 *		Opera/9.80 (Linux armv6l; U; en) Presto/2.8.115 Version/11.10 AQUOS-AS/1.0 LC-40LE835X
			 */

			if (ua.match('AQUOSBrowser') || ua.match('AQUOS-AS')) {
				this.os.name = '';
				this.device.manufacturer = STRINGS_SHARP;
				this.device.model = 'Aquos TV';
				this.device.type = 'television';
				this.device.identified = true;
			}


			/****************************************************
			 *		Samsung Smart TV
			 *
			 *		Mozilla/5.0 (SmartHub; SMART-TV; U; Linux/SmartTV; Maple2012) AppleWebKit/534.7 (KHTML, like Gecko) SmartTV Safari/534.7
			 *		Mozilla/5.0 (SmartHub; SMART-TV; U; Linux/SmartTV) AppleWebKit/531.2+ (KHTML, like Gecko) WebBrowser/1.0 SmartTV Safari/531.2+
			 */

			if (ua.match('SMART-TV')) {
				this.os.name = '';
				this.device.manufacturer = STRINGS_SAMSUNG;
				this.device.model = 'Smart TV';
				this.device.type = 'television';
				this.device.identified = true;

				if (match = /Maple([0-9]*)/.exec(ua)) {
					this.device.model += ' ' + match[1];
				}
			}

			/****************************************************
			 *		Sony Internet TV
			 *
			 *		Opera/9.80 (Linux armv7l; U; InettvBrowser/2.2(00014A;SonyDTV115;0002;0100) KDL-46EX640; CC/USA; en) Presto/2.8.115 Version/11.10
			 *		Opera/9.80 (Linux armv7l; U; InettvBrowser/2.2(00014A;SonyDTV115;0002;0100) KDL-40EX640; CC/USA; en) Presto/2.10.250 Version/11.60
			 *		Opera/9.80 (Linux armv7l; U; InettvBrowser/2.2(00014A;SonyDTV115;0002;0100) N/A; CC/USA; en) Presto/2.8.115 Version/11.10
			 *		Opera/9.80 (Linux mips; U; InettvBrowser/2.2 (00014A;SonyDTV115;0002;0100) ; CC/JPN; en) Presto/2.9.167 Version/11.50
			 *		Opera/9.80 (Linux mips; U; InettvBrowser/2.2 (00014A;SonyDTV115;0002;0100) AZ2CVT2; CC/CAN; en) Presto/2.7.61 Version/11.00
			 *		Opera/9.80 (Linux armv6l; Opera TV Store/4207; U; (SonyBDP/BDV11); en) Presto/2.9.167 Version/11.50
			 *		Opera/9.80 (Linux armv6l ; U; (SonyBDP/BDV11); en) Presto/2.6.33 Version/10.60
			 *		Opera/9.80 (Linux armv6l; U; (SonyBDP/BDV11); en) Presto/2.8.115 Version/11.10
			 */

			if (ua.match('SonyDTV|SonyBDP|SonyCEBrowser')) {
				this.os.name = '';
				this.device.manufacturer = 'Sony';
				this.device.model = 'Internet TV';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		Philips Net TV
			 *
			 *		Opera/9.70 (Linux armv6l ; U; CE-HTML/1.0 NETTV/2.0.2; en) Presto/2.2.1
			 *		Opera/9.80 (Linux armv6l ; U; CE-HTML/1.0 NETTV/3.0.1;; en) Presto/2.6.33 Version/10.60
			 *		Opera/9.80 (Linux mips; U; CE-HTML/1.0 NETTV/3.0.1; PHILIPS-AVM-2012; en) Presto/2.9.167 Version/11.50
			 *		Opera/9.80 (Linux mips ; U; HbbTV/1.1.1 (; Philips; ; ; ; ) CE-HTML/1.0 NETTV/3.1.0; en) Presto/2.6.33 Version/10.70
			 *		Opera/9.80 (Linux i686; U; HbbTV/1.1.1 (; Philips; ; ; ; ) CE-HTML/1.0 NETTV/3.1.0; en) Presto/2.9.167 Version/11.50
			 */

			if (ua.match('NETTV\/')) {
				this.os.name = '';
				this.device.manufacturer = 'Philips';
				this.device.model = 'Net TV';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		LG NetCast TV
			 *
			 *		Mozilla/5.0 (DirectFB; Linux armv7l) AppleWebKit/534.26+ (KHTML, like Gecko) Version/5.0 Safari/534.26+ LG Browser/5.00.00(+mouse+3D+SCREEN+TUNER; LGE; GLOBAL-PLAT4; 03.09.22; 0x00000001;); LG NetCast.TV-2012
			 *		Mozilla/5.0 (DirectFB; Linux armv7l) AppleWebKit/534.26+ (KHTML, like Gecko) Version/5.0 Safari/534.26+ LG Browser/5.00.00(+SCREEN+TUNER; LGE; GLOBAL-PLAT4; 01.00.00; 0x00000001;); LG NetCast.TV-2012
			 *		Mozilla/5.0 (DirectFB; U; Linux armv6l; en) AppleWebKit/531.2  (KHTML, like Gecko) Safari/531.2  LG Browser/4.1.4( BDP; LGE; Media/BD660; 6970; abc;); LG NetCast.Media-2011
			 *		Mozilla/5.0 (DirectFB; U; Linux 7631; en) AppleWebKit/531.2  (KHTML, like Gecko) Safari/531.2  LG Browser/4.1.4( NO_NUM; LGE; Media/SP520; ST.3.97.409.F; 0x00000001;); LG NetCast.Media-2011
			 *		Mozilla/5.0 (DirectFB; U; Linux 7630; en) AppleWebKit/531.2  (KHTML, like Gecko) Safari/531.2  LG Browser/4.1.4( 3D BDP NO_NUM; LGE; Media/ST600; LG NetCast.Media-2011
			 *		(LGSmartTV/1.0) AppleWebKit/534.23 OBIGO-T10/2.0
			 */

			if (match = /LG NetCast\.(?:TV|Media)-([0-9]*)/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = STRINGS_LG;
				this.device.model = 'NetCast TV ' + match[1];
				this.device.type = 'television';
				this.device.identified = true;
			}

			if (match = /LGSmartTV/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = STRINGS_LG;
				this.device.model = 'Smart TV';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		Toshiba Smart TV
			 *
			 *		Mozilla/5.0 (Linux mipsel; U; HbbTV/1.1.1 (; TOSHIBA; DTV_RL953; 56.7.66.7; t12; ) ; ToshibaTP/1.3.0 (+VIDEO_MP4+VIDEO_X_MS_ASF+AUDIO_MPEG+AUDIO_MP4+DRM+NATIVELAUNCH) ; en) AppleWebKit/534.1 (KHTML, like Gecko)
			 *		Mozilla/5.0 (DTV; TSBNetTV/T32013713.0203.7DD; TVwithVideoPlayer; like Gecko) NetFront/4.1 DTVNetBrowser/2.2 (000039;T32013713;0203;7DD) InettvBrowser/2.2 (000039;T32013713;0203;7DD)
			 *		Mozilla/5.0 (Linux mipsel; U; HbbTV/1.1.1 (; TOSHIBA; 40PX200; 0.7.3.0.; t12; ) ; Toshiba_TP/1.3.0 (+VIDEO_MP4+AUDIO_MPEG+AUDIO_MP4+VIDEO_X_MS_ASF+OFFLINEAPP) ; en) AppleWebKit/534.1 (KHTML, like Gec
			 */

			if (ua.match('Toshiba_?TP\/') || ua.match('TSBNetTV\/')) {
				this.os.name = '';
				this.device.manufacturer = 'Toshiba';
				this.device.model = 'Smart TV';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		MachBlue XT
			 */

			if (match = /mbxtWebKit\/([0-9.]*)/.exec(ua)) {
				this.os.name = '';
				this.browser.name = 'MachBlue XT'
				this.browser.version = new Version({
					value: match[1],
					details: 2
				});
				this.device.type = 'television';
			}

			/****************************************************
			 *		ADB
			 */

			if (match = /\(ADB; ([^\)]+)\)/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = 'ADB';
				this.device.model = (match[1] != 'Unknown' ? match[1].replace('ADB', '') + ' ' : '') + 'IPTV receiver';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		MStar
			 */

			if (ua.match(/Mstar;OWB/)) {
				this.os.name = '';
				this.device.manufacturer = 'MStar';
				this.device.model = 'PVR';
				this.device.type = 'television';
				this.device.identified = true;

				this.browser.name = 'Origyn Web Browser';
			}

			/****************************************************
			 *		TechniSat
			 */

			if (match = /\TechniSat ([^;]+);/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = 'TechniSat';
				this.device.model = match[1];
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		Technicolor
			 */

			if (match = /\Technicolor_([^;]+);/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = 'Technicolor';
				this.device.model = match[1];
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		Winbox Evo2
			 */

			if (match = /Winbox Evo2/.exec(ua)) {
				this.os.name = '';
				this.device.manufacturer = 'Winbox';
				this.device.model = 'Evo2';
				this.device.type = 'television';
				this.device.identified = true;
			}

			/****************************************************
			 *		Roku
			 */

			if (match = /^Roku\/DVP-([0-9]+)/.exec(ua)) {
				this.device.manufacturer = 'Roku';
				this.device.type = 'television';

				switch (match[1]) {
					case '2000':
						this.device.model = 'HD';
						break;
					case '2050':
						this.device.model = 'XD';
						break;
					case '2100':
						this.device.model = 'XDS';
						break;
					case '2400':
						this.device.model = 'LT';
						break;
					case '3000':
						this.device.model = '2 HD';
						break;
					case '3050':
						this.device.model = '2 XD';
						break;
					case '3100':
						this.device.model = '2 XS';
						break;
				}

				this.device.identified = true;
			}

			if (match = /HbbTV\/1.1.1 \([^;]*;\s*([^;]*)\s*;\s*([^;]*)\s*;/.exec(ua)) {
				var vendorName = match[1].trim();
				var modelName = match[2].trim();

				if (!this.device.manufacturer && vendorName != '' && vendorName != 'vendorName') {
					switch (vendorName) {
						case 'LGE':
							this.device.manufacturer = 'LG';
							break;
						case 'TOSHIBA':
							this.device.manufacturer = 'Toshiba';
							break;
						case 'smart':
							this.device.manufacturer = 'Smart';
							break;
						case 'tv2n':
							this.device.manufacturer = 'TV2N';
							break;
						default:
							this.device.manufacturer = vendorName;
					}

					if (!this.device.model && modelName != '' && modelName != 'modelName') {
						switch (modelName) {
							case 'GLOBAL_PLAT3':
								this.device.model = 'NetCast TV';
								break;
							case 'SmartTV2012':
								this.device.model = 'Smart TV 2012';
								break;
							case 'videoweb':
								this.device.model = 'Videoweb';
								break;
							default:
								this.device.model = modelName;
						}

						if (vendorName == 'Humax') {
							this.device.model = this.device.model.toUpperCase();
						}

						this.device.identified = true;
						this.os.name = '';
					}
				}

				this.device.type = 'television';
			}

			/****************************************************
			 *		Detect type based on common identifiers
			 */

			if (ua.match('InettvBrowser')) {
				this.device.type = 'television';
			}

			if (ua.match('MIDP')) {
				this.device.type = 'mobile';
			}

			/****************************************************
			 *		Try to detect any devices based on common
			 *		locations of model ids
			 */

			if (!this.device.model && !this.device.manufacturer) {
				var candidates = [];

				if (!ua.match(/^(Mozilla|Opera)/)) if (match = /^(?:MQQBrowser\/[0-9\.]+\/)?([^\s]+)/.exec(ua)) {
					match[1] = match[1].replace(/_TD$/, '');
					match[1] = match[1].replace(/_CMCC$/, '');
					match[1] = match[1].replace(/[_ ]Mozilla$/, '');
					match[1] = match[1].replace(/ Linux$/, '');
					match[1] = match[1].replace(/ Opera$/, '');
					match[1] = match[1].replace(/\/[0-9].*$/, '');

					candidates.push(match[1]);
				}

				if (match = /[0-9]+x[0-9]+; ([^;]+)/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /[0-9]+X[0-9]+ ([^;\/\(\)]+)/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /Windows NT 5.1; ([^;]+); Windows Phone/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /\) PPC; (?:[0-9]+x[0-9]+; )?([^;\/\(\)]+)/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /\(([^;]+); U; Windows Mobile/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /Vodafone\/1.0\/([^\/]+)/.exec(ua)) {
					candidates.push(match[1]);
				}

				if (match = /\ ([^\s]+)$/.exec(ua)) {
					candidates.push(match[1]);
				}

				for (var i = 0; i < candidates.length; i++) {

					if (!this.device.model && !this.device.manufacturer) {
						var model = cleanupModel(candidates[i]);
						var result = false;

						if (this.os.name == 'Android') {
							if (typeof ANDROID_MODELS[model] != 'undefined') {
								this.device.manufacturer = ANDROID_MODELS[model][0];
								this.device.model = ANDROID_MODELS[model][1];
								if (typeof ANDROID_MODELS[model][2] != 'undefined') this.device.type = ANDROID_MODELS[model][2];
								this.device.identified = true;

								result = true;
							}
						}

						if (!this.os.name || this.os.name == 'Windows' || this.os.name == 'Windows Mobile' || this.os.name == 'Windows CE') {
							if (typeof WINDOWS_MOBILE_MODELS[model] != 'undefined') {
								this.device.manufacturer = WINDOWS_MOBILE_MODELS[model][0];
								this.device.model = WINDOWS_MOBILE_MODELS[model][1];
								this.device.type = 'mobile';
								this.device.identified = true;

								if (this.os.name != 'Windows Mobile') {
									this.os.name = 'Windows Mobile';
									this.os.version = null;
								}

								result = true;
							}
						}
					}

					if (!result) {
						if (match = /^GIONEE-([^\s]+)/.exec(candidates[i])) {
							this.device.manufacturer = 'Gionee';
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^HTC_?([^\/_]+)(?:\/|_|$)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_HTC;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^HUAWEI-([^\/]*)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_HUAWEI;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /(?:^|\()LGE?(?:\/|-|_|\s)([^\s]*)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_LG;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^MOT-([^\/_]+)(?:\/|_|$)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_MOTOROLA;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^Motorola_([^\/_]+)(?:\/|_|$)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_MOTOROLA;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^Nokia([^\/]+)(?:\/|$)/.exec(candidates[i])) {
							this.device.manufacturer = 'Nokia';
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;

							if (!this.os.name) {
								this.os.name = 'Series40';
							}
						}

						if (match = /^SonyEricsson([^\/_]+)(?:\/|_|$)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_SONY_ERICSSON;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';
							this.device.identified = true;
						}

						if (match = /^SAMSUNG-([^\/_]+)(?:\/|_|$)/.exec(candidates[i])) {
							this.device.manufacturer = STRINGS_SAMSUNG;
							this.device.model = cleanupModel(match[1]);
							this.device.type = 'mobile';

							if (this.os.name == 'Bada') {
								var manufacturer = 'SAMSUNG';
								var model = cleanupModel(this.device.model);

								if (typeof BADA_MODELS[manufacturer] != 'undefined' && typeof BADA_MODELS[manufacturer][model] != 'undefined') {
									this.device.manufacturer = BADA_MODELS[manufacturer][model][0];
									this.device.model = BADA_MODELS[manufacturer][model][1];
									this.device.identified = true;
								}
							} else if (match = /Jasmine\/([0-9.]*)/.exec(ua)) {
								var version = match[1];
								var manufacturer = 'SAMSUNG';
								var model = cleanupModel(this.device.model);

								if (typeof TOUCHWIZ_MODELS[manufacturer] != 'undefined' && typeof TOUCHWIZ_MODELS[manufacturer][model] != 'undefined') {
									this.device.manufacturer = TOUCHWIZ_MODELS[manufacturer][model][0];
									this.device.model = TOUCHWIZ_MODELS[manufacturer][model][1];
									this.device.identified = true;

									this.os.name = 'Touchwiz';
									this.os.version = new Version({
										value: '2.0'
									});
								}
							} else if (match = /Dolfin\/([0-9.]*)/.exec(ua)) {
								var version = match[1];
								var manufacturer = 'SAMSUNG';
								var model = cleanupModel(this.device.model);

								if (typeof BADA_MODELS[manufacturer] != 'undefined' && typeof BADA_MODELS[manufacturer][model] != 'undefined') {
									this.device.manufacturer = BADA_MODELS[manufacturer][model][0];
									this.device.model = BADA_MODELS[manufacturer][model][1];
									this.device.identified = true;

									this.os.name = 'Bada';

									switch (version) {
										case '2.0':
											this.os.version = new Version({
												value: '1.0'
											});
											break;
										case '2.2':
											this.os.version = new Version({
												value: '1.2'
											});
											break;
										case '3.0':
											this.os.version = new Version({
												value: '2.0'
											});
											break;
									}
								}

								if (typeof TOUCHWIZ_MODELS[manufacturer] != 'undefined' && typeof TOUCHWIZ_MODELS[manufacturer][model] != 'undefined') {
									this.device.manufacturer = TOUCHWIZ_MODELS[manufacturer][model][0];
									this.device.model = TOUCHWIZ_MODELS[manufacturer][model][1];
									this.device.identified = true;

									this.os.name = 'Touchwiz';

									switch (version) {
										case '1.0':
											this.os.version = new Version({
												value: '1.0'
											});
											break;
										case '1.5':
											this.os.version = new Version({
												value: '2.0'
											});
											break;
										case '2.0':
											this.os.version = new Version({
												value: '3.0'
											});
											break;
									}
								}
							}
						}
					}
				}
			}


			if (match = /\((?:LG[-|\/])(.*) (?:Browser\/)?AppleWebkit/.exec(ua)) {
				this.device.manufacturer = STRINGS_LG;
				this.device.model = match[1];
				this.device.type = 'mobile';
				this.device.identified = true;
			}

			if (match = /^Mozilla\/5.0 \((?:Nokia|NOKIA)(?:\s?)([^\)]+)\)UC AppleWebkit\(like Gecko\) Safari\/530$/.exec(ua)) {
				this.device.manufacturer = 'Nokia';
				this.device.model = match[1];
				this.device.type = 'mobile';
				this.device.identified = true;

				this.os.name = 'Series60';
			}



			/****************************************************
			 *		Safari
			 */

			if (ua.match('Safari')) {
				if (this.os.name == 'iOS') {
					this.browser.stock = true;
					this.browser.hidden = true;
					this.browser.name = 'Safari';
					this.browser.version = null;
				}



				if (this.os.name == 'Mac OS X' || this.os.name == 'Windows') {
					this.browser.name = 'Safari';
					this.browser.stock = this.os.name == 'Mac OS X';

					if (match = /Version\/([0-9\.]+)/.exec(ua)) {
						this.browser.version = new Version({
							value: match[1]
						});
					}

					if (ua.match(/AppleWebKit\/[0-9\.]+\+/)) {
						this.browser.name = 'WebKit Nightly Build';
						this.browser.version = null;
					}
				}
			}

			/****************************************************
			 *		Internet Explorer
			 */

			if (ua.match('MSIE')) {
				this.browser.name = 'Internet Explorer';

				if (ua.match('IEMobile') || ua.match('Windows CE') || ua.match('Windows Phone') || ua.match('WP7')) {
					this.browser.name = 'Mobile Internet Explorer';
				}

				if (match = /MSIE ([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Opera
			 */

			if (ua.match(/Opera/i)) {
				this.browser.stock = false;
				this.browser.name = 'Opera';

				if (match = /Opera[\/| ]([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				if (match = /Version\/([0-9.]*)/.exec(ua)) {
					if (parseFloat(match[1]) >= 10) {
						this.browser.version = new Version({
							value: match[1]
						});
					} else {
						this.browser.version = null;
					}
				}

				if (this.browser.version && ua.match('Edition Labs')) {
					this.browser.version.type = 'alpha';
					this.browser.channel = 'Labs';
				}

				if (this.browser.version && ua.match('Edition Next')) {
					this.browser.version.type = 'alpha';
					this.browser.channel = 'Next';
				}

				if (ua.match('Opera Tablet')) {
					this.browser.name = 'Opera Mobile';
					this.device.type = 'tablet';
				}

				if (ua.match('Opera Mobi')) {
					this.browser.name = 'Opera Mobile';
					this.device.type = 'mobile';
				}

				if (match = /Opera Mini;/.exec(ua)) {
					this.browser.name = 'Opera Mini';
					this.browser.version = null;
					this.browser.mode = 'proxy';
					this.device.type = 'mobile';
				}

				if (match = /Opera Mini\/(?:att\/)?([0-9.]*)/.exec(ua)) {
					this.browser.name = 'Opera Mini';
					this.browser.version = new Version({
						value: match[1],
						details: -1
					});
					this.browser.mode = 'proxy';
					this.device.type = 'mobile';
				}

				if (this.browser.name == 'Opera' && this.device.type == 'mobile') {
					this.browser.name = 'Opera Mobile';

					if (ua.match(/BER/)) {
						this.browser.name = 'Opera Mini';
						this.browser.version = null;
					}
				}

				if (ua.match('InettvBrowser')) {
					this.device.type = 'television';
				}

				if (ua.match('Opera TV') || ua.match('Opera-TV')) {
					this.browser.name = 'Opera';
					this.device.type = 'television';
				}

				if (ua.match('Linux zbov')) {
					this.browser.name = 'Opera Mobile';
					this.browser.mode = 'desktop';

					this.device.type = 'mobile';

					this.os.name = null;
					this.os.version = null;
				}

				if (ua.match('Linux zvav')) {
					this.browser.name = 'Opera Mini';
					this.browser.version = null;
					this.browser.mode = 'desktop';

					this.device.type = 'mobile';

					this.os.name = null;
					this.os.version = null;
				}
			}

			/****************************************************
			 *		Firefox
			 */

			if (ua.match('Firefox')) {
				this.browser.stock = false;
				this.browser.name = 'Firefox';

				if (match = /Firefox\/([0-9ab.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				if (this.browser.version.type == 'alpha') {
					this.browser.channel = 'Aurora';
				}

				if (this.browser.version.type == 'beta') {
					this.browser.channel = 'Beta';
				}

				if (ua.match('Fennec')) {
					this.device.type = 'mobile';
				}

				if (ua.match('Mobile; rv')) {
					this.device.type = 'mobile';
				}

				if (ua.match('Tablet; rv')) {
					this.device.type = 'tablet';
				}

				if (this.device.type == 'mobile' || this.device.type == 'tablet') {
					this.browser.name = 'Firefox Mobile';
				}
			}

			if (ua.match('Namoroka')) {
				this.browser.stock = false;
				this.browser.name = 'Firefox';

				if (match = /Namoroka\/([0-9ab.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				this.browser.channel = 'Namoroka';
			}

			if (ua.match('Shiretoko')) {
				this.browser.stock = false;
				this.browser.name = 'Firefox';

				if (match = /Shiretoko\/([0-9ab.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				this.browser.channel = 'Shiretoko';
			}

			if (ua.match('Minefield')) {
				this.browser.stock = false;
				this.browser.name = 'Firefox';

				if (match = /Minefield\/([0-9ab.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				this.browser.channel = 'Minefield';
			}

			if (ua.match('Firebird')) {
				this.browser.stock = false;
				this.browser.name = 'Firebird';

				if (match = /Firebird\/([0-9ab.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		SeaMonkey
			 */

			if (ua.match('SeaMonkey')) {
				this.browser.stock = false;
				this.browser.name = 'SeaMonkey';

				if (match = /SeaMonkey\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Netscape
			 */

			if (ua.match('Netscape')) {
				this.browser.stock = false;
				this.browser.name = 'Netscape';

				if (match = /Netscape[0-9]?\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Konqueror
			 */

			if (ua.match('[k|K]onqueror/')) {
				this.browser.name = 'Konqueror';

				if (match = /[k|K]onqueror\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Chrome
			 */

			if (match = /(?:Chrome|CrMo|CriOS)\/([0-9.]*)/.exec(ua)) {
				this.browser.stock = false;
				this.browser.name = 'Chrome';
				this.browser.version = new Version({
					value: match[1]
				});

				if (this.os.name == 'Android') {
					switch (match[1].split('.', 3).join('.')) {
						case '16.0.912':
							this.browser.channel = 'Beta';
							break;
						case '18.0.1025':
							this.browser.version.details = 1;
							break;
						default:
							this.browser.channel = 'Nightly';
							break;
					}
				} else {
					switch (match[1].split('.', 3).join('.')) {
						case '0.2.149':
						case '0.3.154':
						case '0.4.154':
						case '1.0.154':
						case '2.0.172':
						case '3.0.195':
						case '4.0.249':
						case '4.1.249':
						case '5.0.375':
						case '6.0.472':
						case '7.0.517':
						case '8.0.552':
						case '9.0.597':
						case '10.0.648':
						case '11.0.696':
						case '12.0.742':
						case '13.0.782':
						case '14.0.835':
						case '15.0.874':
						case '16.0.912':
						case '17.0.963':
						case '18.0.1025':
						case '19.0.1084':
						case '20.0.1132':
						case '21.0.1180':
							if (this.browser.version.minor == 0) this.browser.version.details = 1;
							else this.browser.version.details = 2;

							break;
						default:
							this.browser.channel = 'Nightly';
							break;
					}
				}
			}

			/****************************************************
			 *		Chrome Frame
			 */

			if (ua.match('chromeframe')) {
				this.browser.stock = false;
				this.browser.name = 'Chrome Frame';

				if (match = /chromeframe\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Chromium
			 */

			if (ua.match('Chromium')) {
				this.browser.stock = false;
				this.browser.channel = '';
				this.browser.name = 'Chromium';

				if (match = /Chromium\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		BrowserNG
			 */

			if (ua.match('BrowserNG')) {
				this.browser.name = 'Nokia Browser';

				if (match = /BrowserNG\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1],
						details: 3,
						builds: false
					});
				}
			}

			/****************************************************
			 *		Nokia Browser
			 */

			if (ua.match('NokiaBrowser')) {
				this.browser.name = 'Nokia Browser';

				if (match = /NokiaBrowser\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1],
						details: 3
					});
				}
			}

			/****************************************************
			 *		MicroB
			 */

			if (ua.match('Maemo[ |_]Browser')) {
				this.browser.name = 'MicroB';

				if (match = /Maemo[ |_]Browser[ |_]([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1],
						details: 3
					});
				}
			}


			/****************************************************
			 *		NetFront
			 */

			if (ua.match('NetFront')) {
				this.browser.name = 'NetFront';
				this.device.type = 'mobile';

				if (match = /NetFront\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				if (ua.match('InettvBrowser')) {
					this.device.type = 'television';
				}
			}

			/****************************************************
			 *		Silk
			 */

			if (ua.match('Silk')) {
				if (ua.match('Silk-Accelerated')) {
					this.browser.name = 'Silk';

					if (match = /Silk\/([0-9.]*)/.exec(ua)) {
						this.browser.version = new Version({
							value: match[1],
							details: 2
						});
					}

					this.device.manufacturer = 'Amazon';
					this.device.model = 'Kindle Fire';
					this.device.type = 'tablet';
					this.device.identified = true;

					if (this.os.name != 'Android') {
						this.os.name = 'Android';
						this.os.version = null;
					}
				}
			}

			/****************************************************
			 *		Dolfin
			 */

			if (ua.match('Dolfin')) {
				this.browser.name = 'Dolfin';

				if (match = /Dolfin\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}


			/****************************************************
			 *		Iris
			 */

			if (ua.match('Iris')) {
				this.browser.name = 'Iris';

				this.device.type = 'mobile';
				this.device.model = null;
				this.device.manufacturer = null;

				this.os.name = 'Windows Mobile';
				this.os.version = null;

				if (match = /Iris\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				if (match = / WM([0-9]) /.exec(ua)) {
					this.os.version = new Version({
						value: match[1] + '.0'
					});
				} else {
					this.browser.mode = 'desktop';
				}
			}

			/****************************************************
			 *		Jasmine
			 */

			if (ua.match('Jasmine')) {
				this.browser.name = 'Jasmine';

				if (match = /Jasmine\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Boxee
			 */

			if (ua.match('Boxee')) {
				this.browser.name = 'Boxee';
				this.device.type = 'television';

				if (match = /Boxee\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Espial
			 */

			if (ua.match('Espial')) {
				this.browser.name = 'Espial';

				this.os.name = '';
				this.os.version = null;

				if (this.device.type != 'television') {
					this.device.type = 'television';
					this.device.model = null;
					this.device.manufacturer = null;
				}

				if (match = /Espial\/([0-9.]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		ANT Galio
			 */
			if (match = /ANTGalio\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'ANT Galio';
				this.browser.version = new Version({
					value: match[1],
					details: 3
				});
				this.device.type = 'television';
			}

			/****************************************************
			 *		NetFront NX
			 */
			if (match = /NX\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'NetFront NX';
				this.browser.version = new Version({
					value: match[1],
					details: 2
				});
				if (match = /DTV/i.exec(ua)) {
					this.device.type = 'television';
				} else if (match = /mobile/i.exec(ua)) {
					this.device.type = 'mobile';
				} else {
					this.device.type = 'desktop';
				}

				this.os.name = null;
				this.os.version = null;
			}

			/****************************************************
			 *		Obigo
			 */

			if (ua.match(/Obigo/i)) {
				this.browser.name = 'Obigo';

				if (match = /Obigo\/([0-9.]*)/i.exec(ua)) {
					this.browser.version = new Version({
						value: match[1]
					});
				}

				if (match = /Obigo\/([A-Z])([0-9.]*)/i.exec(ua)) {
					this.browser.name = 'Obigo ' + match[1];
					this.browser.version = new Version({
						value: match[2]
					});
				}

				if (match = /Obigo-([A-Z])([0-9.]*)\//i.exec(ua)) {
					this.browser.name = 'Obigo ' + match[1];
					this.browser.version = new Version({
						value: match[2]
					});
				}
			}

			/****************************************************
			 *		UC Web
			 */

			if (ua.match('UCWEB')) {
				this.browser.stock = false;
				this.browser.name = 'UC Browser';

				if (match = /UCWEB([0-9]*[.][0-9]*)/.exec(ua)) {
					this.browser.version = new Version({
						value: match[1],
						details: 3
					});
				}

				if (this.os.name == 'Linux') {
					this.os.name = '';
				}

				this.device.type = 'mobile';

				if (match = /^IUC \(U;\s?iOS ([0-9\.]+);/.exec(ua)) {
					this.os.name = 'iOS';
					this.os.version = new Version({
						value: match[1]
					});
				}

				if (match = /^JUC \(Linux; U; ([0-9\.]+)[^;]*; [^;]+; ([^;]*[^\s])\s*; [0-9]+\*[0-9]+\)/.exec(ua)) {
					var model = cleanupModel(match[2]);

					this.os.name = 'Android';
					this.os.version = new Version({
						value: match[1]
					});

					if (typeof ANDROID_MODELS[model] != 'undefined') {
						this.device.manufacturer = ANDROID_MODELS[model][0];
						this.device.model = ANDROID_MODELS[model][1];
						if (typeof ANDROID_MODELS[model][2] != 'undefined') this.device.type = ANDROID_MODELS[model][2];
						this.device.identified = true;
					}
				}
			}

			if (ua.match(/\) UC /)) {
				this.browser.stock = false;
				this.browser.name = 'UC Browser';
			}

			if (match = /UCBrowser\/([0-9.]*)/.exec(ua)) {
				this.browser.stock = false;
				this.browser.name = 'UC Browser';
				this.browser.version = new Version({
					value: match[1],
					details: 2
				});
			}

			/****************************************************
			 *		NineSky
			 */

			if (match = /Ninesky(?:-android-mobile(?:-cn)?)?\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'NineSky';
				this.browser.version = new Version({
					value: match[1]
				});

				if (this.os.name != 'Android') {
					this.os.name = 'Android';
					this.os.version = null;

					this.device.manufacturer = null;
					this.device.model = null;
				}
			}

			/****************************************************
			 *		Skyfire
			 */

			if (match = /Skyfire\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'Skyfire';
				this.browser.version = new Version({
					value: match[1]
				});

				this.device.type = 'mobile';

				this.os.name = 'Android';
				this.os.version = null;
			}

			/****************************************************
			 *		Dolphin HD
			 */

			if (match = /DolphinHDCN\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'Dolphin';
				this.browser.version = new Version({
					value: match[1]
				});

				this.device.type = 'mobile';

				if (this.os.name != 'Android') {
					this.os.name = 'Android';
					this.os.version = null;
				}
			}

			if (match = /Dolphin\/INT/.exec(ua)) {
				this.browser.name = 'Dolphin';
				this.device.type = 'mobile';
			}

			/****************************************************
			 *		QQ Browser
			 */

			if (match = /(M?QQBrowser)\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'QQ Browser';

				var version = match[2];
				if (version.match(/^[0-9][0-9]$/)) version = version[0] + '.' + version[1];

				this.browser.version = new Version({
					value: version,
					details: 2
				});
				this.browser.channel = ''

				if (!this.os.name && match[1] == 'QQBrowser') {
					this.os.name = 'Windows';
				}
			}

			/****************************************************
			 *		iBrowser
			 */

			if (match = /(iBrowser)\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'iBrowser';

				var version = match[2];
				if (version.match(/[0-9][0-9]/)) version = version[0] + '.' + version[1];

				this.browser.version = new Version({
					value: version,
					details: 2
				});
				this.browser.channel = ''
			}

			/****************************************************
			 *		Puffin
			 */

			if (match = /Puffin\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'Puffin';
				this.browser.version = new Version({
					value: match[1],
					details: 2
				});

				this.device.type = 'mobile';

				if (this.os.name == 'Linux') {
					this.os.name = null;
					this.os.version = null;
				}
			}

			/****************************************************
			 *		360 Extreme Explorer
			 */

			if (ua.match('360EE')) {
				this.browser.stock = false;
				this.browser.name = '360 Extreme Explorer';
				this.browser.version = null;
			}

			/****************************************************
			 *		Midori
			 */

			if (match = /Midori\/([0-9.]*)/.exec(ua)) {
				this.browser.name = 'Midori';
				this.browser.version = new Version({
					value: match[1]
				});

				if (this.os.name != 'Linux') {
					this.os.name = 'Linux';
					this.os.version = null;
				}

				this.device.manufacturer = null;
				this.device.model = null;
				this.device.type = 'desktop';
			}

			/****************************************************
			 *		Others
			 */

			var browsers = [{
				name: 'AdobeAIR',
				regexp: /AdobeAIR\/([0-9.]*)/
			}, {
				name: 'Awesomium',
				regexp: /Awesomium\/([0-9.]*)/
			}, {
				name: 'Canvace',
				regexp: /Canvace Standalone\/([0-9.]*)/
			}, {
				name: 'Ekioh',
				regexp: /Ekioh\/([0-9.]*)/
			}, {
				name: 'JavaFX',
				regexp: /JavaFX\/([0-9.]*)/
			}, {
				name: 'GFXe',
				regexp: /GFXe\/([0-9.]*)/
			}, {
				name: 'LuaKit',
				regexp: /luakit/
			}, {
				name: 'Titanium',
				regexp: /Titanium\/([0-9.]*)/
			}, {
				name: 'OpenWebKitSharp',
				regexp: /OpenWebKitSharp/
			}, {
				name: 'Prism',
				regexp: /Prism\/([0-9.]*)/
			}, {
				name: 'Qt',
				regexp: /Qt\/([0-9.]*)/
			}, {
				name: 'QtEmbedded',
				regexp: /QtEmbedded/
			}, {
				name: 'QtEmbedded',
				regexp: /QtEmbedded.*Qt\/([0-9.]*)/
			}, {
				name: 'RhoSimulator',
				regexp: /RhoSimulator/
			}, {
				name: 'UWebKit',
				regexp: /UWebKit\/([0-9.]*)/
			},

			{
				name: 'PhantomJS',
				regexp: /PhantomJS\/([0-9.]*)/
			}, {
				name: 'Google Web Preview',
				regexp: /Google Web Preview/
			},

			{
				name: 'Google Earth',
				regexp: /Google Earth\/([0-9.]*)/
			}, {
				name: 'EA Origin',
				regexp: /Origin\/([0-9.]*)/
			}, {
				name: 'SecondLife',
				regexp: /SecondLife\/([0-9.]*)/
			}, {
				name: 'Valve Steam',
				regexp: /Valve Steam/
			},

			{
				name: 'Songbird',
				regexp: /Songbird\/([0-9.]*)/
			}, {
				name: 'Thunderbird',
				regexp: /Thunderbird\/([0-9.]*)/
			},

			{
				name: 'Abrowser',
				regexp: /Abrowser\/([0-9.]*)/
			}, {
				name: 'arora',
				regexp: /[Aa]rora\/([0-9.]*)/
			}, {
				name: 'Baidu Browser',
				regexp: /M?BaiduBrowser\/([0-9.]*)/i
			}, {
				name: 'Camino',
				regexp: /Camino\/([0-9.]*)/
			}, {
				name: 'Canure',
				regexp: /Canure\/([0-9.]*)/,
				details: 3
			}, {
				name: 'CometBird',
				regexp: /CometBird\/([0-9.]*)/
			}, {
				name: 'Comodo Dragon',
				regexp: /Comodo_Dragon\/([0-9.]*)/,
				details: 2
			}, {
				name: 'Conkeror',
				regexp: /[Cc]onkeror\/([0-9.]*)/
			}, {
				name: 'CoolNovo',
				regexp: /(?:CoolNovo|CoolNovoChromePlus)\/([0-9.]*)/,
				details: 3
			}, {
				name: 'ChromePlus',
				regexp: /ChromePlus(?:\/([0-9.]*))?$/,
				details: 3
			}, {
				name: 'Daedalus',
				regexp: /Daedalus ([0-9.]*)/,
				details: 2
			}, {
				name: 'Demobrowser',
				regexp: /demobrowser\/([0-9.]*)/
			}, {
				name: 'Dooble',
				regexp: /Dooble(?:\/([0-9.]*))?/
			}, {
				name: 'DWB',
				regexp: /dwb(?:-hg)?(?:\/([0-9.]*))?/
			}, {
				name: 'Epiphany',
				regexp: /Epiphany\/([0-9.]*)/
			}, {
				name: 'FireWeb',
				regexp: /FireWeb\/([0-9.]*)/
			}, {
				name: 'Flock',
				regexp: /Flock\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Galeon',
				regexp: /Galeon\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Helium',
				regexp: /HeliumMobileBrowser\/([0-9.]*)/
			}, {
				name: 'iCab',
				regexp: /iCab\/([0-9.]*)/
			}, {
				name: 'Iceape',
				regexp: /Iceape\/([0-9.]*)/
			}, {
				name: 'IceCat',
				regexp: /IceCat ([0-9.]*)/
			}, {
				name: 'Iceweasel',
				regexp: /Iceweasel\/([0-9.]*)/
			}, {
				name: 'InternetSurfboard',
				regexp: /InternetSurfboard\/([0-9.]*)/
			}, {
				name: 'Iron',
				regexp: /Iron\/([0-9.]*)/,
				details: 2
			}, {
				name: 'Isis',
				regexp: /BrowserServer/
			}, {
				name: 'Jumanji',
				regexp: /jumanji/
			}, {
				name: 'Kazehakase',
				regexp: /Kazehakase\/([0-9.]*)/
			}, {
				name: 'KChrome',
				regexp: /KChrome\/([0-9.]*)/,
				details: 3
			}, {
				name: 'K-Meleon',
				regexp: /K-Meleon\/([0-9.]*)/
			}, {
				name: 'Leechcraft',
				regexp: /Leechcraft(?:\/([0-9.]*))?/,
				details: 2
			}, {
				name: 'Lightning',
				regexp: /Lightning\/([0-9.]*)/
			}, {
				name: 'Lunascape',
				regexp: /Lunascape[\/| ]([0-9.]*)/,
				details: 3
			}, {
				name: 'iLunascape',
				regexp: /iLunascape\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Maxthon',
				regexp: /Maxthon[\/ ]([0-9.]*)/,
				details: 3
			}, {
				name: 'MiniBrowser',
				regexp: /MiniBr?owserM\/([0-9.]*)/
			}, {
				name: 'MiniBrowser',
				regexp: /MiniBrowserMobile\/([0-9.]*)/
			}, {
				name: 'MixShark',
				regexp: /MixShark\/([0-9.]*)/
			}, {
				name: 'Motorola WebKit',
				regexp: /MotorolaWebKit\/([0-9.]*)/,
				details: 3
			}, {
				name: 'NetFront LifeBrowser',
				regexp: /NetFrontLifeBrowser\/([0-9.]*)/
			}, {
				name: 'Netscape Navigator',
				regexp: /Navigator\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Odyssey',
				regexp: /OWB\/([0-9.]*)/
			}, {
				name: 'OmniWeb',
				regexp: /OmniWeb/
			}, {
				name: 'Orca',
				regexp: /Orca\/([0-9.]*)/
			}, {
				name: 'Origyn',
				regexp: /Origyn Web Browser/
			}, {
				name: 'Palemoon',
				regexp: /Pale[mM]oon\/([0-9.]*)/
			}, {
				name: 'Phantom',
				regexp: /Phantom\/V([0-9.]*)/
			}, {
				name: 'Polaris',
				regexp: /Polaris\/v?([0-9.]*)/i,
				details: 2
			}, {
				name: 'QtCreator',
				regexp: /QtCreator\/([0-9.]*)/
			}, {
				name: 'QtQmlViewer',
				regexp: /QtQmlViewer/
			}, {
				name: 'QtTestBrowser',
				regexp: /QtTestBrowser\/([0-9.]*)/
			}, {
				name: 'QtWeb',
				regexp: /QtWeb Internet Browser\/([0-9.]*)/
			}, {
				name: 'QupZilla',
				regexp: /QupZilla\/([0-9.]*)/
			}, {
				name: 'Roccat',
				regexp: /Roccat\/([0-9]\.[0-9.]*)/
			}, {
				name: 'Raven for Mac',
				regexp: /Raven for Mac\/([0-9.]*)/
			}, {
				name: 'rekonq',
				regexp: /rekonq/
			}, {
				name: 'RockMelt',
				regexp: /RockMelt\/([0-9.]*)/,
				details: 2
			}, {
				name: 'Sleipnir',
				regexp: /Sleipnir\/([0-9.]*)/,
				details: 3
			}, {
				name: 'SMBrowser',
				regexp: /SMBrowser/
			}, {
				name: 'Sogou Explorer',
				regexp: /SE 2.X MetaSr/
			}, {
				name: 'Snowshoe',
				regexp: /Snowshoe\/([0-9.]*)/,
				details: 2
			}, {
				name: 'Sputnik',
				regexp: /Sputnik\/([0-9.]*)/i,
				details: 3
			}, {
				name: 'Stainless',
				regexp: /Stainless\/([0-9.]*)/
			}, {
				name: 'SunChrome',
				regexp: /SunChrome\/([0-9.]*)/
			}, {
				name: 'Surf',
				regexp: /Surf\/([0-9.]*)/
			}, {
				name: 'TaoBrowser',
				regexp: /TaoBrowser\/([0-9.]*)/,
				details: 2
			}, {
				name: 'TaomeeBrowser',
				regexp: /TaomeeBrowser\/([0-9.]*)/,
				details: 2
			}, {
				name: 'TazWeb',
				regexp: /TazWeb/
			}, {
				name: 'Viera',
				regexp: /Viera\/([0-9.]*)/
			}, {
				name: 'Villanova',
				regexp: /Villanova\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Wavelink Velocity',
				regexp: /Wavelink Velocity Browser\/([0-9.]*)/,
				details: 2
			}, {
				name: 'WebPositive',
				regexp: /WebPositive/
			}, {
				name: 'WebRender',
				regexp: /WebRender/
			}, {
				name: 'Wyzo',
				regexp: /Wyzo\/([0-9.]*)/,
				details: 3
			}, {
				name: 'Zetakey',
				regexp: /Zetakey Webkit\/([0-9.]*)/
			}, {
				name: 'Zetakey',
				regexp: /Zetakey\/([0-9.]*)/
			}]

			for (var b = 0; b < browsers.length; b++) {
				if (match = browsers[b].regexp.exec(ua)) {
					this.browser.name = browsers[b].name;
					this.browser.channel = '';
					this.browser.stock = false;

					if (match[1]) {
						this.browser.version = new Version({
							value: match[1],
							details: browsers[b].details || null
						});
					} else {
						this.browser.version = null;
					}
				}
			}



			/****************************************************
			 *		WebKit
			 */

			if (match = /WebKit\/([0-9.]*)/i.exec(ua)) {
				this.engine.name = 'Webkit';
				this.engine.version = new Version({
					value: match[1]
				});
			}

			if (match = /Browser\/AppleWebKit([0-9.]*)/i.exec(ua)) {
				this.engine.name = 'Webkit';
				this.engine.version = new Version({
					value: match[1]
				});
			}

			/****************************************************
			 *		KHTML
			 */

			if (match = /KHTML\/([0-9.]*)/.exec(ua)) {
				this.engine.name = 'KHTML';
				this.engine.version = new Version({
					value: match[1]
				});
			}

			/****************************************************
			 *		Gecko
			 */

			if (/Gecko/.exec(ua) && !/like Gecko/i.exec(ua)) {
				this.engine.name = 'Gecko';

				if (match = /; rv:([^\)]+)\)/.exec(ua)) {
					this.engine.version = new Version({
						value: match[1]
					});
				}
			}

			/****************************************************
			 *		Presto
			 */

			if (match = /Presto\/([0-9.]*)/.exec(ua)) {
				this.engine.name = 'Presto';
				this.engine.version = new Version({
					value: match[1]
				});
			}

			/****************************************************
			 *		Trident
			 */

			if (match = /Trident\/([0-9.]*)/.exec(ua)) {
				this.engine.name = 'Trident';
				this.engine.version = new Version({
					value: match[1]
				});

				if (this.browser.name == 'Internet Explorer') {
					if (parseVersion(this.engine.version) == 6 && parseFloat(this.browser.version) < 10) {
						this.browser.version = new Version({
							value: '10.0'
						});
						this.browser.mode = 'compat';
					}

					if (parseVersion(this.engine.version) == 5 && parseFloat(this.browser.version) < 9) {
						this.browser.version = new Version({
							value: '9.0'
						});
						this.browser.mode = 'compat';
					}

					if (parseVersion(this.engine.version) == 4 && parseFloat(this.browser.version) < 8) {
						this.browser.version = new Version({
							value: '8.0'
						});
						this.browser.mode = 'compat';
					}
				}

				if (this.os.name == 'Windows Phone') {
					if (parseVersion(this.engine.version) == 5 && parseFloat(this.os.version) < 7.5) {
						this.os.version = new Version({
							value: '7.5'
						});
					}
				}
			}


			/****************************************************
			 *		Corrections
			 */

			if (this.os.name == 'Android' && this.browser.stock) {
				this.browser.hidden = true;
			}

			if (this.os.name == 'iOS' && this.browser.name == 'Opera Mini') {
				this.os.version = null;
			}

			if (this.browser.name == 'Midori' && this.engine.name != 'Webkit') {
				this.engine.name = 'Webkit';
				this.engine.version = null;
			}

			if (this.device.type == 'television' && this.browser.name == 'Opera') {
				this.browser.name = 'Opera Devices';
				switch (true) {
					case this.engine.version.is('2.10'):
						this.browser.version = new Version({
							value: 3.2
						});
						break;
					case this.engine.version.is('2.9'):
						this.browser.version = new Version({
							value: 3.1
						});
						break;
					case this.engine.version.is('2.8'):
						this.browser.version = new Version({
							value: 3.0
						});
						break;
					case this.engine.version.is('2.7'):
						this.browser.version = new Version({
							value: 2.9
						});
						break;
					case this.engine.version.is('2.6'):
						this.browser.version = new Version({
							value: 2.8
						});
						break;
					case this.engine.version.is('2.4'):
						this.browser.version = new Version({
							value: 10.3
						});
						break;
					case this.engine.version.is('2.3'):
						this.browser.version = new Version({
							value: 10
						});
						break;
					case this.engine.version.is('2.2'):
						this.browser.version = new Version({
							value: 9.7
						});
						break;
					case this.engine.version.is('2.1'):
						this.browser.version = new Version({
							value: 9.6
						});
						break;
					default:
						this.browser.version = null;
				}

				this.os.name = null;
				this.os.version = null;
			}


			/****************************************************
			 *		Camouflage
			 */

			if (this.options.detectCamouflage) {

				if (match = /Mac OS X 10_6_3; ([^;]+); [a-z]{2}-(?:[a-z]{2})?\)/.exec(ua)) {
					this.browser.name = '';
					this.browser.version = null;
					this.browser.mode = 'desktop';

					this.os.name = 'Android';
					this.os.version = null;

					this.engine.name = 'Webkit';
					this.engine.version = null;

					this.device.model = match[1];
					this.device.type = 'mobile';

					var model = cleanupModel(this.device.model);
					if (typeof ANDROID_MODELS[model] != 'undefined') {
						this.device.manufacturer = ANDROID_MODELS[model][0];
						this.device.model = ANDROID_MODELS[model][1];
						if (typeof ANDROID_MODELS[model][2] != 'undefined') this.device.type = ANDROID_MODELS[model][2];
						this.device.identified = true;
					}

					this.features.push('foundDevice');
				}

				if (match = /Linux Ventana; [a-z]{2}-[a-z]{2}; (.+) Build/.exec(ua)) {
					this.browser.name = '';
					this.browser.version = null;
					this.browser.mode = 'desktop';

					this.os.name = 'Android';
					this.os.version = null;

					this.engine.name = 'Webkit';
					this.engine.version = null;

					this.device.model = match[1];
					this.device.type = 'mobile';

					var model = cleanupModel(this.device.model);
					if (typeof ANDROID_MODELS[model] != 'undefined') {
						this.device.manufacturer = ANDROID_MODELS[model][0];
						this.device.model = ANDROID_MODELS[model][1];
						if (typeof ANDROID_MODELS[model][2] != 'undefined') this.device.type = ANDROID_MODELS[model][2];
						this.device.identified = true;
					}

					this.features.push('foundDevice');
				}

				if (this.browser.name == 'Safari') {
					if (this.os.name != 'iOS' && /AppleWebKit\/([0-9]+.[0-9]+)/i.exec(ua)[1] != /Safari\/([0-9]+.[0-9]+)/i.exec(ua)[1]) {
						this.features.push('safariMismatch');
						this.camouflage = true;
					}

					if (this.os.name == 'iOS' && !ua.match(/^Mozilla/)) {
						this.features.push('noMozillaPrefix');
						this.camouflage = true;
					}

					if (!/Version\/[0-9\.]+/.exec(ua)) {
						this.features.push('noVersion');
						this.camouflage = true;
					}
				}

				if (this.browser.name == 'Chrome') {
					if (!/(?:Chrome|CrMo|CriOS)\/([0-9]{1,2}\.[0-9]\.[0-9]{3,4}\.[0-9]+)/.exec(ua)) {
						this.features.push('wrongVersion');
						this.camouflage = true;
					}
				}


				if (this.options.useFeatures) {
					/* If it claims not to be Trident, but it is probably Trident running camouflage mode */
					if (window.ActiveXObject) {
						this.features.push('trident');

						if (typeof this.engine.name != 'undefined' && this.engine.name != 'Trident') {
							this.camouflage = typeof this.browser.name == 'undefined' || this.browser.name != 'Maxthon';
						}
					}

					/* If it claims not to be Opera, but it is probably Opera running camouflage mode */
					if (window.opera) {
						this.features.push('presto');

						if (typeof this.engine.name != 'undefined' && this.engine.name != 'Presto') {
							this.camouflage = true;
						}

						if (this.browser.name == 'Internet Explorer') {
							this.camouflage = true;
						}
					}

					/* If it claims not to be Gecko, but it is probably Gecko running camouflage mode */
					if ('getBoxObjectFor' in document || 'mozInnerScreenX' in window) {
						this.features.push('gecko');

						if (typeof this.engine.name != 'undefined' && this.engine.name != 'Gecko') {
							this.camouflage = true;
						}

						if (this.browser.name == 'Internet Explorer') {
							this.camouflage = true;
						}
					}

					/* If it claims not to be Webkit, but it is probably Webkit running camouflage mode */
					if ('WebKitCSSMatrix' in window || 'WebKitPoint' in window || 'webkitStorageInfo' in window || 'webkitURL' in window) {
						this.features.push('webkit');

						if (typeof this.engine.name != 'undefined' && this.engine.name != 'Webkit') {
							this.camouflage = true;
						}

						if (this.browser.name == 'Internet Explorer') {
							this.camouflage = true;
						}
					}



					/* If it claims to be Safari and uses V8, it is probably an Android device running camouflage mode */
					if (this.engine.name == 'Webkit' && ({}.toString).toString().indexOf("\n") === -1) {
						this.features.push('v8');

						if (this.browser != null && this.browser.name == 'Safari') {
							this.camouflage = true;
						}
					}



					/* If we have an iPad that is not 768 x 1024, we have an imposter */
					if (this.device.model == 'iPad') {
						if ((screen.width != 0 && screen.height != 0) && (screen.width != 768 && screen.height != 1024) && (screen.width != 1024 && screen.height != 768)) {
							this.features.push('sizeMismatch');
							this.camouflage = true;
						}
					}

					/* If we have an iPhone or iPod that is not 320 x 480, we have an imposter */
					if (this.device.model == 'iPhone' || this.device.model == 'iPod') {
						if ((screen.width != 0 && screen.height != 0) && (screen.width != 320 && screen.height != 480) && (screen.width != 480 && screen.height != 320)) {
							this.features.push('sizeMismatch');
							this.camouflage = true;
						}
					}


					if (this.os.name == 'iOS' && this.os.version) {

						if (this.os.version.isOlder('4.0') && 'sandbox' in document.createElement('iframe')) {
							this.features.push('foundSandbox');
							this.camouflage = true;
						}

						if (this.os.version.isOlder('4.2') && 'WebSocket' in window) {
							this.features.push('foundSockets');
							this.camouflage = true;
						}

						if (this.os.version.isOlder('5.0') && !! window.Worker) {
							this.features.push('foundWorker');
							this.camouflage = true;
						}

						if (this.os.version.isNewer('2.1') && !window.applicationCache) {
							this.features.push('noAppCache');
							this.camouflage = true;
						}
					}

					if (this.os.name != 'iOS' && this.browser.name == 'Safari' && this.browser.version) {

						if (this.browser.version.isOlder('4.0') && !! window.applicationCache) {
							this.features.push('foundAppCache');
							this.camouflage = true;
						}

						if (this.browser.version.isOlder('4.1') && !! (window.history && history.pushState)) {
							this.features.push('foundHistory');
							this.camouflage = true;
						}

						if (this.browser.version.isOlder('5.1') && !! document.documentElement.webkitRequestFullScreen) {
							this.features.push('foundFullscreen');
							this.camouflage = true;
						}

						if (this.browser.version.isOlder('5.2') && 'FileReader' in window) {
							this.features.push('foundFileReader');
							this.camouflage = true;
						}
					}
				}
			}
		},

		toString: function() {
			var prefix = this.camouflage ? 'an unknown browser that imitates ' : '';
			var browser = os = device = engine = '';

			browser += (this.browser.name ? this.browser.name + (this.browser.channel ? ' ' + this.browser.channel : '') + (this.browser.version ? ' ' + this.browser.version.toString() : '') : '');
			os += (this.os.name ? this.os.name + (this.os.version ? ' ' + this.os.version.toString() : '') : '');
			engine += (typeof this.engine.name != 'undefined' && this.engine.name ? this.engine.name : '');

			if (this.device.identified) device += (typeof this.device.manufacturer != 'undefined' && this.device.manufacturer ? this.device.manufacturer + ' ' : '') + (typeof this.device.model != 'undefined' && this.device.model ? this.device.model : '');
			else device += (typeof this.device.model != 'undefined' && this.device.model ? 'unrecognized device (' + this.device.model + ')' : '');

			if (!device && !os && this.device.type == 'television') {
				device = 'television';
			}

			if (!device && this.device.type == 'emulator') {
				device = 'emulator';
			}

			if (browser && os && device) {
				return prefix + browser + ' on a ' + device + ' running ' + os;
			} else if (browser && !os && device) {
				return prefix + browser + ' on a ' + device;
			} else if (browser && os && !device) {
				return prefix + browser + ' on ' + os;
			} else if (!browser && os && device) {
				return prefix + 'a ' + device + ' running ' + os;
			} else if (browser && !os && !device) {
				return prefix + browser;
			} else if (!browser && !os && device) {
				return prefix + 'a ' + device;
			} else if (this.device.type == 'desktop' && os && engine != '' && !device) {
				return 'an unknown browser based on ' + engine + ' running on ' + os;
			} else if (this.browser.stock && os && !device) {
				return os;
			} else if (this.browser.stock && engine != '' && !device) {
				return 'an unknown browser based on ' + engine;
			} else {
				return 'an unknown browser';
			}
		}
	};

	function cleanupModel(s) {
		s = typeof s == 'undefined' ? '' : s;

		s = s.replace(/_TD$/, '');
		s = s.replace(/_CMCC$/, '');

		s = s.replace(/_/g, " ");
		s = s.replace(/^\s+|\s+$/g, "");
		s = s.replace(/\/[^/]+$/, "");
		s = s.replace(/\/[^/]+ Android\/.*/, "");

		s = s.replace(/^tita on /, '');
		s = s.replace(/^Android on /, '');
		s = s.replace(/^Android for /, '');
		s = s.replace(/^ICS AOSP on /, '');
		s = s.replace(/^Full AOSP on /, '');
		s = s.replace(/^Full Android on /, '');
		s = s.replace(/^Full Cappuccino on /, '');
		s = s.replace(/^Full MIPS Android on /, '');
		s = s.replace(/^Full Android/, '');

		s = s.replace(/^Acer ?/i, '');
		s = s.replace(/^Iconia /, '');
		s = s.replace(/^Ainol /, '');
		s = s.replace(/^Coolpad ?/i, 'Coolpad ');
		s = s.replace(/^ALCATEL /, '');
		s = s.replace(/^Alcatel OT-(.*)/, 'one touch $1');
		s = s.replace(/^YL-/, '');
		s = s.replace(/^Novo7 ?/i, 'Novo7 ');
		s = s.replace(/^GIONEE /, '');
		s = s.replace(/^HW-/, '');
		s = s.replace(/^Huawei[ -]/i, 'Huawei ');
		s = s.replace(/^SAMSUNG[ -]/i, '');
		s = s.replace(/^SonyEricsson/, '');
		s = s.replace(/^Lenovo Lenovo/, 'Lenovo');
		s = s.replace(/^LNV-Lenovo/, 'Lenovo');
		s = s.replace(/^Lenovo-/, 'Lenovo ');
		s = s.replace(/^(LG)[ _\/]/, '$1-');
		s = s.replace(/^(HTC.*)\s(?:v|V)?[0-9.]+$/, '$1');
		s = s.replace(/^(HTC)[-\/]/, '$1 ');
		s = s.replace(/^(HTC)([A-Z][0-9][0-9][0-9])/, '$1 $2');
		s = s.replace(/^(Motorola[\s|-])/, '')
		s = s.replace(/^(Moto|MOT-)/, '')

		s = s.replace(/-?(orange(-ls)?|vodafone|bouygues)$/i, '');
		s = s.replace(/http:\/\/.+$/i, '');

		s = s.replace(/^\s+|\s+$/g, "");

		return s;
	}

	function parseVersion(version) {
		version = version.toString();
		var components = version.split('.');
		var major = components.shift();
		return parseFloat(major + '.' + components.join(''));
	}



	return Detected;

})();
var userAgent = function(ua) {
	var UA = useragent_base;
	var a = new UA(ua);
	var match;
	var match1;

	/***************** handle mobile device *****************/
	if (a.device.type == "mobile" || a.device.type == 'tablet') {

		//get manufacturer through the key words
		if (match = ua.match(/(ZTE|Samsung|Motorola|HTC|Coolpad|Huawei|Lenovo|LG|Sony Ericsson|Oppo|TCL|Vivo|Sony|Meizu|Nokia)/i)){
			a.device['manufacturer'] = match[1];
			if (a.device['model'] && a.device['model'].indexOf(match[1]) >= 0) {
				a.device['model'] = a.device['model'].replace(match[1], '');
			}
		}
		// handle Apple
		// 苹果就3种:iPod iPad iPhone
		if (match = ua.match(/(iPod|iPad|iPhone)/i)) {
			a.device['manufacturer'] = 'Apple';
			a.device['model'] = match[1];
		}
		// handle Samsung
		// 特殊型号可能以xxx-开头 或者直接空格接型号 兼容build结尾或直接)结尾
		// Galaxy nexus才是三星 nexus是google手机
		// 三星手机类型：galaxy xxx|SM-xxx|GT-xxx|SCH-xxx|SGH-xxx|SPH-xxx|SHW-xxx  若这些均未匹配到，则启用在中关村在线爬取到的机型白名单进行判断
		else if (match = ua.match(/[-\s](Galaxy[\s-_]nexus|Galaxy[\s-_]\w*[\s-_]\w*|Galaxy[\s-_]\w*|SM-\w*|GT-\w*|s[cgp]h-\w*|shw-\w*|ATIV|i9070|omnia|s7568|A3000|A3009|A5000|A5009|A7000|A7009|A8000|C101|C1116|C1158|E400|E500F|E7000|E7009|G3139D|G3502|G3502i|G3508|G3508J|G3508i|G3509|G3509i|G3558|G3559|G3568V|G3586V|G3589W|G3606|G3608|G3609|G3812|G388F|G5108|G5108Q|G5109|G5306W|G5308W|G5309W|G550|G600|G7106|G7108|G7108V|G7109|G7200|G720NO|G7508Q|G7509|G8508S|G8509V|G9006V|G9006W|G9008V|G9008W|G9009D|G9009W|G9198|G9200|G9208|G9209|G9250|G9280|I535|I679|I739|I8190N|I8262|I879|I879E|I889|I9000|I9060|I9082|I9082C|I9082i|I9100|I9100G|I9108|I9128|I9128E|I9128i|I9152|I9152P|I9158|I9158P|I9158V|I9168|I9168i|I9190|I9192|I9195|I9195I|I9200|I9208|I9220|I9228|I9260|I9268|I9300|I9300i|I9305|I9308|I9308i|I939|I939D|I939i|I9500|I9502|I9505|I9507V|I9508|I9508V|I959|J100|J110|J5008|J7008|N7100|N7102|N7105|N7108|N7108D|N719|N750|N7505|N7506V|N7508V|N7509V|N900|N9002|N9005|N9006|N9008|N9008S|N9008V|N9009|N9100|N9106W|N9108V|N9109W|N9150|N916|N9200|P709|P709E|P729|S6358|S7278|S7278U|S7562C|S7562i|S7898i|b9388)[\s\)]/i)){
			a.device['manufacturer'] = 'Samsung';
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z]+[0-9]+[A-Z]*,例如 G9006 G9006V 其实应该是G9006 另外三星只保留3位
			a.device['model'] = match[1].replace(/Galaxy S VI/i, 'Galaxy S6')
				.replace(/Galaxy S V/i, 'Galaxy S5')
				.replace(/Galaxy S IV/i, 'Galaxy S4')
				.replace(/Galaxy s III/i, 'Galaxy S3')
				.replace(/Galaxy S II/i, 'Galaxy S2')
				.replace(/Galaxy S I/i, 'Galaxy S1')
				.replace(/([a-z]+[0-9]{3})[0-9]?[a-z]*/i, "$1");
		} 
		// 针对三星已经匹配出的数据做处理
		else if (a.device['manufacturer'] && a.device['manufacturer'].toLowerCase() == 'samsung' && a.device['model']) {
			a.device['model'] = a.device['model'].replace(/Galaxy S VI/i, 'Galaxy S6')
				.replace(/Galaxy S V/i, 'Galaxy S5')
				.replace(/Galaxy S IV/i, 'Galaxy S4')
				.replace(/Galaxy s III/i, 'Galaxy S3')
				.replace(/Galaxy S II/i, 'Galaxy S2')
				.replace(/Galaxy S I/i, 'Galaxy S1')
				.replace(/([a-z]+[0-9]{3})[0-9]?[a-z]*/i, "$1");
		}
		// handle Huawei
		// 兼容build结尾或直接)结尾
		// 华为机型特征：Huawei[\s-_](\w*[-_]?\w*)  或者以 7D-  ALE-  CHE-等开头 
		else if (match = ua.match(/(Huawei[\s-_](\w*[-_]?\w*)|\s(7D-\w*|ALE-\w*|ATH-\w*|CHE-\w*|CHM-\w*|Che1-\w*|Che2-\w*|D2-\w*|G616-\w*|G620S-\w*|G621-\w*|G660-\w*|G750-\w*|GRA-\w*|Hol-\w*|MT2-\w*|MT7-\w*|PE-\w*|PLK-\w*|SC-\w*|SCL-\w*|H60-\w*|H30-\w*)[\s\)])/i)){
			a.device['manufacturer'] = 'Huawei';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：xxx-[A-Z][0-9]+ 例如  H30-L01  H30-L00  H30-L20  都应该是 H30-L
			// h30-l  h30-h  h30-t 都是H30
			if (match = a.device['model'].match(/(\w*)[\s-_]+[a-z0-9]+/i)) {
				a.device['model'] = match[1];
			}
		}
		// handle Xiaomi
		// 兼容build结尾或直接)结尾 以及特殊的HM处理方案(build/hm2013011)
		// xiaomi手机类型: mi m1 m2 m3 hm 开头
		// hongmi有特殊判断build/hm2015011
		else if (match = ua.match(/;\s(mi|m1|m2|m3|m4|hm)(\s*\w*)[\s\)]/i)){
			var tmp_match;
			if (tmp_match = ua.match(/(meitu|MediaPad)/i)) {
				// 美图手机名字冒充小米 比如 meitu m4 mizhi
				a.device['manufacturer'] = tmp_match[1];
				a.device['model'] = '';
			} 
			// 若匹配出的 match[2]没空格 会出现很多例如 mizi mizhi miha 但也会出现mi3 minote之类 特殊处理下
			else if (match[2].length>0 && !((/\s/).test(match[2]))) {
				if (tmp_match = match[2].match(/(\d)/i)) {
					a.device['model'] = match[1] + '-' + tmp_match[1];
				}
			} else {
				a.device['manufacturer'] = 'Xiaomi';
				if (match[2] && match[2].length > 0){
					match[2] = match[2].replace(/\s/, '');
					a.device['model'] = (match[1].substr(match[1].length -2) + '-'+ match[2]).replace(/m(\d)-/i, "MI-$1");
				} else {
					a.device['model'] = (match[1].substr(match[1].length -2)).replace(/m(\d)/i, "MI-$1");
				}

				// 解决移动联通等不同发行版导致的机型不同问题
				// 特征：mi-3c,例如mi-4LTE mi-4 其实应该是 mi-4
				if (/(mi|hm)(-\d)/i.test(a.device['model'])){
					// 看看是不是 MI-3S  MI-4S....
					if (match = a.device['model'].match(/(mi|hm)(-\ds)/i)) {
						a.device['model'] = match[1] + match[2];
					} 
					// 防止 MI-20150XX等滥竽充数成为MI-2
					else if (match = a.device['model'].match(/(mi|hm)(-\d{2})/i)) {
						a.device['model'] = match[1];
					}
					// 将mi-3c mi-3a mi-3w等合为mi-3
					else if (match = a.device['model'].match(/(mi|hm)(-\d)[A-Z]/i)) {
						a.device['model'] = match[1] + match[2];
					}
				}
				// 去除 mi-4g这样的东西
				if (match = a.device['model'].match(/(mi|hm)(-\dg)/i)){
					a.device['model'] = match[1];
				}
			}
		} else if (/build\/HM\d{0,7}\)/i.test(ua)) {
			a.device['manufacturer'] = 'Xiaomi';
			a.device['model'] = 'HM';
		} else if (a.device['manufacturer'] && a.device['manufacturer'].toLowerCase() == 'xiaomi' && a.device['model']) {
			var tmp_match;
			// 针对通过base库判断出数据时命名风格不同。特殊处理适配如下
			if (match = a.device['model'].match(/mi-one/i)) {
				a.device['model'] = 'MI-1';
			} 
			// mi 2
			else if (match = a.device['model'].match(/mi-two/i)) {
				a.device['model'] = 'MI-2';
			} 
			// 20150xxx2014501
			else if (match = a.device['model'].match(/\d{6}/i)) {
				a.device['model'] = '';
			} 
			else if (match = a.device['model'].match(/redmi/i)) {
				a.device['model'] = a.device['model'].toUpperCase().replace(/redmi/i, 'HM');
			}
			// m1 m2 m3 写法不标准 另外判断是否是 m1-s
			else if (match = a.device['model'].match(/(m\d)[\s-_](s?)/i)) {
				a.device['model'] = match[1].replace(/m/, 'MI-')+match[2];
			} 
			// mi-2w  mi-3w 等格式化为mi-2  mi-3
			else if (match = a.device['model'].match(/(hm|mi)[\s-_](\d?)[a-rt-z]/i)) {
				if(tmp_match = a.device['model'].match(/(mi|hm)[\s-_](note|pad)(\d?s?)/i)) {
					a.device['model'] = tmp_match[1] + '-' + tmp_match[2]+tmp_match[3];
				} else {
					a.device['model'] = match[2] ? match[1] + '-' + match[2] : match[1];
				}
			} 
			// 处理hm
			else if (match = a.device['model'].match(/hm/i)) {
				// 判断是不是 hm-201xxx充数
				if (match = a.device['model'].match(/(hm)[\s-_](\d{2})/i)){
					a.device['model'] = 'HM';
				} 
				// 判断是不是 hm-2s hm-1s
				else if (match = a.device['model'].match(/(hm)[\s-_](\ds)/i)){
					a.device['model'] = 'HM-'+match[2];
				} else if (match = a.device['model'].match(/(hm)[\s-_](\d)[a-z]/i)){
					a.device['model'] = 'HM-'+match[2];
				} else {
					a.device['model'] = 'HM';
				}
				// 过滤类似 2g 3g等数据
				if (/hm-\dg/.test(a.device['model'])) {
					a.device['model'] = 'HM';
				}
			} 
		}
		// handle Vivo
		// 兼容build结尾或直接)结尾
		// vivo机型特征: Vivo[\s-_](\w*)  或者以 E1  S11t  S7t 等开头
		else if (match = ua.match(/(vivo[\s-_](\w*)|\s(E1\w?|E3\w?|E5\w?|V1\w?|V2\w?|S11\w?|S12\w?|S1\w?|S3\w?|S6\w?|S7\w?|S9\w?|X1\w?|X3\w?|X520\w?|X5\w?|X5Max|X5Max+|X5Pro|X5SL|X710F|X710L|Xplay|Xshot|Xpaly3S|Y11\w?|Y11i\w?|Y11i\w?|Y13\w?|Y15\w?|Y17\w?|Y18\w?|Y19\w?|Y1\w?|Y20\w?|Y22\w?|Y22i\w?|Y23\w?|Y27\w?|Y28\w?|Y29\w?|Y33\w?|Y37\w?|Y3\w?|Y613\w?|Y622\w?|Y627\w?|Y913\w?|Y923\w?|Y927\w?|Y928\w?|Y929\w?|Y937\w?)[\s\)])/i)) {
			a.device['manufacturer'] = 'Vivo';
			a.device['model'] = match[1];
			// 首先剔除 viv-  vivo-  bbg- 等打头的内容
			a.device['model'] = a.device['model'].replace(/(viv[\s-_]|vivo[\s-_]|bbg[\s-_])/i, '');
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  X5F X5L X5M X5iL 都应该是 X5
			if (match = a.device['model'].match(/([a-z]+[0-9]+)i?[a-z]?[\s-_]?/i)) {
				a.device['model'] = match[1];
			}
		}
		// handle Oppo
		else if (match = ua.match(/(Oppo[\s-_](\w*)|\s(1100|1105|1107|3000|3005|3007|6607|A100|A103|A105|A105K|A109|A109K|A11|A113|A115|A115K|A121|A125|A127|A129|A201|A203|A209|A31|A31c|A31t|A31u|A51kc|A520|A613|A615|A617|E21W|Find|Mirror|N5110|N5117|N5207|N5209|R2010|R2017|R6007|R7005|R7007|R7c|R7t|R8000|R8007|R801|R805|R807|R809T|R8107|R8109|R811|R811W|R813T|R815T|R815W|R817|R819T|R8200|R8205|R8207|R821T|R823T|R827T|R830|R830S|R831S|R831T|R833T|R850|Real|T703|U2S|U521|U525|U529|U539|U701|U701T|U705T|U705W|X9000|X9007|X903|X905|X9070|X9077|X909|Z101|R829T)[\s\)])/i)){
			a.device['manufacturer'] = 'Oppo';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  A31c A31s 都应该是 A31
			// 对 Plus 做特殊处理
			if (match = a.device['model'].match(/([a-z]+[0-9]+)-?(plus)/i)) {
				a.device['model'] = match[1] + '-' + match[2];
			} else if (match = a.device['model'].match(/(\w*-?[a-z]+[0-9]+)/i)) {
				a.device['model'] = match[1];
			} 
		} else if (a.device['manufacturer'] && a.device['manufacturer'].toLowerCase() == 'oppo' && a.device['model']) {
			// 针对base库的数据做数据格式化处理
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  A31c A31s 都应该是 A31
			// 对 Plus 做特殊处理
			if (match = a.device['model'].match(/([a-z]+[0-9]+)-?(plus)/i)) {
				a.device['model'] = match[1] + '-' + match[2];
			} else if (match = a.device['model'].match(/(\w*-?[a-z]+[0-9]+)/i)) {
				a.device['model'] = match[1];
			}
		}
		// handle Lenovo
		// 兼容build结尾或直接)结尾 兼容Lenovo-xxx/xxx以及Leveno xxx build等
		else if (match = ua.match(/(Lenovo[\s-_](\w*[-_]?\w*)|\s(A3580|A3860|A5500|A5600|A5860|A7600|A806|A800|A808T|A808T-I|A936|A938t|A788t|K30-E|K30-T|K30-W|K50-T3s|K50-T5|K80M|K910|K910e|K920|S90-e|S90-t|S90-u|S968T|X2-CU|X2-TO|Z90-3|Z90-7)[\s\)])/i)){
			a.device['manufacturer'] = 'Lenovo';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  A360t A360 都应该是 A360
			if (match = a.device['model'].match(/([a-z]+[0-9]+)/i)) {
				a.device['model'] = match[1];
			}
		}
		// handle coolpad
		else if (match = ua.match(/(Coolpad[\s-_](\w*)|\s(7295C|7298A|7620L|8908|8085|8970L|9190L|Y80D)[\s\)])/i)){
			a.device['manufacturer'] = 'Coolpad';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}

			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  8297-t01 8297-c01 8297w 都应该是 8297
			if (match = a.device['model'].match(/([a-z]?[0-9]+)/i)) {
				a.device['model'] = match[1];
			}
		} else if(a.device['manufacturer'] && a.device['manufacturer'].toLowerCase() == 'coolpad' && a.device['model']) {
			// base 库适配
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  8297-t01 8297-c01 8297w 都应该是 8297
			if (match = a.device['model'].match(/([a-z]?[0-9]+)/i)) {
				a.device['model'] = match[1];
			}
		}
		// handle meizu
		else if (match = ua.match(/\s(mx\d*\w*|mz-(\w*))\s(\w*)\s*\w*\s*build/i)){
			a.device['manufacturer'] = 'Meizu';
			var tmp_model = match[2] ? match[2] : match[1];
			if (match[3]){
				a.device['model'] = tmp_model + '-' + match[3];
			} else {
				a.device['model'] = tmp_model+'';
			}
		} else if (match = ua.match(/M463C|M35\d/i)) {
			a.device['manufacturer'] = 'Meizu';
			a.device['model'] = match[1];
		}
		// handle htc
		else if (match = ua.match(/(Htc[-_\s](\w*)|\s(601e|606w|608t|609d|610t|6160|619d|620G|626d|626s|626t|626w|709d|801e|802d|802t|802w|809D|816d|816e|816t|816v|816w|826d|826s|826t|826w|828w|901e|919d|A310e|A50AML|A510e|A620d|A620e|A620t|A810e|A9191|Aero|C620d|C620e|C620t|D316d|D516d|D516t|D516w|D820mt|D820mu|D820t|D820ts|D820u|D820us|E9pt|E9pw|E9sw|E9t|HD7S|M8Et|M8Sd|M8St|M8Sw|M8d|M8e|M8s|M8si|M8t|M8w|M9W|M9ew|Phablet|S510b|S510e|S610d|S710d|S710e|S720e|S720t|T327t|T328d|T328t|T328w|T329d|T329t|T329w|T528d|T528t|T528w|T8698|WF5w|X315e|X710e|X715e|X720d|X920e|Z560e|Z710e|Z710t|Z715e)[\s\)])/)) {
			a.device['manufacturer'] = 'Htc';
			a.device['model'] = match[1];
		} 
		// handle Gionee
		else if (match = ua.match(/(Gionee[\s-_](\w*)|\s(GN\d+\w*)[\s\)])/i)){
			a.device['manufacturer'] = 'Gionee';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
		} 
		// handle LG
		else if (match = ua.match(/(LG[-_](\w*)|\s(D728|D729|D802|D855|D856|D857|D858|D859|E985T|F100L|F460|H778|H818|H819|P895|VW820)[\s\)])/i)){
			a.device['manufacturer'] = 'Lg';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
		} 
		// handle tcl
		else if (match = ua.match(/(Tcl[\s-_](\w*)|\s(H916T|P588L|P618L|P620M|P728M)[\s\)])/)) {
			a.device['manufacturer'] = 'Tcl';
			a.device['model'] = match[1];
		}
		// ZTE
		else if (match = ua.match(/(V9180|N918)/i)) {
			a.device['manufacturer'] = 'Zte';
			a.device['model'] = match[1];
		} else if (a.device['manufacturer'] && a.device['manufacturer'].toLowerCase() == 'zte' && a.device['model']) {
			// base 库适配
			// 解决移动联通等不同发行版导致的机型不同问题
			// 特征：[A-Z][0-9]+[A-Z] 例如  Q505T Q505u 都应该是 Q505
			if (match = a.device['model'].match(/([a-z]?[0-9]+)/i)) {
				a.device['model'] = match[1];
			}		
		}
		// UIMI
		else if (match = ua.match(/(UIMI\w*|umi\w*)[\s-_](\w*)\s*\w*\s*build/i)) {
			a.device['manufacturer'] = 'Uimi';
			if (match[2]){
				a.device['model'] = match[1] + '-' + match[2];
			} else {
				a.device['model'] = match[1]+'';
			}
		}
		// eton
		else if (match = ua.match(/eton[\s-_](\w*)/i)) {
			a.device['manufacturer'] = 'Eton';
			a.device['model'] = match[1];
		} 
		// Smartisan
		else if (match = ua.match(/(SM705|SM701|YQ601|YQ603)/i)) {
			a.device['manufacturer'] = 'Smartisan';
			a.device['model'] = ({
		        'SM705': 'T1',
		        'SM701': 'T1',
		        'YQ601': 'U1',
		        'YQ603': 'U1'
		    })[match[1]] || match[1];
		} 
		// handle Asus
		else if (match = ua.match(/(Asus[\s-_](\w*)|\s(A500CG|A500KL|A501CG|A600CG|PF400CG|PF500KL|T001|X002|X003|ZC500TG|ZE550ML|ZE551ML)[\s\)])/i)){
			a.device['manufacturer'] = 'Asus';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
		} 
		// handle nubia
		else if (match = ua.match(/(Nubia[-_\s](\w*)|(NX501|NX505J|NX506J|NX507J|NX503A|nx\d+\w*)[\s\)])/i)){
			a.device['manufacturer'] = 'Nubia';
			if (match[2]){
				a.device['model'] = match[2];
			} else if (match[3]) {
				a.device['model'] = match[3];
			}
		} 
		// handle haier
		else if (match = ua.match(/(HT-\w*)|Haier[\s-_](\w*-?\w*)/i)) {
			a.device['manufacturer'] = 'Haier';
			if (match[1]) {
				a.device['model'] = match[1];
			} else if (match[2]) {
				a.device['model'] = match[2];
			}
		}
		// tianyu
		else if (match = ua.match(/K-Touch[\s-_](tou\s?ch\s?(\d)|\w*)/i)) {
			a.device['manufacturer'] = 'K-Touch';
			if (match[2]) {
				a.device['model'] = 'Ktouch'+match[2];
			} else {
				a.device['model'] = match[1];
			}
		}

		// DOOV
		else if (match = ua.match(/Doov[\s-_](\w*)/i)) {
			a.device['manufacturer'] = 'Doov';
			a.device['model'] = match[1];
		}
		// coobee
		else if (/koobee/i.test(ua)){
			a.device['manufacturer'] = 'koobee';
		}

		// sony
		else if (/C69/i.test(ua)){
			a.device['manufacturer'] = 'Sony';
		}

		// haojixing
		else if (/N787|N818S/i.test(ua)) {
			a.device['manufacturer'] = 'Haojixing';
		}

		// haisense
		else if (match = ua.match(/(hs-|Hisense[\s-_])(\w*)/i)) {
			a.device['manufacturer'] = 'Hisense';
			a.device['model'] = match[2];
		}

		// format the style of manufacturer
		if (a.device['manufacturer']) {
			a.device['manufacturer'] = a.device['manufacturer'].substr(0,1).toUpperCase()+a.device['manufacturer'].substr(1).toLowerCase();
		}
		// format the style of model
		if (a.device['model']) {
			a.device['model'] = a.device['model'].toUpperCase().replace(/-+|_+|\s+/g, ' ');
			a.device['model'] = a.device['model'].match(/\s*(\w*\s*\w*)/)[1].replace(/\s+/, '-');

			// 针对三星、华为做去重的特殊处理
			if(a.device['manufacturer'] == 'Samsung') {
				a.device['model'] = ({
			        'SCH-I95': 'GT-I950',
			        'SCH-I93': 'GT-I930',
			        'SCH-N71': 'GT-N710',
			        'SCH-I86': 'GT-I855',
			        'SCH-N71': 'GT-N710',
			        'SCH-I73': 'GT-S789',
			        'SCH-P70': 'GT-I915'
			    })[a.device['model']] || a.device['model'];
			} else if(a.device['manufacturer'] == 'Huawei') {
				a.device['model'] = ({
			        'CHE1': 'CHE',
			        'CHE2': 'CHE',
			        'G620S': 'G621',
			        'C8817D': 'G621'
			    })[a.device['model']] || a.device['model'];
			}
		}

		// 针对xiaomi 的部分数据没有格式化成功，格式化1次
		if(a.device['manufacturer'] && a.device['manufacturer'] == 'Xiaomi') {
			if (match = a.device['model'].match(/(hm|mi)-(note)/i)) {
				a.device['model'] = match[1] + '-' + match[2];
			} else if (match = a.device['model'].match(/(hm|mi)-(\ds?)/i)) {
				a.device['model'] = match[1] + '-' + match[2];
			} else if (match = a.device['model'].match(/(hm|mi)-(\d)[a-rt-z]/i)) {
				a.device['model'] = match[1] + '-' + match[2];
			}
		}
	}
	
	/***************** handle browser *****************/
	if (!a.browser['name']) {
		// ua = ua.toLowerCase();
		if (a.device.type == "desktop") {
			/**
			 * 360 security Explorer
			 */
			if (match = /360se(?:[ \/]([\w.]+))?/i.exec(ua)) {
				a.browser.name = "360 security Explorer";
				a.browser.version = {
					'original':match[1]
				};
			}
			/**
			 * the world
			 */
			else if (match = /the world(?:[ \/]([\w.]+))?/i.exec(ua)) {
				a.browser.name = "the world";
				a.browser.version = {
					'original':match[1]
				};
			}
			/**
			 * tencenttraveler
			 */
			else if (match = /tencenttraveler ([\w.]+)/i.exec(ua)) {
				a.browser.name = "tencenttraveler";
				a.browser.version = {
					'original':match[1]
				};
			}

		} else if (a.device.type == "mobile" || a.device.type == "tablet") {
			/**
			 * BaiduHD
			 */
			if (match = /BaiduHD\s+([\w.]+)/i.exec(ua)){
				a.browser.name = "BaiduHD";
				a.browser.version = {
					'original':match[1]
				};
			}
			/**
			 * 360 Browser
			 */
			else if (match = /360.s*aphone\s*browser\s*\(version\s*([\w.]+)\)/i.exec(ua)) {
				a.browser.name = "360 Browser";
				a.browser.version = {
					'original':match[1]
				};
			}
			/**
			 * Baidu Browser
			 */
			else if (match = /flyflow\/([\w.]+)/i.exec(ua)) {
				a.browser.name = "Baidu Browser";
				a.browser.version = {
					'original':match[1]
				};
			}

			/**
			 * Baidu HD
			 */
			else if (match = /baiduhd ([\w.]+)/i.exec(ua)) {
				a.browser.name = "Baidu HD";
				a.browser.version = {
					'original': match[1]
				};
			}

			/**
			 * LieBaoFast
			 */
			else if (match = /LieBaoFast\/([\w.]+)/i.exec(ua)) {
				a.browser.name = "LieBao Fast";
				a.browser.version = {
					'original': match[1]
				};
			}

			/**
			 * LieBao
			 */
			else if (match = /LieBao\/([\w.]+)/i.exec(ua)) {
				a.browser.name = "LieBao";
				a.browser.version = {
					'original': match[1]
				};
			}

			/**
			 * Android Google Browser
			 */
			
			else if (a.os.name == 'Android' && /safari/i.test(ua) && (match = /version\/([0-9\.]+)/i.exec(ua))) {
				a.browser.name = 'Google Browser';
				a.browser.version = {'original':match[1]};
			}

			/**
			 * "Mozilla/5.0 (iPad; CPU OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B206" belongs to Safari
			 */
			else if (/(ipad|iphone).* applewebkit\/.* mobile/i.test(ua)) {
				a.browser.name = 'Safari';
			}
		}
		if (/baiduboxapp/i.test(ua)) {
			a.browser.name = '百度框';
			// a.browser.name = 'baidu box';
		} else if (/BaiduLightAppRuntime/i.test(ua)) {
			a.browser.name = '轻应用runtime';
			// a.browser.name = 'qing runtime';
		} else if (/MicroMessenger/i.test(ua)) {
			a.browser.name = '微信';
			// a.browser.name = 'weixin';
		} else if (/Weibo/i.test(ua)) {
			a.browser.name = '微博';
			// a.browser.name = 'weibo';
		} else if (/MQQ/i.test(ua)) {
			a.browser.name = '手机QQ';
			// a.browser.name = 'mobile qq';
		} else if ( /hao123/i.test(ua)){
			a.browser.name = 'hao123';
		}
	}
	if (match = /UCBrowser\/([\w.]+)/i.exec(ua)) {
		a.browser.name = "UC Browser";
		a.browser.version = {
			'original': match[1]
		};
	} 
	// IE 11
	else if (/Trident\/7/i.test(ua) && /rv:11/i.test(ua)) {
		a.browser.name = 'Internet Explorer';
		a.browser.version = {
			major: "11",
			original: "11"
		};
	}
	// Microsoft Edge
	else if (/Edge\/12/i.test(ua) && /Windows Phone|Windows NT/i.test(ua)) {
		a.browser.name = 'Microsoft Edge';
		a.browser.version = {
			major: "12",
			original: "12"
		};
	}
	// miui browser
	else if (match = /miuibrowser\/([\w.]+)/i.exec(ua)) {
		a.browser.name = "miui browser";
		a.browser.version = {'original':match[1]};
	}
	// Safari
	if (!a.browser.name) {
		if (match = /Safari\/([\w.]+)/i.exec(ua) && /Version/i.test(ua)) {
			a.browser.name = "Safari";
		}
	}
	if (a.browser.name && !a.browser.version) {
		if (match = /Version\/([\w.]+)/i.exec(ua)) {
			a.browser.version =  {
				'original': match[1]
			};
		}
	}

	// if (a.os.name == 'Windows' && a.os.version) {
	// 	// Windows 8.1
	// 	if (a.os.version.alias == 'NT 6.3') {
	// 		a.os.version.alias = '8.1';
	// 	}
	// }
	/***************** handle os *****************/
	if (a.os.name == 'Windows' || /Windows/i.test(ua)) {
		a.os.name = 'Windows';
		if (/NT 6.3/i.test(ua)) {
			a.os.version = {
				alias: '8.1',
				original: "8.1"
			}
		} else if (/NT 6.4/i.test(ua) || /NT 10.0/i.test(ua)) {
			a.os.version = {
				alias: '10',
				original: "10"
			}
		}
	} else if (a.os.name == 'Mac OS X') {
		a.os.name = 'Mac OS X';
		if (match = /Mac OS X[\s\_\-\/](\d+[\.\-\_]\d+[\.\-\_]?\d*)/i.exec(ua)) {
			a.os.version = {
				alias: match[1].replace(/_/g, '.'),
				original: match[1].replace(/_/g, '.')
			}
		} else {
			a.os.version = {
				alias: '',
				original: ''
			}
		}
	} else if (/Android/i.test(a.os.name)) {
		if (match = ua.match(/Android[\s\_\-\/i686]?[\s\_\-\/](\d+[\.\-\_]\d+[\.\-\_]?\d*)/i)) {
			a.os.version = {
				alias: match[1],
				original: match[1]
			}
		}
	}
	
	return a;
}

/*! layer-v2.3 弹层组件 License LGPL  http://layer.layui.com/ By 贤心 */
; !function(a,b) { "use strict"; var c,d,e = { getPath: function() { var a = document.scripts,b = a[a.length - 1],c = b.src; if(!b.getAttribute("merge")) return c.substring(0,c.lastIndexOf("/") + 1) }(),enter: function(a) { 13 === a.keyCode && a.preventDefault() },config: {},end: {},btn: ["&#x786E;&#x5B9A;","&#x53D6;&#x6D88;"],type: ["dialog","page","iframe","loading","tips"] },f = { v: "2.3",ie6: !!a.ActiveXObject && !a.XMLHttpRequest,index: 0,path: e.getPath,config: function(a,b) { var d = 0; return a = a || {},f.cache = e.config = c.extend(e.config,a),f.path = e.config.path || f.path,"string" == typeof a.extend && (a.extend = [a.extend]),f.use("skin/layer.css",a.extend && a.extend.length > 0 ? function g() { var c = a.extend; f.use(c[c[d] ? d : d - 1],d < c.length ? function() { return ++d,g }() : b) }() : b),this },use: function(a,b,d) { var e = c("head")[0],a = a.replace(/\s/g,""),g = /\.css$/.test(a),h = document.createElement(g ? "link" : "script"),i = "layui_layer_" + a.replace(/\.|\//g,""); return f.path ? (g && (h.rel = "stylesheet"),h[g ? "href" : "src"] = /^http:\/\//.test(a) ? a : f.path + a,h.id = i,c("#" + i)[0] || e.appendChild(h),function j() { (g ? 1989 === parseInt(c("#" + i).css("width")) : f[d || i]) ? function() { b && b(); try { g || e.removeChild(h) } catch(a) { } }() : setTimeout(j,100) }(),this) : void 0 },ready: function(a,b) { var d = "function" == typeof a; return d && (b = a),f.config(c.extend(e.config,function() { return d ? {} : { path: a } }()),b),this },alert: function(a,b,d) { var e = "function" == typeof b; return e && (d = b),f.open(c.extend({ content: a,yes: d },e ? {} : b)) },confirm: function(a,b,d,g) { var h = "function" == typeof b; return h && (g = d,d = b),f.open(c.extend({ content: a,btn: e.btn,yes: d,btn2: g },h ? {} : b)) },msg: function(a,d,g) { var i = "function" == typeof d,j = e.config.skin,k = (j ? j + " " + j + "-msg" : "") || "layui-layer-msg",l = h.anim.length - 1; return i && (g = d),f.open(c.extend({ content: a,time: 3e3,shade: !1,skin: k,title: !1,closeBtn: !1,btn: !1,end: g },i && !e.config.skin ? { skin: k + " layui-layer-hui",shift: l } : function() { return d = d || {},(-1 === d.icon || d.icon === b && !e.config.skin) && (d.skin = k + " " + (d.skin || "layui-layer-hui")),d }())) },load: function(a,b) { return f.open(c.extend({ type: 3,icon: a || 0,shade: .01 },b)) },tips: function(a,b,d) { return f.open(c.extend({ type: 4,content: [a,b],closeBtn: !1,time: 3e3,shade: !1,maxWidth: 210 },d)) } },g = function(a) { var b = this; b.index = ++f.index,b.config = c.extend({},b.config,e.config,a),b.creat() }; g.pt = g.prototype; var h = ["layui-layer",".layui-layer-title",".layui-layer-main",".layui-layer-dialog","layui-layer-iframe","layui-layer-content","layui-layer-btn","layui-layer-close"]; h.anim = ["layer-anim","layer-anim-01","layer-anim-02","layer-anim-03","layer-anim-04","layer-anim-05","layer-anim-06"],g.pt.config = { type: 0,shade: .3,fix: !0,move: h[1],title: "&#x4FE1;&#x606F;",offset: "auto",area: "auto",closeBtn: 1,time: 0,zIndex: 19891014,maxWidth: 360,shift: 0,icon: -1,scrollbar: !0,tips: 2 },g.pt.vessel = function(a,b) { var c = this,d = c.index,f = c.config,g = f.zIndex + d,i = "object" == typeof f.title,j = f.maxmin && (1 === f.type || 2 === f.type),k = f.title ? '<div class="layui-layer-title" style="' + (i ? f.title[1] : "") + '">' + (i ? f.title[0] : f.title) + "</div>" : ""; return f.zIndex = g,b([f.shade ? '<div class="layui-layer-shade" id="layui-layer-shade' + d + '" times="' + d + '" style="' + ("z-index:" + (g - 1) + "; background-color:" + (f.shade[1] || "#000") + "; opacity:" + (f.shade[0] || f.shade) + "; filter:alpha(opacity=" + (100 * f.shade[0] || 100 * f.shade) + ");") + '"></div>' : "",'<div class="' + h[0] + " " + (h.anim[f.shift] || "") + (" layui-layer-" + e.type[f.type]) + (0 != f.type && 2 != f.type || f.shade ? "" : " layui-layer-border") + " " + (f.skin || "") + '" id="' + h[0] + d + '" type="' + e.type[f.type] + '" times="' + d + '" showtime="' + f.time + '" conType="' + (a ? "object" : "string") + '" style="z-index: ' + g + "; width:" + f.area[0] + ";height:" + f.area[1] + (f.fix ? "" : ";position:absolute;") + '">' + (a && 2 != f.type ? "" : k) + '<div id="' + (f.id || "") + '" class="layui-layer-content' + (0 == f.type && -1 !== f.icon ? " layui-layer-padding" : "") + (3 == f.type ? " layui-layer-loading" + f.icon : "") + '">' + (0 == f.type && -1 !== f.icon ? '<i class="layui-layer-ico layui-layer-ico' + f.icon + '"></i>' : "") + (1 == f.type && a ? "" : f.content || "") + '</div><span class="layui-layer-setwin">' + function() { var a = j ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max" href="javascript:;"></a>' : ""; return f.closeBtn && (a += '<a class="layui-layer-ico ' + h[7] + " " + h[7] + (f.title ? f.closeBtn : 4 == f.type ? "1" : "2") + '" href="javascript:;"></a>'),a }() + "</span>" + (f.btn ? function() { var a = ""; "string" == typeof f.btn && (f.btn = [f.btn]); for(var b = 0,c = f.btn.length;c > b;b++) a += '<a class="' + h[6] + b + '">' + f.btn[b] + "</a>"; return '<div class="' + h[6] + '">' + a + "</div>" }() : "") + "</div>"],k),c },g.pt.creat = function() { var a = this,b = a.config,g = a.index,i = b.content,j = "object" == typeof i; if(!c("#" + b.id)[0]) { switch("string" == typeof b.area && (b.area = "auto" === b.area ? ["",""] : [b.area,""]),b.type) { case 0: b.btn = "btn" in b ? b.btn : e.btn[0],f.closeAll("dialog"); break; case 2: var i = b.content = j ? b.content : [b.content || "http://layer.layui.com","auto"]; b.content = '<iframe scrolling="' + (b.content[1] || "auto") + '" allowtransparency="true" id="' + h[4] + g + '" name="' + h[4] + g + '" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + b.content[0] + '"></iframe>'; break; case 3: b.title = !1,b.closeBtn = !1,-1 === b.icon && 0 === b.icon,f.closeAll("loading"); break; case 4: j || (b.content = [b.content,"body"]),b.follow = b.content[1],b.content = b.content[0] + '<i class="layui-layer-TipsG"></i>',b.title = !1,b.fix = !1,b.tips = "object" == typeof b.tips ? b.tips : [b.tips,!0],b.tipsMore || f.closeAll("tips") } a.vessel(j,function(d,e) { c("body").append(d[0]),j ? function() { 2 == b.type || 4 == b.type ? function() { c("body").append(d[1]) }() : function() { i.parents("." + h[0])[0] || (i.show().addClass("layui-layer-wrap").wrap(d[1]),c("#" + h[0] + g).find("." + h[5]).before(e)) }() }() : c("body").append(d[1]),a.layero = c("#" + h[0] + g),b.scrollbar || h.html.css("overflow","hidden").attr("layer-full",g) }).auto(g),2 == b.type && f.ie6 && a.layero.find("iframe").attr("src",i[0]),c(document).off("keydown",e.enter).on("keydown",e.enter),a.layero.on("keydown",function(a) { c(document).off("keydown",e.enter) }),4 == b.type ? a.tips() : a.offset(),b.fix && d.on("resize",function() { a.offset(),(/^\d+%$/.test(b.area[0]) || /^\d+%$/.test(b.area[1])) && a.auto(g),4 == b.type && a.tips() }),b.time <= 0 || setTimeout(function() { f.close(a.index) },b.time),a.move().callback() } },g.pt.auto = function(a) { function b(a) { a = g.find(a),a.height(i[1] - j - k - 2 * (0 | parseFloat(a.css("padding")))) } var e = this,f = e.config,g = c("#" + h[0] + a); "" === f.area[0] && f.maxWidth > 0 && (/MSIE 7/.test(navigator.userAgent) && f.btn && g.width(g.innerWidth()),g.outerWidth() > f.maxWidth && g.width(f.maxWidth)); var i = [g.innerWidth(),g.innerHeight()],j = g.find(h[1]).outerHeight() || 0,k = g.find("." + h[6]).outerHeight() || 0; switch(f.type) { case 2: b("iframe"); break; default: "" === f.area[1] ? f.fix && i[1] >= d.height() && (i[1] = d.height(),b("." + h[5])) : b("." + h[5]) } return e },g.pt.offset = function() { var a = this,b = a.config,c = a.layero,e = [c.outerWidth(),c.outerHeight()],f = "object" == typeof b.offset; a.offsetTop = (d.height() - e[1]) / 2,a.offsetLeft = (d.width() - e[0]) / 2,f ? (a.offsetTop = b.offset[0],a.offsetLeft = b.offset[1] || a.offsetLeft) : "auto" !== b.offset && (a.offsetTop = b.offset,"rb" === b.offset && (a.offsetTop = d.height() - e[1],a.offsetLeft = d.width() - e[0])),b.fix || (a.offsetTop = /%$/.test(a.offsetTop) ? d.height() * parseFloat(a.offsetTop) / 100 : parseFloat(a.offsetTop),a.offsetLeft = /%$/.test(a.offsetLeft) ? d.width() * parseFloat(a.offsetLeft) / 100 : parseFloat(a.offsetLeft),a.offsetTop += d.scrollTop(),a.offsetLeft += d.scrollLeft()),c.css({ top: a.offsetTop,left: a.offsetLeft }) },g.pt.tips = function() { var a = this,b = a.config,e = a.layero,f = [e.outerWidth(),e.outerHeight()],g = c(b.follow); g[0] || (g = c("body")); var i = { width: g.outerWidth(),height: g.outerHeight(),top: g.offset().top,left: g.offset().left },j = e.find(".layui-layer-TipsG"),k = b.tips[0]; b.tips[1] || j.remove(),i.autoLeft = function() { i.left + f[0] - d.width() > 0 ? (i.tipLeft = i.left + i.width - f[0],j.css({ right: 12,left: "auto" })) : i.tipLeft = i.left },i.where = [function() { i.autoLeft(),i.tipTop = i.top - f[1] - 10,j.removeClass("layui-layer-TipsB").addClass("layui-layer-TipsT").css("border-right-color",b.tips[1]) },function() { i.tipLeft = i.left + i.width + 10,i.tipTop = i.top,j.removeClass("layui-layer-TipsL").addClass("layui-layer-TipsR").css("border-bottom-color",b.tips[1]) },function() { i.autoLeft(),i.tipTop = i.top + i.height + 10,j.removeClass("layui-layer-TipsT").addClass("layui-layer-TipsB").css("border-right-color",b.tips[1]) },function() { i.tipLeft = i.left - f[0] - 10,i.tipTop = i.top,j.removeClass("layui-layer-TipsR").addClass("layui-layer-TipsL").css("border-bottom-color",b.tips[1]) }],i.where[k - 1](),1 === k ? i.top - (d.scrollTop() + f[1] + 16) < 0 && i.where[2]() : 2 === k ? d.width() - (i.left + i.width + f[0] + 16) > 0 || i.where[3]() : 3 === k ? i.top - d.scrollTop() + i.height + f[1] + 16 - d.height() > 0 && i.where[0]() : 4 === k && f[0] + 16 - i.left > 0 && i.where[1](),e.find("." + h[5]).css({ "background-color": b.tips[1],"padding-right": b.closeBtn ? "30px" : "" }),e.css({ left: i.tipLeft,top: i.tipTop }) },g.pt.move = function() { var a = this,b = a.config,e = { setY: 0,moveLayer: function() { var a = e.layero,b = parseInt(a.css("margin-left")),c = parseInt(e.move.css("left")); 0 === b || (c -= b),"fixed" !== a.css("position") && (c -= a.parent().offset().left,e.setY = 0),a.css({ left: c,top: parseInt(e.move.css("top")) - e.setY }) } },f = a.layero.find(b.move); return b.move && f.attr("move","ok"),f.css({ cursor: b.move ? "move" : "auto" }),c(b.move).on("mousedown",function(a) { if(a.preventDefault(),"ok" === c(this).attr("move")) { e.ismove = !0,e.layero = c(this).parents("." + h[0]); var f = e.layero.offset().left,g = e.layero.offset().top,i = e.layero.outerWidth() - 6,j = e.layero.outerHeight() - 6; c("#layui-layer-moves")[0] || c("body").append('<div id="layui-layer-moves" class="layui-layer-moves" style="left:' + f + "px; top:" + g + "px; width:" + i + "px; height:" + j + 'px; z-index:2147483584"></div>'),e.move = c("#layui-layer-moves"),b.moveType && e.move.css({ visibility: "hidden" }),e.moveX = a.pageX - e.move.position().left,e.moveY = a.pageY - e.move.position().top,"fixed" !== e.layero.css("position") || (e.setY = d.scrollTop()) } }),c(document).mousemove(function(a) { if(e.ismove) { var c = a.pageX - e.moveX,f = a.pageY - e.moveY; if(a.preventDefault(),!b.moveOut) { e.setY = d.scrollTop(); var g = d.width() - e.move.outerWidth(),h = e.setY; 0 > c && (c = 0),c > g && (c = g),h > f && (f = h),f > d.height() - e.move.outerHeight() + e.setY && (f = d.height() - e.move.outerHeight() + e.setY) } e.move.css({ left: c,top: f }),b.moveType && e.moveLayer(),c = f = g = h = null } }).mouseup(function() { try { e.ismove && (e.moveLayer(),e.move.remove(),b.moveEnd && b.moveEnd()),e.ismove = !1 } catch(a) { e.ismove = !1 } }),a },g.pt.callback = function() { function a() { var a = g.cancel && g.cancel(b.index,d); a === !1 || f.close(b.index) } var b = this,d = b.layero,g = b.config; b.openLayer(),g.success && (2 == g.type ? d.find("iframe").on("load",function() { g.success(d,b.index) }) : g.success(d,b.index)),f.ie6 && b.IE6(d),d.find("." + h[6]).children("a").on("click",function() { var a = c(this).index(); if(0 === a) g.yes ? g.yes(b.index,d) : g.btn1 ? g.btn1(b.index,d) : f.close(b.index); else { var e = g["btn" + (a + 1)] && g["btn" + (a + 1)](b.index,d); e === !1 || f.close(b.index) } }),d.find("." + h[7]).on("click",a),g.shadeClose && c("#layui-layer-shade" + b.index).on("click",function() { f.close(b.index) }),d.find(".layui-layer-min").on("click",function() { f.min(b.index,g),g.min && g.min(d) }),d.find(".layui-layer-max").on("click",function() { c(this).hasClass("layui-layer-maxmin") ? (f.restore(b.index),g.restore && g.restore(d)) : (f.full(b.index,g),g.full && g.full(d)) }),g.end && (e.end[b.index] = g.end) },e.reselect = function() { c.each(c("select"),function(a,b) { var d = c(this); d.parents("." + h[0])[0] || 1 == d.attr("layer") && c("." + h[0]).length < 1 && d.removeAttr("layer").show(),d = null }) },g.pt.IE6 = function(a) { function b() { a.css({ top: f + (e.config.fix ? d.scrollTop() : 0) }) } var e = this,f = a.offset().top; b(),d.scroll(b),c("select").each(function(a,b) { var d = c(this); d.parents("." + h[0])[0] || "none" === d.css("display") || d.attr({ layer: "1" }).hide(),d = null }) },g.pt.openLayer = function() { var a = this; f.zIndex = a.config.zIndex,f.setTop = function(a) { var b = function() { f.zIndex++,a.css("z-index",f.zIndex + 1) }; return f.zIndex = parseInt(a[0].style.zIndex),a.on("mousedown",b),f.zIndex } },e.record = function(a) { var b = [a.outerWidth(),a.outerHeight(),a.position().top,a.position().left + parseFloat(a.css("margin-left"))]; a.find(".layui-layer-max").addClass("layui-layer-maxmin"),a.attr({ area: b }) },e.rescollbar = function(a) { h.html.attr("layer-full") == a && (h.html[0].style.removeProperty ? h.html[0].style.removeProperty("overflow") : h.html[0].style.removeAttribute("overflow"),h.html.removeAttr("layer-full")) },a.layer = f,f.getChildFrame = function(a,b) { return b = b || c("." + h[4]).attr("times"),c("#" + h[0] + b).find("iframe").contents().find(a) },f.getFrameIndex = function(a) { return c("#" + a).parents("." + h[4]).attr("times") },f.iframeAuto = function(a) { if(a) { var b = f.getChildFrame("html",a).outerHeight(),d = c("#" + h[0] + a),e = d.find(h[1]).outerHeight() || 0,g = d.find("." + h[6]).outerHeight() || 0; d.css({ height: b + e + g }),d.find("iframe").css({ height: b }) } },f.iframeSrc = function(a,b) { c("#" + h[0] + a).find("iframe").attr("src",b) },f.style = function(a,b) { var d = c("#" + h[0] + a),f = d.attr("type"),g = d.find(h[1]).outerHeight() || 0,i = d.find("." + h[6]).outerHeight() || 0; (f === e.type[1] || f === e.type[2]) && (d.css(b),f === e.type[2] && d.find("iframe").css({ height: parseFloat(b.height) - g - i })) },f.min = function(a,b) { var d = c("#" + h[0] + a),g = d.find(h[1]).outerHeight() || 0; e.record(d),f.style(a,{ width: 180,height: g,overflow: "hidden" }),d.find(".layui-layer-min").hide(),"page" === d.attr("type") && d.find(h[4]).hide(),e.rescollbar(a) },f.restore = function(a) { var b = c("#" + h[0] + a),d = b.attr("area").split(","); b.attr("type"); f.style(a,{ width: parseFloat(d[0]),height: parseFloat(d[1]),top: parseFloat(d[2]),left: parseFloat(d[3]),overflow: "visible" }),b.find(".layui-layer-max").removeClass("layui-layer-maxmin"),b.find(".layui-layer-min").show(),"page" === b.attr("type") && b.find(h[4]).show(),e.rescollbar(a) },f.full = function(a) { var b,g = c("#" + h[0] + a); e.record(g),h.html.attr("layer-full") || h.html.css("overflow","hidden").attr("layer-full",a),clearTimeout(b),b = setTimeout(function() { var b = "fixed" === g.css("position"); f.style(a,{ top: b ? 0 : d.scrollTop(),left: b ? 0 : d.scrollLeft(),width: d.width(),height: d.height() }),g.find(".layui-layer-min").hide() },100) },f.title = function(a,b) { var d = c("#" + h[0] + (b || f.index)).find(h[1]); d.html(a) },f.close = function(a) { var b = c("#" + h[0] + a),d = b.attr("type"); if(b[0]) { if(d === e.type[1] && "object" === b.attr("conType")) { b.children(":not(." + h[5] + ")").remove(); for(var g = 0;2 > g;g++) b.find(".layui-layer-wrap").unwrap().hide() } else { if(d === e.type[2]) try { var i = c("#" + h[4] + a)[0]; i.contentWindow.document.write(""),i.contentWindow.close(),b.find("." + h[5])[0].removeChild(i) } catch(j) { } b[0].innerHTML = "",b.remove() } c("#layui-layer-moves, #layui-layer-shade" + a).remove(),f.ie6 && e.reselect(),e.rescollbar(a),c(document).off("keydown",e.enter),"function" == typeof e.end[a] && e.end[a](),delete e.end[a] } },f.closeAll = function(a) { c.each(c("." + h[0]),function() { var b = c(this),d = a ? b.attr("type") === a : 1; d && f.close(b.attr("times")),d = null }) }; var i = f.cache || {},j = function(a) { return i.skin ? " " + i.skin + " " + i.skin + "-" + a : "" }; f.prompt = function(a,b) { a = a || {},"function" == typeof a && (b = a); var d,e = 2 == a.formType ? '<textarea class="layui-layer-input">' + (a.value || "") + "</textarea>" : function() { return '<input type="' + (1 == a.formType ? "password" : "text") + '" class="layui-layer-input" value="' + (a.value || "") + '">' }(); return f.open(c.extend({ btn: ["&#x786E;&#x5B9A;","&#x53D6;&#x6D88;"],content: e,skin: "layui-layer-prompt" + j("prompt"),success: function(a) { d = a.find(".layui-layer-input"),d.focus() },yes: function(c) { var e = d.val(); "" === e ? d.focus() : e.length > (a.maxlength || 500) ? f.tips("&#x6700;&#x591A;&#x8F93;&#x5165;" + (a.maxlength || 500) + "&#x4E2A;&#x5B57;&#x6570;",d,{ tips: 1 }) : b && b(e,c,d) } },a)) },f.tab = function(a) { a = a || {}; var b = a.tab || {}; return f.open(c.extend({ type: 1,skin: "layui-layer-tab" + j("tab"),title: function() { var a = b.length,c = 1,d = ""; if(a > 0) for(d = '<span class="layui-layer-tabnow">' + b[0].title + "</span>";a > c;c++) d += "<span>" + b[c].title + "</span>"; return d }(),content: '<ul class="layui-layer-tabmain">' + function() { var a = b.length,c = 1,d = ""; if(a > 0) for(d = '<li class="layui-layer-tabli xubox_tab_layer">' + (b[0].content || "no content") + "</li>";a > c;c++) d += '<li class="layui-layer-tabli">' + (b[c].content || "no  content") + "</li>"; return d }() + "</ul>",success: function(b) { var d = b.find(".layui-layer-title").children(),e = b.find(".layui-layer-tabmain").children(); d.on("mousedown",function(b) { b.stopPropagation ? b.stopPropagation() : b.cancelBubble = !0; var d = c(this),f = d.index(); d.addClass("layui-layer-tabnow").siblings().removeClass("layui-layer-tabnow"),e.eq(f).show().siblings().hide(),"function" == typeof a.change && a.change(f) }) } },a)) },f.photos = function(b,d,e) { function g(a,b,c) { var d = new Image; return d.src = a,d.complete ? b(d) : (d.onload = function() { d.onload = null,b(d) },void (d.onerror = function(a) { d.onerror = null,c(a) })) } var h = {}; if(b = b || {},b.photos) { var i = b.photos.constructor === Object,k = i ? b.photos : {},l = k.data || [],m = k.start || 0; if(h.imgIndex = (0 | m) + 1,b.img = b.img || "img",i) { if(0 === l.length) return f.msg("&#x6CA1;&#x6709;&#x56FE;&#x7247;") } else { var n = c(b.photos),o = function() { l = [],n.find(b.img).each(function(a) { var b = c(this); b.attr("layer-index",a),l.push({ alt: b.attr("alt"),pid: b.attr("layer-pid"),src: b.attr("layer-src") || b.attr("src"),thumb: b.attr("src") }) }) }; if(o(),0 === l.length) return; if(d || n.on("click",b.img,function() { var a = c(this),d = a.attr("layer-index"); f.photos(c.extend(b,{ photos: { start: d,data: l,tab: b.tab },full: b.full }),!0),o() }),!d) return } h.imgprev = function(a) { h.imgIndex--,h.imgIndex < 1 && (h.imgIndex = l.length),h.tabimg(a) },h.imgnext = function(a,b) { h.imgIndex++,h.imgIndex > l.length && (h.imgIndex = 1,b) || h.tabimg(a) },h.keyup = function(a) { if(!h.end) { var b = a.keyCode; a.preventDefault(),37 === b ? h.imgprev(!0) : 39 === b ? h.imgnext(!0) : 27 === b && f.close(h.index) } },h.tabimg = function(a) { l.length <= 1 || (k.start = h.imgIndex - 1,f.close(h.index),f.photos(b,!0,a)) },h.event = function() { h.bigimg.hover(function() { h.imgsee.show() },function() { h.imgsee.hide() }),h.bigimg.find(".layui-layer-imgprev").on("click",function(a) { a.preventDefault(),h.imgprev() }),h.bigimg.find(".layui-layer-imgnext").on("click",function(a) { a.preventDefault(),h.imgnext() }),c(document).on("keyup",h.keyup) },h.loadi = f.load(1,{ shade: "shade" in b ? !1 : .9,scrollbar: !1 }),g(l[m].src,function(d) { f.close(h.loadi),h.index = f.open(c.extend({ type: 1,area: function() { var e = [d.width,d.height],f = [c(a).width() - 50,c(a).height() - 50]; return !b.full && e[0] > f[0] && (e[0] = f[0],e[1] = e[0] * d.height / d.width),[e[0] + "px",e[1] + "px"] }(),title: !1,shade: .9,shadeClose: !0,closeBtn: !1,move: ".layui-layer-phimg img",moveType: 1,scrollbar: !1,moveOut: !0,shift: 5 * Math.random() | 0,skin: "layui-layer-photos" + j("photos"),content: '<div class="layui-layer-phimg"><img src="' + l[m].src + '" alt="' + (l[m].alt || "") + '" layer-pid="' + l[m].pid + '"><div class="layui-layer-imgsee">' + (l.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : "") + '<div class="layui-layer-imgbar" style="display:' + (e ? "block" : "") + '"><span class="layui-layer-imgtit"><a href="javascript:;">' + (l[m].alt || "") + "</a><em>" + h.imgIndex + "/" + l.length + "</em></span></div></div></div>",success: function(a,c) { h.bigimg = a.find(".layui-layer-phimg"),h.imgsee = a.find(".layui-layer-imguide,.layui-layer-imgbar"),h.event(a),b.tab && b.tab(l[m],a) },end: function() { h.end = !0,c(document).off("keyup",h.keyup) } },b)) },function() { f.close(h.loadi),f.msg("&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;",{ time: 3e4,btn: ["&#x4E0B;&#x4E00;&#x5F20;","&#x4E0D;&#x770B;&#x4E86;"],yes: function() { l.length > 1 && h.imgnext(!0,!0) } }) }) } },e.run = function() { c = jQuery,d = c(a),h.html = c("html"),f.open = function(a) { var b = new g(a); return b.index } },"function" == typeof define ? define(function() { return e.run(),f }) : function() { e.run() }() }(window);